package ca.cgjennings.apps.arkham.dialog;

import ca.cgjennings.algo.TextIndex;
import ca.cgjennings.algo.TextIndex.Query;
import ca.cgjennings.ui.IconBorder;
import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.util.Set;
import javax.swing.DefaultListModel;
import resources.ResourceKit;

/**
 * A viewer for {@link TextIndex} files to aid in debugging.
 *
 * @author Chris Jennings <https://cgjennings.ca/contact>
 * @since 3.0
 */
@SuppressWarnings("serial")
public class TextIndexViewer extends javax.swing.JDialog {

    private final TextIndex ti;
    private final DefaultListModel docModel = new DefaultListModel();

    /**
     * Creates new form TextIndexViewer
     */
    public TextIndexViewer(java.awt.Frame parent, File index) throws IOException {
        super(parent, true);
        initComponents();
        setTitle(index.getName());
        ti = TextIndex.read(index);
        DefaultListModel m = new DefaultListModel();
        for (String s : ti) {
            m.addElement(s);
        }
        wordList.setModel(m);
        docList.setModel(docModel);
        new IconBorder(ResourceKit.getIcon("ui/find.png")).install(queryField);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        wordList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        docList = new javax.swing.JList();
        closeBtn = new javax.swing.JButton();
        queryField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        wordList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                wordListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(wordList);

        docList.setFont(docList.getFont().deriveFont(docList.getFont().getSize()-2f));
        jScrollPane2.setViewportView(docList);

        closeBtn.setText(string("close")); // NOI18N
        closeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtnActionPerformed(evt);
            }
        });

        queryField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queryFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(queryField, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(closeBtn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closeBtn)
                    .addComponent(queryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void wordListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_wordListValueChanged
            String s = (String) wordList.getSelectedValue();
            if (s == null) {
                return;
            }
            Query q = new TextIndex.Atom(s);
            loadDocsFromQuery(q);
	}//GEN-LAST:event_wordListValueChanged

	private void closeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtnActionPerformed
            dispose();
	}//GEN-LAST:event_closeBtnActionPerformed

	private void queryFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queryFieldActionPerformed
            try {
                if (parser == null) {
                    parser = new TextIndex.QueryParser();
                }
                Query q = parser.parse(queryField.getText());
                loadDocsFromQuery(q);
                queryField.setForeground(Color.BLACK);
            } catch (IllegalArgumentException e) {
                queryField.setForeground(Color.RED);
            }
	}//GEN-LAST:event_queryFieldActionPerformed

    private TextIndex.QueryParser parser;

    private void loadDocsFromQuery(Query q) {
        docModel.clear();
        Set<String> result = q.evaluate(ti);
        if (result != null) {
            for (String doc : result) {
                docModel.addElement(doc);
            }
        }
    }

//	/**
//	 * @param args the command line arguments
//	 */
//	public static void main( String args[] ) {
//		java.awt.EventQueue.invokeLater( new Runnable() {
//
//			@Override
//			public void run() {
//				try {
//				TextIndexViewer dialog = new TextIndexViewer( new javax.swing.JFrame(), new File("d:\\se3\\JavaDoc\\core-StrangeEonsAPIDocs\\api-indices\\se.idx") );
//				dialog.addWindowListener( new java.awt.event.WindowAdapter() {
//					@Override
//					public void windowClosing( java.awt.event.WindowEvent e ) {
//						System.exit( 0 );
//					}
//				} );
//				dialog.setVisible( true );
//				}catch( Throwable t ) {t.printStackTrace();}
//			}
//		} );
//	}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeBtn;
    private javax.swing.JList docList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField queryField;
    private javax.swing.JList wordList;
    // End of variables declaration//GEN-END:variables

    private String string(String key) {
        return resources.Language.string(key);
    }
}
