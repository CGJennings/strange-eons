package ca.cgjennings.apps.arkham.dialog;

import ca.cgjennings.apps.arkham.StrangeEons;
import ca.cgjennings.apps.arkham.plugins.AbstractInstalledPlugin;
import ca.cgjennings.apps.arkham.plugins.BundleInstaller;
import ca.cgjennings.apps.arkham.plugins.InstalledBundleObject;
import ca.cgjennings.apps.arkham.plugins.InstalledExtension;
import ca.cgjennings.apps.arkham.plugins.InstalledLibrary;
import ca.cgjennings.apps.arkham.plugins.InstalledPlugin;
import ca.cgjennings.apps.arkham.plugins.InstalledTheme;
import ca.cgjennings.apps.arkham.plugins.Plugin;
import ca.cgjennings.apps.arkham.plugins.PluginBundle;
import ca.cgjennings.apps.arkham.plugins.PluginRoot;
import ca.cgjennings.apps.arkham.plugins.catalog.CatalogDialog;
import ca.cgjennings.apps.arkham.plugins.catalog.CatalogID;
import ca.cgjennings.apps.arkham.project.ProjectUtilities;
import ca.cgjennings.graphics.ImageUtilities;
import ca.cgjennings.platform.DesktopIntegration;
import ca.cgjennings.ui.EditorPane;
import ca.cgjennings.ui.JKeyStrokeField;
import ca.cgjennings.ui.JUtilities;
import ca.cgjennings.ui.anim.AnimationUtilities;
import ca.cgjennings.ui.theme.Theme;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Rectangle;
import java.awt.datatransfer.StringSelection;
import java.awt.font.TextAttribute;
import java.awt.image.BufferedImage;
import java.beans.PropertyVetoException;
import java.io.File;
import java.io.IOException;
import java.util.Collections;
import java.util.Date;
import java.util.logging.Level;
import javax.swing.BorderFactory;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.JList;
import javax.swing.KeyStroke;
import javax.swing.UIManager;
import javax.swing.border.Border;
import static resources.Language.string;
import resources.ResourceKit;
import resources.Settings;

/**
 * This dialog window allows the user to manage the installed plug-ins by
 * uninstalling bundles, enabling or disabling individual plug-ins.
 *
 * @author Chris Jennings <https://cgjennings.ca/contact>
 * @since 3.0 (replaces
 * {@code ca.cgjennings.apps.arkham.plugins.impl.Manager)}
 */
@SuppressWarnings("serial")
public class PluginManager extends javax.swing.JDialog {

    /**
     * Creates a new PluginManager dialog whose parent is the main application
     * window.
     */
    public PluginManager() {
        this(StrangeEons.getWindow());
        getRootPane().setDefaultButton(cancelBtn);
    }

    /**
     * Creates a new PluginManager dialog.
     *
     * @param parent the window that will be the dialog's parent
     */
    public PluginManager(java.awt.Window parent) {
        super(parent, ModalityType.APPLICATION_MODAL);
        initComponents();

        listIcon = pluginIcon.getIcon();
        pluginListValueChanged(null);

        populateList();

        setLocationRelativeTo(parent);
    }

    private void populateList() {
        DefaultListModel m = new DefaultListModel();

        // Plug-ins
        InstalledPlugin[] plugins = BundleInstaller.getInstalledPlugins();
        if (plugins.length > 0) {
            m.addElement(new Entry(string("plug-div-plugin"), string("plug-plugin-desc"), BundleInstaller.PLUGIN_FILE_EXT));
        }
        for (InstalledPlugin p : plugins) {
            m.addElement(new Entry(p));
        }

        // Extensions
        InstalledExtension[] exts = BundleInstaller.getInstalledExtensions();
        if (exts.length > 0) {
            m.addElement(new Entry(string("plug-div-ext"), string("plug-ext-desc"), BundleInstaller.EXTENSION_FILE_EXT));
        }
        for (InstalledExtension p : exts) {
            m.addElement(new Entry(p));
        }

        // Themes
        InstalledTheme[] themes = BundleInstaller.getInstalledThemes();
        if (themes.length > 0) {
            m.addElement(new Entry(string("plug-div-theme"), string("sd-l-theme-desc"), BundleInstaller.THEME_FILE_EXT));
        }
        for (InstalledTheme t : themes) {
            m.addElement(new Entry(t));
        }

        // Libraries
        boolean addedTitle = false;
        InstalledLibrary[] libs = BundleInstaller.getInstalledLibraries();
        if (libs.length > 0) {
            m.addElement(new Entry(string("plug-div-lib"), string("plug-lib-desc"), BundleInstaller.LIBRARY_FILE_EXT));
        }
        for (InstalledLibrary lib : libs) {
            m.addElement(new Entry(lib));
        }

        pluginList.setModel(m);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        descriptionPopup = new javax.swing.JPopupMenu();
        descCopyItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        showAdvCheck = new javax.swing.JCheckBoxMenuItem();
        top = new javax.swing.JPanel();
        listScroll = new javax.swing.JScrollPane();
        pluginList = new javax.swing.JList();
        javax.swing.JPanel compoundPluginPanel = new javax.swing.JPanel();
        pluginScroll = new javax.swing.JScrollPane();
        descPane = new EditorPane();
        pluginTitle = new javax.swing.JPanel();
        pluginIcon = new javax.swing.JLabel();
        pluginName = new javax.swing.JLabel();
        pluginDesc = new javax.swing.JLabel();
        configPanel = new javax.swing.JPanel();
        uninstallBtn = new javax.swing.JButton();
        enableCheck = new javax.swing.JCheckBox();
        shortcutLabel = new javax.swing.JLabel();
        shortcutField = new ca.cgjennings.ui.JKeyStrokeField();
        shortcutTip = new ca.cgjennings.ui.JTip();
        bottom = new javax.swing.JPanel();
        overlayPanel = new ca.cgjennings.apps.arkham.dialog.OverlayPanel();
        downloadBtn = new javax.swing.JButton();
        openPluginFolderBtn = new javax.swing.JButton();
        helpBtn = new ca.cgjennings.ui.JHelpButton();
        cancelBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        descCopyItem.setText(string( "copy" )); // NOI18N
        descCopyItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descCopyItemActionPerformed(evt);
            }
        });
        descriptionPopup.add(descCopyItem);
        descriptionPopup.add(jSeparator1);

        showAdvCheck.setSelected( Settings.getUser().getBoolean( "catalog-show-expert-info" ) );
        showAdvCheck.setText(string( "cat-show-adv" )); // NOI18N
        showAdvCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAdvCheckActionPerformed(evt);
            }
        });
        descriptionPopup.add(showAdvCheck);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(string( "plug-title" )); // NOI18N

        pluginList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        pluginList.setCellRenderer( renderer );
        pluginList.setVisibleRowCount(25);
        pluginList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                pluginListValueChanged(evt);
            }
        });
        listScroll.setViewportView(pluginList);

        compoundPluginPanel.setBorder(listScroll.getBorder());
        compoundPluginPanel.setLayout(new java.awt.BorderLayout());

        pluginScroll.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));

        descPane.setEditable(false);
        descPane.setContentType("text/html"); // NOI18N
        descPane.setComponentPopupMenu(descriptionPopup);
        pluginScroll.setViewportView(descPane);

        compoundPluginPanel.add(pluginScroll, java.awt.BorderLayout.CENTER);

        pluginTitle.setBackground(UIManager.getColor(Theme.PROJECT_FIND_BACKGROUND));
        pluginTitle.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, java.awt.Color.gray));
        pluginTitle.setLayout(new java.awt.GridBagLayout());

        pluginIcon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pluginIcon.setIcon( ResourceKit.getIcon( "ui/wrench.png" ) );
        pluginIcon.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        pluginIcon.setPreferredSize(new java.awt.Dimension(24, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.insets = new java.awt.Insets(4, 8, 4, 8);
        pluginTitle.add(pluginIcon, gridBagConstraints);

        pluginName.setFont(pluginName.getFont().deriveFont(pluginName.getFont().getStyle() | java.awt.Font.BOLD, pluginName.getFont().getSize()+2));
        pluginName.setForeground(UIManager.getColor(Theme.PROJECT_FIND_FOREGROUND));
        pluginName.setText(" ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 8);
        pluginTitle.add(pluginName, gridBagConstraints);

        pluginDesc.setFont(pluginDesc.getFont().deriveFont(pluginDesc.getFont().getSize()-1f));
        pluginDesc.setForeground(UIManager.getColor(Theme.PROJECT_FIND_FOREGROUND));
        pluginDesc.setText(" ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 4, 8);
        pluginTitle.add(pluginDesc, gridBagConstraints);

        compoundPluginPanel.add(pluginTitle, java.awt.BorderLayout.PAGE_START);

        configPanel.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 0, 0, 0, java.awt.Color.gray));

        uninstallBtn.setFont(uninstallBtn.getFont().deriveFont(uninstallBtn.getFont().getStyle() | java.awt.Font.BOLD));
        uninstallBtn.setText(string( "plug-b-uninstall" )); // NOI18N
        uninstallBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uninstallBtnActionPerformed(evt);
            }
        });

        enableCheck.setText(string( "plug-b-enabled" )); // NOI18N
        enableCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enableCheckActionPerformed(evt);
            }
        });

        shortcutLabel.setFont(shortcutLabel.getFont().deriveFont(shortcutLabel.getFont().getStyle() | java.awt.Font.BOLD));
        shortcutLabel.setText(string( "plug-col-key" )); // NOI18N

        shortcutField.setText("Ctrl+Alt+Shift+Backspace");
        shortcutField.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
                shortcutFieldVetoableChange(evt);
            }
        });

        shortcutTip.setTipText(string( "plug-col-key-tip" )); // NOI18N
        shortcutTip.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                shortcutTipPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout configPanelLayout = new javax.swing.GroupLayout(configPanel);
        configPanel.setLayout(configPanelLayout);
        configPanelLayout.setHorizontalGroup(
            configPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(configPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(configPanelLayout.createSequentialGroup()
                        .addComponent(enableCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(uninstallBtn))
                    .addGroup(configPanelLayout.createSequentialGroup()
                        .addGroup(configPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(configPanelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(shortcutField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(shortcutTip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(shortcutLabel))
                        .addGap(0, 185, Short.MAX_VALUE)))
                .addContainerGap())
        );
        configPanelLayout.setVerticalGroup(
            configPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(shortcutLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(configPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(shortcutField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(shortcutTip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(configPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(uninstallBtn)
                    .addComponent(enableCheck))
                .addContainerGap())
        );

        compoundPluginPanel.add(configPanel, java.awt.BorderLayout.PAGE_END);

        javax.swing.GroupLayout topLayout = new javax.swing.GroupLayout(top);
        top.setLayout(topLayout);
        topLayout.setHorizontalGroup(
            topLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, topLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(listScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(compoundPluginPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        topLayout.setVerticalGroup(
            topLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, topLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(topLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(listScroll, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE)
                    .addComponent(compoundPluginPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE))
                .addContainerGap())
        );

        getContentPane().add(top, java.awt.BorderLayout.CENTER);

        bottom.setLayout(new java.awt.GridBagLayout());

        downloadBtn.setFont(downloadBtn.getFont().deriveFont(downloadBtn.getFont().getSize()-1f));
        downloadBtn.setIcon( ResourceKit.getIcon( "catalog/update-available.png" ) );
        downloadBtn.setText(string( "plug-l-download" )); // NOI18N
        downloadBtn.setMargin(new java.awt.Insets(2, 2, 2, 2));
        downloadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadBtnActionPerformed(evt);
            }
        });

        openPluginFolderBtn.setFont(openPluginFolderBtn.getFont().deriveFont(openPluginFolderBtn.getFont().getSize()-1f));
        openPluginFolderBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/project/folder.png"))); // NOI18N
        openPluginFolderBtn.setText(string( "plug-l-open-folder" )); // NOI18N
        openPluginFolderBtn.setEnabled(  DesktopIntegration.SHOW_IN_SHELL_SUPPORTED );
        openPluginFolderBtn.setMargin(new java.awt.Insets(2, 2, 2, 2));
        openPluginFolderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openPluginFolderBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout overlayPanelLayout = new javax.swing.GroupLayout(overlayPanel);
        overlayPanel.setLayout(overlayPanelLayout);
        overlayPanelLayout.setHorizontalGroup(
            overlayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(overlayPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(downloadBtn)
                .addGap(5, 5, 5)
                .addComponent(openPluginFolderBtn)
                .addGap(6, 6, 6))
        );
        overlayPanelLayout.setVerticalGroup(
            overlayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(overlayPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(overlayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(downloadBtn)
                    .addComponent(openPluginFolderBtn))
                .addGap(6, 6, 6))
        );

        overlayPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {downloadBtn, openPluginFolderBtn});

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 8);
        bottom.add(overlayPanel, gridBagConstraints);

        helpBtn.setHelpPage("plugins-manager");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 16);
        bottom.add(helpBtn, gridBagConstraints);

        cancelBtn.setText(string( "close" )); // NOI18N
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 8);
        bottom.add(cancelBtn, gridBagConstraints);

        jLabel1.setText(" ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        bottom.add(jLabel1, gridBagConstraints);

        getContentPane().add(bottom, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private Icon listIcon;

    private Entry showing;
	private void pluginListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_pluginListValueChanged
            Entry e = (Entry) pluginList.getSelectedValue();

            if (evt != null && showing == e) {
                return;
            }
            showing = e;

            updatePanelOptions(e);

            if (e == null) {
                pluginName.setText(string("plug-l-list"));
                pluginDesc.setText(string("plug-l-list-desc"));
                pluginIcon.setIcon(listIcon);
                descPane.setText("<html>");
                return;
            }

            AnimationUtilities.animateIconTransition(pluginIcon, e.mainIcon);
            pluginName.setText(e.name);
            pluginDesc.setText(e.desc);

            StringBuilder b = new StringBuilder("<html>");
            InstalledBundleObject iplugin = e.iplugin;

            if (iplugin != null) {
                b.append("<table cellspacing=0 cellpadding=1 border=0>");
                fillInTable(b, iplugin);
                b.append("</table>");

                // pending update/uninstall
                if (iplugin.isUpdatePending()) {
                    fillInBox(b, string("plug-l-will-update"), false);
                } else if (iplugin.isUninstallPending()) {
                    fillInBox(b, string("plug-l-will-uninstall"), true);
                }

                PluginBundle pb = iplugin.getBundle();
                if (pb != null) {
                    try {
                        PluginRoot root = pb.getPluginRoot();

                        String catDesc = root.getLocalizedClientProperty("catalog-description");
                        if (catDesc != null) {
                            b.append("<h2>").append(string("plug-l-cat-desc")).append("</h2>").append(catDesc);
                        }
                    } catch (IOException ioe) {
                    }
                }
            }

            b.append("</html>");
            descPane.setText(b.toString());
            descPane.select(0, 0);
	}//GEN-LAST:event_pluginListValueChanged

    private void updatePanelOptions(Entry sel) {
        InstalledBundleObject iplugin = (sel == null) ? null : sel.iplugin;
        if (iplugin instanceof InstalledPlugin) {
            InstalledPlugin p = (InstalledPlugin) iplugin;
            int type = p.getPluginType();
            shortcutLabel.setEnabled(type == Plugin.ACTIVATED);
            shortcutField.setEnabled(type == Plugin.ACTIVATED);
            shortcutTip.setVisible(type == Plugin.ACTIVATED);
            if (type == Plugin.ACTIVATED) {
                shortcutField.setKeyStroke(p.getAcceleratorKey());
            } else {
                shortcutField.setText(null);
            }

            if (type != Plugin.EXTENSION) {
                enableCheck.setEnabled(true);
                enableCheck.setSelected(p.isEnabled());
            } else {
                enableCheck.setEnabled(false);
                enableCheck.setSelected(true);
            }
        } else {
            shortcutLabel.setEnabled(false);
            shortcutField.setEnabled(false);
            shortcutField.setKeyStroke(null);
            shortcutTip.setVisible(false);

            enableCheck.setEnabled(false);
            enableCheck.setSelected(true);
        }

        if (iplugin == null || iplugin.getBundle() == null) {
            uninstallBtn.setEnabled(false);
        } else {
            String uninstallLabelKey;
            if (sel.uninstalled) {
                uninstallLabelKey = "plug-b-no-uninstall";
            } else {
                uninstallLabelKey = "plug-b-uninstall";
            }
            uninstallBtn.setText(string(uninstallLabelKey));
            uninstallBtn.setEnabled(true);
        }
    }

    private void fillInBox(StringBuilder b, String text, boolean warn) {
        b.append("<p align='center' style='padding: 4px; border: 2px #")
            .append(warn ? "ffa000" : "1565c0").append(" solid'>")
            .append(text).append("</p>");
    }

	private void openPluginFolderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openPluginFolderBtnActionPerformed
            JUtilities.showWaitCursor(this);
            try {
                File selectedBundle = null;

                Entry sel = (Entry) pluginList.getSelectedValue();
                if (sel != null && sel.iplugin != null && sel.iplugin.getBundle() != null) {
                    selectedBundle = sel.iplugin.getBundle().getFile();
                }

                if (selectedBundle != null) {
                    DesktopIntegration.showInShell(selectedBundle);
                } else {
                    DesktopIntegration.showInShell(BundleInstaller.PLUGIN_FOLDER);
                }
            } finally {
                JUtilities.hideWaitCursor(this);
            }
	}//GEN-LAST:event_openPluginFolderBtnActionPerformed

	private void shortcutFieldVetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_shortcutFieldVetoableChange
            if (evt.getPropertyName().equals(JKeyStrokeField.PROPERTY_KEY_STROKE_CHANGE)) {
                KeyStroke ks = (KeyStroke) evt.getNewValue();
                pluginList.repaint();

                if (ks != null) {
                    if (JUtilities.isAcceleratorInUse(StrangeEons.getWindow().getJMenuBar(), ks)) {
                        throw new PropertyVetoException("in use", evt);
                    }
                }

                Entry e = (Entry) pluginList.getSelectedValue();
                // none of these should happen, since the button should be disabled
                if (e == null || e.iplugin == null || !(e.iplugin instanceof InstalledPlugin)) {
                    return;
                }
                ((InstalledPlugin) e.iplugin).setAcceleratorKey(ks);
            }
	}//GEN-LAST:event_shortcutFieldVetoableChange

	private void descCopyItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descCopyItemActionPerformed
            if (descPane.getSelectionStart() == descPane.getSelectionEnd()) {
                StringSelection ss = new StringSelection(descPane.getText());
                getToolkit().getSystemClipboard().setContents(ss, ss);
            } else {
                descPane.copy();
            }
}//GEN-LAST:event_descCopyItemActionPerformed

	private void showAdvCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAdvCheckActionPerformed
            Settings.getUser().set("catalog-show-expert-info", showAdvCheck.isSelected() ? "yes" : "no");
            pluginListValueChanged(null);
}//GEN-LAST:event_showAdvCheckActionPerformed

	private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
            dispose();
	}//GEN-LAST:event_cancelBtnActionPerformed

	private void uninstallBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uninstallBtnActionPerformed
            Entry e = (Entry) pluginList.getSelectedValue();
            // none of these should happen, since the button should be disabled
            if (e == null || e.iplugin == null || e.iplugin.getBundle() == null) {
                return;
            }

            if (e.uninstalled) {
                try {
                    int flags = BundleInstaller.installPluginBundle(e.iplugin.getBundle().getFile());
                    if (flags != 0) {
                        throw new IOException("bundle flags indicate not already installed");
                    }
                } catch (IOException ioe) {
                    // because the plug-in should already be installed, it should
                    // be impossible to get an IOE
                    StrangeEons.log.log(Level.SEVERE, null, ioe);
                }
            } else {
                BundleInstaller.uninstallPluginBundle(e.iplugin.getBundle());
            }
            e.updateInstallStatus();
            pluginListValueChanged(null);
	}//GEN-LAST:event_uninstallBtnActionPerformed

	private void downloadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadBtnActionPerformed
            dispose();
            CatalogDialog d = new CatalogDialog(StrangeEons.getWindow());
            d.setVisible(true);
            StrangeEons.getApplication().loadPlugins();
	}//GEN-LAST:event_downloadBtnActionPerformed

	private void enableCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableCheckActionPerformed
            Entry e = (Entry) pluginList.getSelectedValue();
            // none of these should happen, since the button should be disabled
            if (e == null || e.iplugin == null || !(e.iplugin instanceof InstalledPlugin)) {
                return;
            }
            ((InstalledPlugin) e.iplugin).setEnabled(enableCheck.isSelected());
            pluginList.repaint();
	}//GEN-LAST:event_enableCheckActionPerformed

    private void shortcutTipPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_shortcutTipPropertyChange
        String p = evt.getPropertyName().toLowerCase();
        if (p.equals("enabled") || p.equals("visible")) {
            System.err.println("X");
        }
    }//GEN-LAST:event_shortcutTipPropertyChange

    @Override
    public void dispose() {
        super.dispose();
        StrangeEons.getApplication().loadPlugins();
    }

    private void row(StringBuilder b, String key, String value) {
        b.append("<tr><td><b>")
                .append(string(key))
                .append("&nbsp;</b><td>")
                .append(value);
    }

    private void fillInVersionRow(StringBuilder b, InstalledBundleObject iplugin) {
        // section head
        if (iplugin == null) {
            return;
        }

        String ver = "";

        InstalledPlugin p = (iplugin instanceof InstalledPlugin) ? (InstalledPlugin) iplugin : null;
        CatalogID id = iplugin == null ? null : iplugin.getCatalogID();

        if (p != null) {
            float internalVersion = p.getVersion();
            if (internalVersion > 0f) {
                ver = String.format("%.2f", internalVersion);
                if (id != null) {
                    ver += " (";
                }
            }
        }

        if (id != null) {
            ver += String.format("%1$tb %1$td %1$tY", id.getDate());
            if (p != null && p.getVersion() > 0f) {
                ver += ')';
            }
        }

        if (p == null && id == null) {
            long lastModif = 0L;
            PluginBundle pb = iplugin.getBundle();
            if (pb != null) {
                lastModif = pb.getFile().lastModified();
                if (lastModif != 0L) {
                    Date d = new Date(lastModif);
                    ver = String.format("%1$tb %1$td %1$tY", d);
                }
            } else {
                ver = String.valueOf(StrangeEons.getBuildNumber());
            }
            if (lastModif == 0) {
                ver = string("plug-missing-info");
            }
        }

        row(b, "plug-col-ver", ver);
    }

    private void fillInTable(StringBuilder b, InstalledBundleObject iplugin) {
        fillInVersionRow(b, iplugin);

        PluginBundle pb = iplugin.getBundle();
        if (pb == null) {
            row(b, "prj-prop-name", string("plug-no-file"));
            row(b, "prj-prop-size", "");
            return;
        }

        row(b, "prj-prop-name", pb.getFile().getName());
        row(b, "prj-prop-size", ProjectUtilities.formatByteSize(pb.getFile().length()));

        try {
            PluginRoot r = pb.getPluginRoot();
            if (Settings.getUser().getYesNo("catalog-show-expert-info")) {
                if (iplugin instanceof AbstractInstalledPlugin) {
                    row(b, "plug-col-class", ((AbstractInstalledPlugin) iplugin).getPluginClass());
                } else if (iplugin instanceof InstalledTheme) {
                    row(b, "plug-col-class", ((InstalledTheme) iplugin).getThemeClass());
                }
                CatalogID id = r.getCatalogID();
                row(b, "prj-re-uuid", id == null ? "" : id.toUUIDString());
                row(b, "prj-re-id-version", id == null ? "" : id.getFormattedDate());
                row(b, "plug-l-priority", String.valueOf(r.getPriority()));
            }
        } catch (IOException e) {
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bottom;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JPanel configPanel;
    private javax.swing.JMenuItem descCopyItem;
    private javax.swing.JEditorPane descPane;
    private javax.swing.JPopupMenu descriptionPopup;
    private javax.swing.JButton downloadBtn;
    private javax.swing.JCheckBox enableCheck;
    private ca.cgjennings.ui.JHelpButton helpBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JScrollPane listScroll;
    private javax.swing.JButton openPluginFolderBtn;
    private ca.cgjennings.apps.arkham.dialog.OverlayPanel overlayPanel;
    private javax.swing.JLabel pluginDesc;
    private javax.swing.JLabel pluginIcon;
    private javax.swing.JList pluginList;
    private javax.swing.JLabel pluginName;
    private javax.swing.JScrollPane pluginScroll;
    private javax.swing.JPanel pluginTitle;
    private ca.cgjennings.ui.JKeyStrokeField shortcutField;
    private javax.swing.JLabel shortcutLabel;
    private ca.cgjennings.ui.JTip shortcutTip;
    private javax.swing.JCheckBoxMenuItem showAdvCheck;
    private javax.swing.JPanel top;
    private javax.swing.JButton uninstallBtn;
    // End of variables declaration//GEN-END:variables

    private DefaultListCellRenderer renderer = new DefaultListCellRenderer() {
        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);

            if (section == null) {
                section = getFont();
                plugin = section.deriveFont(section.getSize2D() - 1f);
                uninstalling = plugin.deriveFont(Collections.singletonMap(TextAttribute.STRIKETHROUGH, TextAttribute.STRIKETHROUGH_ON));
            }

            Entry e = (Entry) value;
            setEnabled(true);
            if (e.iplugin == null) {
                setBorder(index == 0 ? topSectionBorder : sectionBorder);
                if (!isSelected) {
                    setBackground(UIManager.getColor(Theme.PREFS_BACKGROUND));
                }
                setForeground(UIManager.getColor(Theme.PREFS_FOREGROUND));
                setFont(section);
            } else {
                if (e.uninstalled) {
                    setFont(uninstalling);
                    setEnabled(false);
                } else {
                    setFont(plugin);
                }

                if (e.iplugin instanceof InstalledPlugin) {
                    if (!((InstalledPlugin) e.iplugin).isEnabled()) {
                        setEnabled(false);
                    }
                }

                if (e.update) {
                    setForeground(Color.BLUE);
                }
            }

            setIcon(e.icon);
            return this;
        }

        private Font section, plugin, uninstalling;
    };

    private Border sectionBorder = BorderFactory.createCompoundBorder(
            BorderFactory.createMatteBorder(1, 0, 1, 0, Color.GRAY),
            BorderFactory.createEmptyBorder(1, 1, 1, 1)
    );
    private Border topSectionBorder = BorderFactory.createCompoundBorder(
            BorderFactory.createMatteBorder(0, 0, 1, 0, Color.GRAY),
            BorderFactory.createEmptyBorder(1, 1, 1, 1)
    );

    private static final int ICON_SIZE = 24;

    private static Icon fixIcon(Icon i) {
        if (i.getIconWidth() != ICON_SIZE || i.getIconHeight() != ICON_SIZE) {
            i = fixIcon(ImageUtilities.iconToImage(i));
        }
        return i;
    }

    private static Icon fixIcon(BufferedImage bi) {
        return ImageUtilities.createIconForSize(bi, ICON_SIZE);
    }

    private final class Entry {

        InstalledBundleObject iplugin;
        Icon icon;
        Icon mainIcon;
        String name, desc;
        boolean update;
        boolean uninstalled;

        public Entry(String categoryName, String desc, String ext) {
            name = categoryName;
            mainIcon = fixIcon(PluginBundle.getIcon(ext, false));
            this.desc = desc;
        }

        public Entry(InstalledBundleObject obj) {
            iplugin = obj;
            name = obj.getName();
            desc = obj.getDescription();
            icon = obj.getIcon();
            if (obj.getRepresentativeImage() == null) {
                mainIcon = fixIcon(PluginBundle.getIcon(obj.getBundle().getFile(), false));
            } else {
                mainIcon = fixIcon(obj.getRepresentativeImage());
            }
            updateInstallStatus();
        }

        void updateInstallStatus() {
            boolean oldUpdate = update;
            boolean oldUninstalled = uninstalled;

            if (iplugin == null) {
                return;
            }
            PluginBundle pb = iplugin.getBundle();
            if (pb == null) {
                return;
            }

            File f = pb.getFile();
            if (new File(f.getPath() + BundleInstaller.UPDATE_FILE_EXT).exists()) {
                update = true;
            }

            uninstalled = StrangeEons.getApplication().willDeleteOnStartup(f);

            if (oldUpdate != update || oldUninstalled != uninstalled) {
                if (isShowing()) {
                    repaint();
                }
            }
        }

        void repaint() {
            DefaultListModel model = (DefaultListModel) pluginList.getModel();
            int index = model.indexOf(this);
            if (index >= 0) {
                Rectangle paintRect = pluginList.getCellBounds(index, index);
                if (paintRect != null && pluginList.isShowing()) {
                    pluginList.repaint(paintRect);
                }
            }
        }

        @Override
        public String toString() {
            return name;
        }
    }

}
