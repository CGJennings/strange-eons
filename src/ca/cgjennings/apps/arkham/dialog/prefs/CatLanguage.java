package ca.cgjennings.apps.arkham.dialog.prefs;

import ca.cgjennings.apps.arkham.StrangeEons;
import ca.cgjennings.spelling.SpellingChecker;
import ca.cgjennings.spelling.policy.AcceptPolicy;
import ca.cgjennings.spelling.ui.LookupServiceProvider;
import ca.cgjennings.spelling.ui.LookupServices;
import ca.cgjennings.spelling.ui.UserDictionaryDialog;
import ca.cgjennings.ui.JIconComboBox;
import ca.cgjennings.ui.text.WordTokenizer;
import ca.cgjennings.ui.textedit.SpellingHighlighter;
import java.awt.Component;
import java.util.Locale;
import java.util.logging.Level;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JWindow;
import resources.Language;
import static resources.Language.string;
import resources.ResourceKit;
import resources.Settings;

/**
 * Category panel for language-related settings and services.
 *
 * @author Chris Jennings <https://cgjennings.ca/contact>
 */
@SuppressWarnings("serial")
public class CatLanguage extends javax.swing.JPanel implements PreferenceCategory {

    /**
     * Creates new form CatLanguage
     */
    public CatLanguage() {
        initComponents();
        FillInPreferenceCategory.style(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JLabel languageSect = new javax.swing.JLabel();
        javax.swing.JLabel gameLangLabel = new javax.swing.JLabel();
        gameLangCombo = new JIconComboBox();
        javax.swing.JLabel uiLangLabel = new javax.swing.JLabel();
        uiLangCombo = new JIconComboBox();
        javax.swing.JLabel thesaurusSect = new javax.swing.JLabel();
        javax.swing.JLabel thesLabel1 = new javax.swing.JLabel();
        thesLabel2 = new javax.swing.JLabel();
        thesListLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        serviceList = new javax.swing.JList<>();
        servicePrefsBtn = new javax.swing.JButton();
        enableSpellingCheck = new javax.swing.JCheckBox();
        javax.swing.JLabel spellingSect = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        userDictBtn = new javax.swing.JButton();
        enableCodeSpellingCheck = new javax.swing.JCheckBox();

        setBackground(java.awt.Color.white);

        languageSect.setFont(languageSect.getFont().deriveFont(languageSect.getFont().getStyle() | java.awt.Font.BOLD, languageSect.getFont().getSize()+3));
        languageSect.setForeground(new java.awt.Color(135, 103, 5));
        languageSect.setText(string("sd-l-language")); // NOI18N

        gameLangLabel.setForeground(new java.awt.Color(0, 4, 0));
        gameLangLabel.setText(string("sd-l-game-lang")); // NOI18N

        gameLangCombo.setMaximumRowCount(16);

        uiLangLabel.setForeground(new java.awt.Color(0, 4, 0));
        uiLangLabel.setText(string("sd-l-ui-lang")); // NOI18N

        uiLangCombo.setMaximumRowCount(16);

        thesaurusSect.setFont(thesaurusSect.getFont().deriveFont(thesaurusSect.getFont().getStyle() | java.awt.Font.BOLD, thesaurusSect.getFont().getSize()+3));
        thesaurusSect.setForeground(new java.awt.Color(135, 103, 5));
        thesaurusSect.setText(string("sd-l-lookup")); // NOI18N

        thesLabel1.setFont(thesLabel1.getFont().deriveFont(thesLabel1.getFont().getSize()-1f));
        thesLabel1.setForeground(new java.awt.Color(0, 4, 0));
        thesLabel1.setText(string("sd-l-lookup-info")); // NOI18N

        thesLabel2.setFont(thesLabel2.getFont().deriveFont(thesLabel2.getFont().getSize()-1f));
        thesLabel2.setText(string( "sd-l-lookup-info2" )); // NOI18N

        thesListLabel.setFont(thesListLabel.getFont().deriveFont(thesListLabel.getFont().getStyle() | java.awt.Font.BOLD));
        thesListLabel.setText(string( "sd-l-lookup-services" )); // NOI18N

        serviceList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        serviceList.setVisibleRowCount(4);
        serviceList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                serviceListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(serviceList);

        servicePrefsBtn.setText(string( "sd-l-config-lookup" )); // NOI18N
        servicePrefsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                servicePrefsBtnActionPerformed(evt);
            }
        });

        enableSpellingCheck.setBackground(java.awt.Color.white);
        enableSpellingCheck.setText(string( "sd-b-spelling-enable" )); // NOI18N
        enableSpellingCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enableSpellingCheckActionPerformed(evt);
            }
        });

        spellingSect.setFont(spellingSect.getFont().deriveFont(spellingSect.getFont().getStyle() | java.awt.Font.BOLD, spellingSect.getFont().getSize()+3));
        spellingSect.setForeground(new java.awt.Color(135, 103, 5));
        spellingSect.setText(string("sd-l-spelling")); // NOI18N

        jLabel1.setFont(jLabel1.getFont().deriveFont(jLabel1.getFont().getSize()-1f));
        jLabel1.setText(string( "sd-l-spelling-enable" )); // NOI18N

        userDictBtn.setText(string( "edit-user-dictionary-item" )); // NOI18N
        userDictBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userDictBtnActionPerformed(evt);
            }
        });

        enableCodeSpellingCheck.setText(string("sd-b-spelling-code-enable")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(languageSect)
                    .addComponent(thesaurusSect)
                    .addComponent(spellingSect)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(gameLangLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(uiLangLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(uiLangCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(gameLangCombo, 0, 336, Short.MAX_VALUE)))
                            .addComponent(thesListLabel)
                            .addComponent(thesLabel1)
                            .addComponent(thesLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(servicePrefsBtn)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(enableSpellingCheck, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(userDictBtn)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(enableCodeSpellingCheck))
                            .addComponent(jLabel1))))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(languageSect)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(gameLangLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gameLangCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(uiLangLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(uiLangCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(spellingSect)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(enableSpellingCheck, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(enableCodeSpellingCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(userDictBtn)
                .addGap(13, 13, 13)
                .addComponent(thesaurusSect)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(thesLabel1)
                .addGap(0, 0, 0)
                .addComponent(thesLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(thesListLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(servicePrefsBtn)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	private void serviceListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_serviceListValueChanged
            LookupServiceProvider sel = (LookupServiceProvider) serviceList.getSelectedValue();
            servicePrefsBtn.setEnabled(sel != null && sel.isConfigurable());
	}//GEN-LAST:event_serviceListValueChanged

	private void servicePrefsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_servicePrefsBtnActionPerformed
            LookupServiceProvider sel = (LookupServiceProvider) serviceList.getSelectedValue();
            if (sel != null && sel.isConfigurable()) {

                Component c = getParent();
                while (c != null && !(c instanceof JWindow)) {
                    c = c.getParent();
                }

                sel.showConfigurationWindow((JWindow) c, servicePrefsBtn);
            }
	}//GEN-LAST:event_servicePrefsBtnActionPerformed

	private void userDictBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userDictBtnActionPerformed
            UserDictionaryDialog d = new UserDictionaryDialog(StrangeEons.getWindow());
            d.setLocationRelativeTo(userDictBtn);
            d.setVisible(true);
	}//GEN-LAST:event_userDictBtnActionPerformed

    private void enableSpellingCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableSpellingCheckActionPerformed
        enableCodeSpellingCheck.setEnabled(enableSpellingCheck.isSelected());
    }//GEN-LAST:event_enableSpellingCheckActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox enableCodeSpellingCheck;
    private javax.swing.JCheckBox enableSpellingCheck;
    private javax.swing.JComboBox<Object> gameLangCombo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<LookupServiceProvider> serviceList;
    private javax.swing.JButton servicePrefsBtn;
    private javax.swing.JLabel thesLabel2;
    private javax.swing.JLabel thesListLabel;
    private javax.swing.JComboBox<Object> uiLangCombo;
    private javax.swing.JButton userDictBtn;
    // End of variables declaration//GEN-END:variables

    private String selectionToLocale(JComboBox box) {
        if (box.getSelectedIndex() < 1) // no or "Automatic" selection
        {
            return null;
        }
        return ((LanguageCodeDescriptor) box.getSelectedItem()).getCode();
    }

    @Override
    public String getTitle() {
        if (title == null) {
            title = string("sd-l-language");
            if (title.endsWith("*")) {
                title = title.substring(0, title.length() - 1);
            }
        }
        return title;
    }
    private String title;

    @Override
    public Icon getIcon() {
        if (icon == null) {
            icon = ResourceKit.getIcon("application/prefs-language.png");
        }
        return icon;
    }
    private Icon icon;

    @Override
    public JPanel getPanel() {
        return this;
    }

    @Override
    public void loadSettings() {
        Settings s = Settings.getUser();

        // Language
        Locale curGameLocale = Language.parseLocaleDescription(s.get("default-game-locale"));
        gameLangCombo.removeAllItems();
        gameLangCombo.addItem(string("sd-c-autolanguage"));
        gameLangCombo.setSelectedIndex(0);
        for (Locale locale : Language.getGameLocales()) {
            gameLangCombo.addItem(new LanguageCodeDescriptor(locale));
            if (locale.equals(curGameLocale)) {
                gameLangCombo.setSelectedIndex(gameLangCombo.getItemCount() - 1);
            }
        }

        // Locale
        Locale curUILocale = Language.parseLocaleDescription(s.get("default-ui-locale"));
        uiLangCombo.removeAllItems();
        uiLangCombo.addItem(string("sd-c-autolanguage"));
        uiLangCombo.setSelectedIndex(0);
        for (Locale locale : Language.getInterfaceLocales()) {
            uiLangCombo.addItem(new LanguageCodeDescriptor(locale));
            if (locale.equals(curUILocale)) {
                uiLangCombo.setSelectedIndex(uiLangCombo.getItemCount() - 1);
            }
        }

        // Spelling
        spellEnable = s.getBoolean("spelling-enabled");
        spellCodeEnable = s.getBoolean("spelling-code-enabled");
        enableSpellingCheck.setSelected(spellEnable);
        enableCodeSpellingCheck.setSelected(spellCodeEnable);

        // Look-up Services
        LookupServices.addServiceRegistrationListener(new LookupServices.ServiceRegistrationListener() {
            @Override
            public void lookupServiceRegistered(LookupServiceProvider lsp) {
                updateServiceList();
            }

            @Override
            public void lookupServiceUnregistered(LookupServiceProvider lsp) {
                updateServiceList();
            }
        });
        updateServiceList();

        restart = false;
    }

    private void updateServiceList() {
        DefaultListModel<LookupServiceProvider> m = new DefaultListModel<>();
        for (LookupServiceProvider lsp : LookupServices.getLookupServices()) {
            m.addElement(lsp);
        }
        serviceList.setModel(m);
        if (m.size() > 0) {
            serviceList.setEnabled(true);
            serviceList.setSelectedIndex(0);
            serviceListValueChanged(null);
        } else {
            m.addElement(noOpLsp());
            serviceList.setEnabled(false);
            servicePrefsBtn.setEnabled(false);
        }
    }

    @Override
    public void storeSettings() {
        Settings s = Settings.getUser();
        update("default-game-locale", selectionToLocale(gameLangCombo));
        update("default-ui-locale", selectionToLocale(uiLangCombo));

        boolean newSpellingEnable = enableSpellingCheck.isSelected();
        if (newSpellingEnable != spellEnable) {
            s.setBoolean("spelling-enabled", newSpellingEnable);
            if (newSpellingEnable) {
                SpellingChecker.getSharedInstance().installDefaultPolicy();
            } else {
                SpellingChecker.getSharedInstance().setPolicy(new AcceptPolicy());
            }
        }
        boolean newCodeSpellingEnabled = enableCodeSpellingCheck.isSelected();
        if (newCodeSpellingEnabled != spellCodeEnable) {
            s.setBoolean("spelling-code-enabled", newCodeSpellingEnabled);
            SpellingHighlighter.ENABLE_SPELLING_HIGHLIGHT = newCodeSpellingEnabled;
            StrangeEons.getWindow().repaint(1000);
        }
    }

    private void update(String key, String val) {
        Settings s = Settings.getUser();
        if (val == null) {
            if (s.get(key) != null) {
                s.reset(key);
                restart = true;
                StrangeEons.log.log(Level.INFO, "restart key triggered: {0}", key);
            }
        } else if (!val.equals(s.get(key))) {
            s.set(key, val);
            restart = true;
            StrangeEons.log.log(Level.INFO, "restart key triggered: {0}", key);
        }
    }

    private boolean restart;
    private boolean spellEnable;
    private boolean spellCodeEnable;

    @Override
    public boolean isRestartRequired() {
        return restart;
    }

    private static LookupServiceProvider noOpLsp() {
        return new LookupServiceProvider() {
            @Override
            public String toString() {
                return string("sd-l-no-services");
            }

            @Override
            public Locale[] getSupportedLocales() {
                return null;
            }

            @Override
            public boolean isLocaleSupported(Locale locale) {
                return false;
            }

            @Override
            public boolean isWordKnown(WordTokenizer.WordResult wr) {
                return false;
            }

            @Override
            public void lookup(WordTokenizer.WordResult wr, JComponent jc) {
            }

            @Override
            public boolean isConfigurable() {
                return false;
            }

            @Override
            public void showConfigurationWindow(JWindow jw, JComponent jc) {
            }
        };
    }
}
