package ca.cgjennings.platform;

import java.awt.event.ActionEvent;

/**
 * This interface is used by {@link PlatformSupport} to handle OK and Cancel
 * button <code>ActionEvent</code>s for swappable dialogs. An
 * <code>AgnosticDialog</code> can have the content and functionality of its
 * "OK" and "Cancel" buttons switched so that it looks correct on platforms that
 * order them differently. The term "dialog" is meant in a general sense. No
 * particular implementing class is assumed.
 * <p>
 * This interface allows the designer to write the appropriate code for handling
 * "OK" (commit) and "Cancel" actions independently of the physical button they
 * are attached to. {@link PlatformSupport#makeAgnosticDialog} will add
 * listeners so that presses on these buttons are routed to the appropriate
 * method below regardless of button order.
 * <p>
 * For a greater degree of control, you can leave the implementation of these
 * methods empty and use the return result of <code>makeAgnosticDialog</code> to
 * perform whatever customization is required. In this case, implementing the
 * interface simply serves as a marker that a given class has been modified to
 * be agnostic. For control over how the contents of the two buttons are
 * swapped, implement <code>QueriedAgnosticDialog</code> instead.
 * <p>
 * Almost all existing dialogs can be converted to be agnostic with a minimum of
 * effort. The following steps are usually all that is required:
 * <ol>
 * <li> Add an <code>implements AgnosticDialog</code> to the root container
 * class for the dialog (usually a <code>JDialog</code> subclass).
 * <li> Add empty implementations for <code>handleOKAction</code> and
 * <code>handleCancelAction</code>.
 * <li> Move the existing <code>ActionEvent</code> listener code for the OK and
 * Cancel buttons to the above methods.
 * <li> Delete the original listeners and listener registration code (if using a
 * GUI designer, delete the event bindings in the designer).
 * <li> Add a call to
 * <code>PlatformSupport.makeAgnosticDialog( this, okBtn, cancelBtn )</code> (or
 * one of its variants) after the components are initialized but before they are
 * shown. This will usually be in the constructor.
 * </ol>
 * <p>
 * A typical use would look like this:<br>
 * <pre>
 * public class MyDialog extends JDialog implements AgnosticDialog {
 *     public MyDialog( ... ) {
 *         super( ... );
 *         initComponents();
 *         // if buttons are in OK, Cancel order
 *         PlatformSupport.makeAgnosticDialog( this, okBtn, cancelBtn );
 *         // if buttons are in Cancel, OK order
 *         // PlatformSupport.makeAgnosticDialog( this, false, okBtn, cancelBtn );
 *         ...
 *     }
 *     private void initComponents() {
 *         ...
 *         okBtn = new JButton( "Do Something" );
 *         cancelBtn = new JButton( "Cancel" );
 *         ...
 *     }
 *     public void handleOKAction( ActionEvent e ) {
 *         // do something
 *         dispose();
 *     }
 *     public void handleCancelAction( ActionEvent e ) {
 *         dispose();
 *     }
 * }
 * </pre>
 *
 * @author Chris Jennings <https://cgjennings.ca/contact>
 */
public interface AgnosticDialog {

    /**
     * Performs whatever action is required when the OK button is pressed.
     * Called when the (possibly swapped) OK button generates an ActionEvent.
     *
     * @param e the <code>ActionEvent</code> generated by the button
     */
    public abstract void handleOKAction(ActionEvent e);

    /**
     * Performs whatever action is required when the Cancel button is pressed.
     * Called when the (possibly swapped) OK button generates an ActionEvent.
     *
     * @param e the <code>ActionEvent</code> generated by the button
     */
    public abstract void handleCancelAction(ActionEvent e);
}
