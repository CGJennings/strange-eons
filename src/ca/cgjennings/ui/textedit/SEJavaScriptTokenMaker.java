/* The following code was generated by JFlex 1.4.1 on 05/03/22 2:03 PM */

/*
 * SEJavaScriptTokenMaker.java - Parses a document into JavaScript tokens.
 *
 * This version is heavily modified for Strange Rhino: removes E4X support,
 * adds several keywords, adds standard types, adds some
 * special SE-specific global objects and functions, and recognizes special
 * string lookup identifiers.
 * 
 * Adapted from the RSyntaxTextArea JavaScript tokenizer. See about
 * dialog tempate for license information.
 */
package ca.cgjennings.ui.textedit;

import java.io.*;
import javax.swing.text.Segment;
import java.util.Stack;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * Scanner for SE JavaScript files. Unlike standard JavaScript, this
 * will recognize special string lookup identifiers starting with
 * {@code @} and {@code #}.
 *
 * <p>
 * <strong>
 * This file is generated automatically.
 * See {@code build-tools/README.md} for details.
 * </strong>
 */

public class SEJavaScriptTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int JS_TEMPLATE_LITERAL = 6;
  public static final int JS_STRING = 1;
  public static final int JS_TEMPLATE_LITERAL_EXPR = 7;
  public static final int JS_CHAR = 2;
  public static final int JS_EOL_COMMENT = 5;
  public static final int JS_DOCCOMMENT = 4;
  public static final int YYINITIAL = 0;
  public static final int JS_MLC = 3;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\2\1\0\1\1\1\11\22\0\1\1\1\36\1\124"+
    "\1\12\1\15\1\36\1\41\1\74\2\73\1\21\1\26\1\31\1\17"+
    "\1\27\1\20\1\5\1\115\1\120\1\117\1\121\1\7\1\116\1\7"+
    "\1\114\1\4\1\42\1\31\1\32\1\33\1\35\1\37\1\16\1\100"+
    "\1\6\1\76\1\102\1\25\1\24\2\3\1\101\1\103\1\3\1\23"+
    "\1\107\1\106\1\105\1\77\1\3\1\111\1\104\1\75\1\112\1\122"+
    "\1\113\1\22\2\3\1\73\1\13\1\73\1\34\1\14\1\125\1\44"+
    "\1\45\1\51\1\63\1\52\1\66\1\55\1\57\1\54\1\110\1\62"+
    "\1\53\1\43\1\56\1\60\1\64\1\71\1\50\1\46\1\47\1\10"+
    "\1\67\1\61\1\70\1\65\1\123\1\72\1\40\1\30\1\37\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\2\1\3\1\4\2\5\2\4\1\1"+
    "\1\6\3\7\2\4\1\7\1\4\1\10\1\4\6\7"+
    "\22\4\1\11\16\4\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\14\1\20\1\21\1\22\1\14\1\23\5\14"+
    "\1\24\10\14\1\25\4\14\2\26\1\27\1\30\1\14"+
    "\1\31\1\14\1\32\1\1\1\33\1\5\1\34\1\33"+
    "\1\34\1\33\1\35\1\33\4\4\1\1\1\6\2\0"+
    "\1\36\1\37\1\7\6\4\1\7\2\0\1\40\1\7"+
    "\34\4\2\41\10\4\1\41\36\4\1\42\1\43\1\44"+
    "\1\45\25\0\1\46\2\0\1\47\11\0\1\50\1\51"+
    "\1\1\1\34\1\0\2\35\4\4\1\1\1\0\1\52"+
    "\1\53\45\4\1\1\40\4\1\54\13\4\64\0\1\1"+
    "\4\4\1\1\1\0\1\55\3\4\1\56\5\4\1\1"+
    "\3\4\1\57\10\4\1\60\50\4\1\0\1\14\1\0"+
    "\1\61\15\0\1\62\45\0\1\63\4\0\1\64\1\0"+
    "\1\1\3\4\1\1\1\0\11\4\1\41\21\4\1\1"+
    "\5\4\1\54\13\4\15\0\1\62\20\0\1\62\15\0"+
    "\1\1\3\4\1\1\1\0\13\4\1\1\3\4\1\56"+
    "\20\4\32\0\2\4\1\0\24\4\1\62\4\0\1\62"+
    "\11\0\16\4\5\0\2\4\1\60\4\4\2\0\5\4"+
    "\1\0\10\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[764];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\126\0\254\0\u0102\0\u0158\0\u01ae\0\u0204\0\u025a"+
    "\0\u02b0\0\u0306\0\u035c\0\u03b2\0\u0408\0\u045e\0\u04b4\0\u050a"+
    "\0\u035c\0\u0560\0\u05b6\0\u060c\0\u0662\0\u06b8\0\u070e\0\u0764"+
    "\0\u07ba\0\u035c\0\u035c\0\u0810\0\u0866\0\u08bc\0\u035c\0\u0912"+
    "\0\u0968\0\u09be\0\u0a14\0\u0a6a\0\u0ac0\0\u0b16\0\u0b6c\0\u0bc2"+
    "\0\u0c18\0\u0c6e\0\u0cc4\0\u0d1a\0\u0d70\0\u0dc6\0\u0e1c\0\u0e72"+
    "\0\u0ec8\0\u0f1e\0\u0f74\0\u035c\0\u0fca\0\u1020\0\u1076\0\u10cc"+
    "\0\u1122\0\u1178\0\u11ce\0\u1224\0\u127a\0\u12d0\0\u1326\0\u137c"+
    "\0\u13d2\0\u1428\0\u035c\0\u035c\0\u147e\0\u035c\0\u14d4\0\u035c"+
    "\0\u152a\0\u035c\0\u14d4\0\u035c\0\u1580\0\u035c\0\u15d6\0\u162c"+
    "\0\u1682\0\u16d8\0\u172e\0\u035c\0\u1784\0\u17da\0\u1830\0\u1886"+
    "\0\u18dc\0\u1932\0\u1988\0\u19de\0\u035c\0\u1a34\0\u1a8a\0\u1ae0"+
    "\0\u1b36\0\u035c\0\u14d4\0\u1b8c\0\u035c\0\u1be2\0\u035c\0\u1c38"+
    "\0\u035c\0\u1c8e\0\u1ce4\0\u1ce4\0\u1ce4\0\u1d3a\0\u1d90\0\u1de6"+
    "\0\u1e3c\0\u1e92\0\u1ee8\0\u1f3e\0\u1f94\0\u1fea\0\u2040\0\u2096"+
    "\0\u20ec\0\u2142\0\u035c\0\u2198\0\u20ec\0\u21ee\0\u2244\0\u229a"+
    "\0\u22f0\0\u2346\0\u239c\0\u23f2\0\u0662\0\u23f2\0\u035c\0\u2448"+
    "\0\u249e\0\u24f4\0\u254a\0\u25a0\0\u25f6\0\u264c\0\u26a2\0\u26f8"+
    "\0\u274e\0\u27a4\0\u27fa\0\u2850\0\u28a6\0\u28fc\0\u2952\0\u29a8"+
    "\0\u29fe\0\u2a54\0\u2aaa\0\u2b00\0\u2b56\0\u2bac\0\u2c02\0\u2c58"+
    "\0\u2cae\0\u2d04\0\u2d5a\0\u2db0\0\u2e06\0\u03b2\0\u2e5c\0\u2eb2"+
    "\0\u2f08\0\u2f5e\0\u2fb4\0\u300a\0\u3060\0\u30b6\0\u310c\0\u3162"+
    "\0\u31b8\0\u320e\0\u3264\0\u32ba\0\u3310\0\u3366\0\u33bc\0\u3412"+
    "\0\u3468\0\u34be\0\u3514\0\u356a\0\u35c0\0\u3616\0\u366c\0\u36c2"+
    "\0\u3718\0\u376e\0\u37c4\0\u381a\0\u3870\0\u38c6\0\u391c\0\u3972"+
    "\0\u39c8\0\u3a1e\0\u3a74\0\u3aca\0\u3b20\0\u035c\0\u3b76\0\u3bcc"+
    "\0\u035c\0\u3c22\0\u3c78\0\u3cce\0\u3d24\0\u3d7a\0\u3dd0\0\u3e26"+
    "\0\u3e7c\0\u3ed2\0\u3f28\0\u3f7e\0\u3fd4\0\u402a\0\u4080\0\u40d6"+
    "\0\u412c\0\u4182\0\u41d8\0\u422e\0\u4284\0\u42da\0\u035c\0\u4330"+
    "\0\u4386\0\u035c\0\u43dc\0\u4432\0\u4488\0\u44de\0\u4534\0\u458a"+
    "\0\u45e0\0\u4636\0\u468c\0\u035c\0\u035c\0\u46e2\0\u4738\0\u478e"+
    "\0\u1ce4\0\u47e4\0\u483a\0\u4890\0\u48e6\0\u493c\0\u4992\0\u49e8"+
    "\0\u4a3e\0\u4a94\0\u4aea\0\u4b40\0\u4b96\0\u4bec\0\u4c42\0\u4c98"+
    "\0\u4cee\0\u4d44\0\u4d9a\0\u4df0\0\u4e46\0\u4e9c\0\u4ef2\0\u4f48"+
    "\0\u4f9e\0\u4ff4\0\u504a\0\u50a0\0\u50f6\0\u514c\0\u51a2\0\u51f8"+
    "\0\u524e\0\u52a4\0\u52fa\0\u5350\0\u53a6\0\u53fc\0\u5452\0\u54a8"+
    "\0\u54fe\0\u5554\0\u55aa\0\u5600\0\u5656\0\u56ac\0\u5702\0\u5758"+
    "\0\u57ae\0\u5804\0\u585a\0\u58b0\0\u5906\0\u595c\0\u59b2\0\u5a08"+
    "\0\u5a5e\0\u5ab4\0\u5b0a\0\u5b60\0\u5bb6\0\u5c0c\0\u5c62\0\u5cb8"+
    "\0\u5d0e\0\u5d64\0\u5dba\0\u5e10\0\u5e66\0\u5ebc\0\u5f12\0\u5f68"+
    "\0\u5fbe\0\u6014\0\u606a\0\u60c0\0\u6116\0\u616c\0\u61c2\0\u6218"+
    "\0\u03b2\0\u626e\0\u62c4\0\u631a\0\u6370\0\u63c6\0\u641c\0\u6472"+
    "\0\u64c8\0\u651e\0\u6574\0\u65ca\0\u6620\0\u6676\0\u66cc\0\u6722"+
    "\0\u6778\0\u67ce\0\u6824\0\u687a\0\u68d0\0\u6926\0\u697c\0\u69d2"+
    "\0\u6a28\0\u6a7e\0\u6ad4\0\u6b2a\0\u6b80\0\u6bd6\0\u6c2c\0\u6c82"+
    "\0\u6cd8\0\u6d2e\0\u6d84\0\u6dda\0\u6e30\0\u6e86\0\u6edc\0\u6f32"+
    "\0\u6f88\0\u6fde\0\u7034\0\u708a\0\u70e0\0\u7136\0\u718c\0\u71e2"+
    "\0\u7238\0\u728e\0\u72e4\0\u733a\0\u7390\0\u73e6\0\u743c\0\u7492"+
    "\0\u74e8\0\u753e\0\u7594\0\u75ea\0\u7640\0\u7696\0\u76ec\0\u7742"+
    "\0\u7798\0\u77ee\0\u7844\0\u789a\0\u78f0\0\u7946\0\u799c\0\u035c"+
    "\0\u79f2\0\u7a48\0\u7a9e\0\u03b2\0\u7af4\0\u7b4a\0\u7ba0\0\u7bf6"+
    "\0\u7c4c\0\u03b2\0\u7ca2\0\u7cf8\0\u7d4e\0\u03b2\0\u7da4\0\u7dfa"+
    "\0\u7e50\0\u7ea6\0\u7efc\0\u7f52\0\u7fa8\0\u7ffe\0\u03b2\0\u8054"+
    "\0\u80aa\0\u8100\0\u8156\0\u81ac\0\u8202\0\u8258\0\u82ae\0\u8304"+
    "\0\u835a\0\u83b0\0\u8406\0\u845c\0\u84b2\0\u8508\0\u855e\0\u85b4"+
    "\0\u860a\0\u8660\0\u86b6\0\u870c\0\u8762\0\u87b8\0\u880e\0\u8864"+
    "\0\u88ba\0\u8910\0\u8966\0\u89bc\0\u8a12\0\u8a68\0\u8abe\0\u8b14"+
    "\0\u8b6a\0\u8bc0\0\u8c16\0\u8c6c\0\u8cc2\0\u8d18\0\u8d6e\0\u3bcc"+
    "\0\u035c\0\u8dc4\0\u8e1a\0\u8e70\0\u8ec6\0\u8f1c\0\u8f72\0\u8fc8"+
    "\0\u901e\0\u9074\0\u90ca\0\u9120\0\u9176\0\u91cc\0\u9222\0\u9278"+
    "\0\u035c\0\u92ce\0\u9324\0\u937a\0\u93d0\0\u9426\0\u947c\0\u94d2"+
    "\0\u9528\0\u957e\0\u95d4\0\u962a\0\u9680\0\u96d6\0\u972c\0\u9782"+
    "\0\u97d8\0\u982e\0\u9884\0\u98da\0\u9930\0\u9986\0\u99dc\0\u9a32"+
    "\0\u9a88\0\u9ade\0\u9b34\0\u9b8a\0\u9be0\0\u9c36\0\u9c8c\0\u9ce2"+
    "\0\u9d38\0\u9d8e\0\u9de4\0\u9e3a\0\u9e90\0\u9ee6\0\u9f3c\0\u9f92"+
    "\0\u9fe8\0\ua03e\0\ua094\0\ua0ea\0\ua140\0\ua196\0\ua1ec\0\ua242"+
    "\0\ua298\0\ua2ee\0\ua344\0\ua39a\0\ua3f0\0\ua446\0\ua49c\0\ua4f2"+
    "\0\ua548\0\ua59e\0\ua5f4\0\ua64a\0\u7f52\0\ua6a0\0\ua6f6\0\ua74c"+
    "\0\ua7a2\0\ua7f8\0\ua84e\0\ua8a4\0\ua8fa\0\ua950\0\ua9a6\0\ua9fc"+
    "\0\uaa52\0\uaaa8\0\uaafe\0\uab54\0\uabaa\0\uac00\0\uac56\0\uacac"+
    "\0\uad02\0\uad58\0\uadae\0\uae04\0\uae5a\0\uaeb0\0\uaf06\0\uaf5c"+
    "\0\uafb2\0\ub008\0\ub05e\0\ub0b4\0\ub10a\0\ub160\0\ub1b6\0\ub20c"+
    "\0\u8e1a\0\ub262\0\ub2b8\0\ub30e\0\ub364\0\ub3ba\0\ub410\0\ub466"+
    "\0\ub4bc\0\ub512\0\ub568\0\ub5be\0\ub614\0\ub66a\0\ub6c0\0\ub716"+
    "\0\ub76c\0\ub7c2\0\ub818\0\ub86e\0\ub8c4\0\ub91a\0\ub970\0\ub9c6"+
    "\0\uba1c\0\uba72\0\ubac8\0\ubb1e\0\ubb74\0\ubbca\0\ubc20\0\ubc76"+
    "\0\ubccc\0\ubd22\0\ubd78\0\ubdce\0\ube24\0\ube7a\0\u9f3c\0\ubed0"+
    "\0\ubf26\0\ubf7c\0\ua0ea\0\ubfd2\0\uc028\0\uc07e\0\uc0d4\0\uc12a"+
    "\0\uc180\0\uc1d6\0\uc22c\0\uc282\0\uc2d8\0\uc32e\0\uc384\0\uc3da"+
    "\0\uc430\0\uc486\0\uc4dc\0\uc532\0\uc588\0\uc5de\0\uc634\0\uc68a"+
    "\0\uc6e0\0\uc736\0\uc78c\0\uc7e2\0\uc838\0\uc88e\0\uc8e4\0\uc93a"+
    "\0\uc990\0\uc9e6\0\uca3c\0\uca92\0\ucae8\0\ucb3e\0\ucb94\0\ucbea"+
    "\0\ucc40\0\ucc96\0\uccec\0\ucd42\0\ucd98\0\ucdee\0\uce44\0\uce9a"+
    "\0\ucef0\0\ucf46\0\ucf9c\0\ucff2\0\ud048\0\ud09e\0\ud0f4\0\ud14a"+
    "\0\ud1a0\0\ud1f6\0\ud24c\0\ud2a2\0\ud2f8\0\ud34e\0\ud3a4\0\ud3fa"+
    "\0\ud450\0\ud4a6\0\ud4fc\0\ud552\0\ud5a8\0\ud5fe\0\ud654\0\ud6aa"+
    "\0\ud700\0\ud756\0\ud7ac\0\ud802\0\ud858\0\ud8ae\0\ud904\0\ud95a"+
    "\0\ud9b0\0\uda06\0\uda5c\0\udab2\0\udb08\0\udb5e\0\udbb4\0\udc0a"+
    "\0\udc60\0\udcb6\0\udd0c\0\udd62\0\uddb8\0\ude0e\0\ude64\0\udeba"+
    "\0\u937a\0\udf10\0\udf66\0\udfbc\0\ue012\0\ue068\0\ue0be\0\ue114"+
    "\0\ue16a\0\ue1c0\0\ue216\0\ue26c\0\ue2c2\0\ue318\0\ue36e\0\ue3c4"+
    "\0\ue41a\0\ue470\0\ue4c6\0\ue51c\0\ue572\0\ue5c8\0\ue61e\0\ue674"+
    "\0\ue6ca\0\ue720\0\ue776\0\ue7cc\0\ue822\0\ue878\0\ue8ce\0\ue924"+
    "\0\ue97a\0\ue9d0\0\uea26\0\uea7c\0\uead2\0\ueb28\0\ueb7e\0\uebd4"+
    "\0\uec2a\0\uec80\0\uecd6\0\ued2c\0\ued82\0\uedd8\0\uee2e\0\uee84"+
    "\0\ueeda\0\uef30\0\uef86\0\uefdc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[764];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\15"+
    "\1\20\1\21\1\22\1\11\1\14\2\22\1\23\1\24"+
    "\1\25\2\14\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\25\1\36\1\25\1\37\1\40\1\41"+
    "\1\37\1\14\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\14\1\55\1\56"+
    "\1\14\1\57\1\60\1\61\1\62\1\63\2\14\2\32"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\77\1\14\1\100\1\101\1\102"+
    "\6\15\2\14\1\103\1\104\2\105\1\106\10\105\1\107"+
    "\110\105\1\110\1\105\2\111\1\112\10\111\1\113\60\111"+
    "\1\114\31\111\2\115\1\116\16\115\1\117\35\115\1\120"+
    "\1\115\1\121\4\115\1\122\37\115\2\123\1\124\13\123"+
    "\1\125\2\123\1\126\10\123\1\127\24\123\1\130\1\123"+
    "\1\131\4\123\1\132\3\123\1\133\33\123\2\134\1\135"+
    "\54\134\1\136\1\134\1\137\4\134\1\140\37\134\2\141"+
    "\1\142\10\141\1\143\1\141\1\144\107\141\1\145\2\146"+
    "\1\147\12\146\1\150\12\146\1\151\75\146\1\11\2\0"+
    "\6\11\1\0\5\11\3\0\4\11\15\0\27\11\3\0"+
    "\27\11\3\0\1\12\252\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\27\14"+
    "\3\0\27\14\2\0\1\153\2\0\1\153\2\15\1\153"+
    "\1\15\1\153\1\0\5\153\3\0\1\153\1\154\1\155"+
    "\1\156\1\0\1\157\13\0\7\153\1\156\1\154\7\153"+
    "\1\155\2\153\1\155\3\153\3\0\5\153\1\155\11\153"+
    "\6\15\2\153\2\0\1\153\2\0\1\153\1\160\1\161"+
    "\1\153\1\161\1\153\1\0\5\153\3\0\1\162\1\154"+
    "\1\155\1\156\1\0\1\157\13\0\7\153\1\156\1\154"+
    "\7\153\1\155\2\153\1\155\1\153\1\162\1\153\3\0"+
    "\5\153\1\155\11\153\1\160\5\161\2\153\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\11\14\1\163\3\14\1\164\11\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\3\14\1\165\7\14"+
    "\1\166\13\14\3\0\27\14\2\0\1\11\2\0\6\22"+
    "\1\0\1\22\1\167\3\22\1\170\2\0\4\22\15\0"+
    "\27\22\3\0\27\22\21\0\1\37\13\0\1\37\72\0"+
    "\13\171\1\172\4\171\1\173\1\174\11\171\1\175\72\171"+
    "\33\0\1\37\72\0\1\11\2\0\5\14\1\176\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\10\14"+
    "\1\177\16\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\5\14\1\200\7\14\1\201\2\14\1\202\3\14\1\203"+
    "\2\14\3\0\27\14\30\0\1\37\4\0\1\204\76\0"+
    "\2\157\1\0\1\157\104\0\6\157\36\0\1\205\1\37"+
    "\73\0\1\206\30\0\1\207\1\37\125\0\1\37\1\0"+
    "\1\210\123\0\1\37\4\0\1\37\120\0\1\37\5\0"+
    "\1\37\64\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\2\14\1\211\2\14"+
    "\1\212\21\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\5\14\1\213\7\14\1\214\4\14\1\215\4\14\3\0"+
    "\27\14\2\0\1\11\2\0\5\14\1\216\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\4\14\1\217"+
    "\2\14\1\220\4\14\1\221\1\14\1\222\3\14\1\223"+
    "\4\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\5\14"+
    "\1\224\6\14\1\225\5\14\1\226\4\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\7\14\1\227\17\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\1\14\1\230\6\14"+
    "\1\231\3\14\1\232\1\233\11\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\1\14\1\234\6\14\1\235\2\14"+
    "\1\236\10\14\1\237\1\240\1\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\7\14\1\241\5\14\1\242\11\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\1\243\2\14"+
    "\1\244\7\14\1\245\7\14\1\246\3\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\7\14\1\241\1\247\4\14"+
    "\1\250\11\14\3\0\27\14\2\0\1\11\2\0\5\14"+
    "\1\251\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\1\14\1\252\5\14\1\253\17\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\23\14\1\246\3\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\11\14\1\254\2\14"+
    "\1\255\12\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\7\14\1\256\5\14\1\257\11\14\3\0\27\14\2\0"+
    "\1\11\2\0\5\14\1\260\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\1\14\1\261\3\14\1\262"+
    "\21\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\11\14"+
    "\1\263\15\14\3\0\27\14\2\0\1\11\2\0\5\14"+
    "\1\264\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\1\14\1\265\6\14\1\266\1\267\3\14\1\270"+
    "\11\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\1\14"+
    "\1\270\13\14\1\271\11\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\22\14\1\272\4\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\15\14\1\273\11\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\5\14\1\274\2\14\1\275"+
    "\16\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\5\14"+
    "\1\276\21\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\13\14\1\277\13\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\1\14\1\300\25\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\27\14\3\0\7\14\1\301\17\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\4\14\1\302\2\14\1\303\12\14"+
    "\1\304\4\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\2\14\1\305\24\14\3\0\27\14\2\0\1\11\2\0"+
    "\5\14\1\306\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\1\14\1\307\25\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\1\14\1\310\25\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\1\14\1\311\5\14\1\312"+
    "\17\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\11\14"+
    "\1\313\15\14\3\0\14\14\1\314\12\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\7\14\1\315\17\14\3\0\27\14\2\0"+
    "\2\105\1\0\10\105\1\0\110\105\1\0\1\105\2\316"+
    "\1\0\5\316\1\317\57\316\1\320\35\316\2\111\1\0"+
    "\10\111\1\0\60\111\1\0\31\111\2\115\1\0\16\115"+
    "\1\0\35\115\1\0\1\115\1\0\4\115\1\0\37\115"+
    "\20\0\1\321\154\0\1\322\137\0\1\323\113\0\1\324"+
    "\4\0\1\325\51\0\2\123\1\0\13\123\1\0\2\123"+
    "\1\0\10\123\1\0\24\123\1\0\1\123\1\0\4\123"+
    "\1\0\3\123\1\0\33\123\43\0\1\326\1\327\1\330"+
    "\1\331\1\332\1\333\1\334\1\335\1\336\1\337\1\340"+
    "\1\341\3\0\1\342\1\343\1\344\1\0\1\345\1\346"+
    "\56\0\1\347\110\0\1\350\2\0\1\350\1\0\1\350"+
    "\7\0\1\351\1\0\4\350\7\0\1\352\5\0\27\350"+
    "\3\0\17\350\6\0\2\350\51\0\1\353\137\0\1\354"+
    "\113\0\1\355\4\0\1\356\67\0\1\357\107\0\2\134"+
    "\1\0\54\134\1\0\1\134\1\0\4\134\1\0\37\134"+
    "\47\0\1\360\137\0\1\361\113\0\1\362\4\0\1\363"+
    "\51\0\2\141\1\0\10\141\1\0\1\141\1\0\107\141"+
    "\73\0\1\364\33\0\2\146\1\0\12\146\1\0\12\146"+
    "\1\0\75\146\72\0\1\365\33\0\1\11\2\0\5\11"+
    "\1\366\1\0\5\11\3\0\4\11\15\0\27\11\3\0"+
    "\27\11\2\0\1\153\2\0\6\153\1\0\5\153\3\0"+
    "\4\153\15\0\27\153\3\0\27\153\2\0\1\153\2\0"+
    "\1\153\2\367\1\153\1\367\1\153\1\0\5\153\1\370"+
    "\2\0\4\153\1\370\14\0\27\153\3\0\17\153\6\367"+
    "\2\153\2\0\1\153\2\0\1\153\2\157\1\153\1\157"+
    "\1\153\1\0\5\153\3\0\2\153\1\155\1\156\15\0"+
    "\7\153\1\156\10\153\1\155\2\153\1\155\3\153\3\0"+
    "\5\153\1\155\11\153\6\157\2\153\2\0\1\153\2\0"+
    "\1\153\2\160\1\153\1\160\1\153\1\0\5\153\3\0"+
    "\2\153\1\155\1\156\1\0\1\157\13\0\7\153\1\156"+
    "\10\153\1\155\2\153\1\155\3\153\3\0\5\153\1\155"+
    "\11\153\6\160\2\153\2\0\1\153\2\0\1\153\1\160"+
    "\1\161\1\153\1\161\1\153\1\0\5\153\3\0\1\153"+
    "\1\371\1\155\1\156\1\0\1\157\13\0\7\153\1\156"+
    "\1\371\7\153\1\155\2\153\1\155\3\153\3\0\5\153"+
    "\1\155\11\153\1\160\5\161\2\153\2\0\1\153\2\0"+
    "\1\153\4\372\1\153\1\0\5\153\3\0\2\153\2\372"+
    "\15\0\1\153\2\372\3\153\2\372\10\153\1\372\2\153"+
    "\1\372\3\153\3\0\1\153\1\372\1\153\1\372\1\153"+
    "\1\372\11\153\6\372\2\153\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\12\14\1\373\14\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\15\14\1\374\11\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\7\14\1\375\17\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\20\14\1\376\6\14\3\0\27\14"+
    "\2\0\1\11\2\0\5\11\1\377\1\0\5\11\3\0"+
    "\4\11\15\0\27\11\3\0\27\11\5\0\6\170\1\0"+
    "\1\170\1\u0100\4\170\2\0\4\170\15\0\27\170\3\0"+
    "\27\170\2\0\13\171\1\172\4\171\1\u0101\107\171\1\0"+
    "\123\171\21\0\1\u0102\104\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\13\14"+
    "\1\u0103\13\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\15\14\1\u0104\11\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\5\14\1\u0105\21\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\13\14\1\u0106\13\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\11\14\1\u0107\15\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\1\14\1\u0108\25\14\3\0"+
    "\27\14\3\0\1\206\30\0\1\207\126\0\1\37\1\0"+
    "\1\25\70\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\3\14\1\u0109\23\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\12\14\1\u010a"+
    "\14\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\7\14"+
    "\1\u010b\17\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\15\14\1\u010c\11\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\4\14\1\u010d\22\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\21\14\1\u010e\5\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\1\14\1\u010f\25\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\4\14\1\246\3\14\1\u0110"+
    "\16\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\15\14"+
    "\1\u0111\11\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\11\14\1\u0112\15\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\13\14\1\u0113\13\14\3\0\27\14\2\0\1\11"+
    "\2\0\5\14\1\u0114\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\1\14\1\u0115\20\14\1\246\4\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\5\14\1\u0116"+
    "\3\14\1\u0106\15\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\21\14\1\u0117\5\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\4\14\1\u0118\21\14\1\u0119\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\3\14\1\u011a\1\234\22\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\1\14\1\u011b"+
    "\25\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\1\14"+
    "\1\u011c\25\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\13\14\1\u011d\13\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\6\14\1\u011e\20\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\3\14\1\u011a\23\14\3\0\27\14\2\0"+
    "\1\11\2\0\5\14\1\u011f\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\6\14\1\u0120\20\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\1\14\1\u0121\25\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\4\14\1\u0122"+
    "\14\14\1\221\5\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\4\14\1\246\22\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\13\14\1\u0123\13\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\21\14\1\u0124\5\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\2\14\1\u0125\1\14\15\0\27\14\3\0"+
    "\11\14\1\u0126\15\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\3\14"+
    "\1\u0127\1\u0128\22\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\15\14\1\u0129\11\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\4\14\1\u012a\22\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\10\14\1\u012b\16\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\4\14\1\u012c\22\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\16\14\1\246\10\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\4\14\1\u011e"+
    "\22\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\11\14"+
    "\1\u012d\15\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\2\14\1\u012e\3\14\1\u0120\1\14\1\u012f\12\14\1\u0130"+
    "\3\14\3\0\27\14\2\0\1\11\2\0\5\14\1\u0131"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\27\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\2\14"+
    "\1\u0132\24\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\5\14\1\u0133\1\u0134\20\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\11\14\1\u0135\3\14\1\u0136\11\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\7\14\1\u0137\17\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\13\14\1\u0138"+
    "\13\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\10\14"+
    "\1\u0139\16\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\15\14\1\u013a\11\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\13\14\1\u013b\13\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\5\14\1\246\21\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\10\14\1\u013c\1\u013d\15\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\21\14\1\u013e\5\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\1\u013f\12\14"+
    "\1\u0140\13\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\15\14\1\u0141\11\14\3\0\27\14\2\0\1\11\2\0"+
    "\5\14\1\u0142\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\27\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\5\14\1\u0143\21\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\4\14\1\u0144\16\14\1\u0145\3\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\4\14\1\u0146\22\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\27\14\3\0"+
    "\10\14\1\u0147\16\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\5\14"+
    "\1\u0148\21\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\4\14\1\u0149\22\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\1\u014a\12\14\1\u014b\13\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\27\14\3\0\13\14\1\u014c\13\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\1\u014d\26\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\27\14\3\0\11\14\1\246"+
    "\15\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\4\14\1\u014e\14\14"+
    "\1\u0149\5\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\13\14\1\u014f\13\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\12\14\1\u0150\10\14\1\u0151\3\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\13\14\1\u0152\13\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\27\14\3\0\4\14"+
    "\1\u0153\22\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\1\14\1\u0154"+
    "\25\14\3\0\27\14\6\0\4\u0155\14\0\2\u0155\16\0"+
    "\2\u0155\3\0\2\u0155\10\0\1\u0155\2\0\1\u0155\7\0"+
    "\1\u0155\1\0\1\u0155\1\0\1\u0155\11\0\6\u0155\10\0"+
    "\4\u0156\14\0\2\u0156\16\0\2\u0156\3\0\2\u0156\10\0"+
    "\1\u0156\2\0\1\u0156\7\0\1\u0156\1\0\1\u0156\1\0"+
    "\1\u0156\11\0\6\u0156\53\0\1\u0157\137\0\1\u0158\130\0"+
    "\1\u0159\114\0\1\u015a\124\0\1\u015b\1\0\1\u015c\3\0"+
    "\1\u015d\55\0\1\u015e\34\0\1\u015f\3\0\1\u0160\1\0"+
    "\1\u0161\132\0\1\u0162\55\0\1\u0163\36\0\1\u0164\2\0"+
    "\1\u0165\1\0\1\u0166\130\0\1\u0167\1\u0168\4\0\1\u0169"+
    "\112\0\1\u016a\117\0\1\u016b\6\0\1\u016c\4\0\1\u016d"+
    "\123\0\1\u016e\10\0\1\u016f\1\u0170\107\0\1\u0171\1\0"+
    "\1\u0172\126\0\1\u0173\1\u0174\122\0\1\u0175\116\0\1\u0176"+
    "\135\0\1\u0177\123\0\1\u0178\63\0\1\u0179\33\0\1\u017a"+
    "\3\0\1\u017b\131\0\1\u017c\115\0\1\u017d\5\0\1\u017e"+
    "\53\0\35\350\1\352\70\350\3\0\1\350\2\0\1\350"+
    "\1\0\1\350\11\0\4\350\7\0\1\352\5\0\27\350"+
    "\3\0\17\350\6\0\2\350\51\0\1\u017f\137\0\1\u0180"+
    "\130\0\1\u0181\114\0\1\u0182\121\0\1\u0183\3\0\1\u0184"+
    "\121\0\1\u0185\137\0\1\u0186\130\0\1\u0187\114\0\1\u0188"+
    "\52\0\1\11\2\0\1\11\4\u0189\1\11\1\0\5\11"+
    "\3\0\2\11\2\u0189\15\0\1\11\2\u0189\3\11\2\u0189"+
    "\10\11\1\u0189\2\11\1\u0189\3\11\3\0\1\11\1\u0189"+
    "\1\11\1\u0189\1\11\1\u0189\11\11\6\u0189\2\11\2\0"+
    "\1\153\2\0\1\153\2\367\1\153\1\367\1\153\1\0"+
    "\5\153\3\0\2\153\1\155\1\153\15\0\20\153\1\155"+
    "\2\153\1\155\3\153\3\0\5\153\1\155\11\153\6\367"+
    "\2\153\6\0\2\367\1\0\1\367\104\0\6\367\4\0"+
    "\1\153\2\0\1\153\4\372\1\153\1\0\5\153\3\0"+
    "\1\153\1\371\2\372\15\0\1\153\2\372\3\153\2\372"+
    "\1\371\7\153\1\372\2\153\1\372\3\153\3\0\1\153"+
    "\1\372\1\153\1\372\1\153\1\372\11\153\6\372\2\153"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\27\14\3\0\4\14\1\u018a"+
    "\22\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\10\14\1\u018b\16\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\1\14\1\u018c\2\14\15\0"+
    "\27\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\7\14"+
    "\1\u018d\17\14\3\0\27\14\2\0\1\11\2\0\1\11"+
    "\4\u018e\1\11\1\0\5\11\3\0\2\11\2\u018e\15\0"+
    "\1\11\2\u018e\3\11\2\u018e\10\11\1\u018e\2\11\1\u018e"+
    "\3\11\3\0\1\11\1\u018e\1\11\1\u018e\1\11\1\u018e"+
    "\11\11\6\u018e\2\11\12\0\1\u018f\160\0\1\u0101\10\0"+
    "\2\u0101\70\0\1\u0190\105\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\6\14"+
    "\1\u0191\20\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\1\14\1\u0192\25\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\15\14\1\u0193\11\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\3\14\1\u0194\23\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\4\14\1\u0195\22\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\10\14\1\u0153\16\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\4\14\1\u0196\22\14"+
    "\3\0\27\14\2\0\1\11\2\0\5\14\1\u0197\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\27\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\1\14\1\u0198"+
    "\25\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\10\14"+
    "\1\u0199\16\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\7\14\1\u019a\17\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\7\14\1\u011c\17\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\4\14\1\u019b\22\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\23\14\1\u0194\3\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\5\14\1\u019c\21\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\4\14\1\234\22\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\6\14\1\u019d"+
    "\20\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\7\14"+
    "\1\u019e\17\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\13\14\1\u019f\13\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\15\14\1\u01a0\11\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\7\14\1\u01a1\17\14\3\0\27\14\2\0"+
    "\1\11\2\0\5\14\1\u01a2\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\27\14\3\0\27\14\2\0"+
    "\1\11\2\0\5\14\1\u01a3\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\27\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\7\14\1\246\17\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\3\14\1\u01a4\23\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\5\14\1\u019a\21\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\3\14\1\241"+
    "\1\u01a5\22\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\14\14\1\246\12\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\1\u019a\26\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\15\14\1\u01a6\11\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\10\14\1\u01a7\16\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\7\14\1\u01a8\17\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\12\14\1\u019a\14\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\10\14\1\u01a9\4\14"+
    "\1\u01aa\11\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\11\14\1\u01ab\15\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\1\14\1\u01ac\25\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\4\14\1\u01ad\22\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\7\14\1\u01ae\17\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\2\14\1\u01af\24\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\15\14\1\u019a\11\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\10\14\1\246"+
    "\16\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\11\14"+
    "\1\u01b0\15\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\10\14\1\u011a\16\14\3\0\27\14\2\0\1\11\2\0"+
    "\5\14\1\u01b1\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\27\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\7\14\1\u01b2\17\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\1\14\1\u01b3\25\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\2\14\1\u01b4\24\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\10\14\1\u019b\16\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\3\14\1\u01b5\23\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\17\14\1\u01b6"+
    "\7\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\24\14"+
    "\1\u01b7\2\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\4\14\1\u01b8\22\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\10\14\1\u013d\16\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\6\14\1\u01b9\20\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\3\14\1\u0114\23\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\1\14\1\u019c\25\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\1\14\1\u01ba\25\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\1\14\1\u01bb"+
    "\25\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\20\14"+
    "\1\246\6\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\7\14\1\u0153\17\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\21\14\1\u01bc\5\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\3\14\1\u01bd\23\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\1\u01be\26\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\12\14\1\u01bf\14\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\1\14\1\u01c0\25\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\27\14\3\0\17\14"+
    "\1\u01c1\1\u01c2\1\14\1\u01c3\4\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\11\14\1\u01c4\15\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\1\14\1\u01c5\5\14\1\u0149\17\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\27\14\3\0\11\14"+
    "\1\u0149\15\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\11\14\1\u01c6"+
    "\15\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\2\14"+
    "\1\u01c7\24\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\4\14\1\u01c8\22\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\7\14\1\u01c9\17\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\2\14\1\u01ca\24\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\14\14\1\u0149\12\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\12\14\1\u013e\14\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\3\14\1\u01cb\15\0\27\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\7\14\1\u01cc\17\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\4\14\1\u01cd"+
    "\22\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\3\14\1\u01ce\15\0"+
    "\27\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\17\14"+
    "\1\u01cf\7\14\3\0\27\14\6\0\4\u01d0\14\0\2\u01d0"+
    "\16\0\2\u01d0\3\0\2\u01d0\10\0\1\u01d0\2\0\1\u01d0"+
    "\7\0\1\u01d0\1\0\1\u01d0\1\0\1\u01d0\11\0\6\u01d0"+
    "\10\0\4\u01d1\14\0\2\u01d1\16\0\2\u01d1\3\0\2\u01d1"+
    "\10\0\1\u01d1\2\0\1\u01d1\7\0\1\u01d1\1\0\1\u01d1"+
    "\1\0\1\u01d1\11\0\6\u01d1\70\0\1\u01d2\70\0\1\u01d3"+
    "\140\0\1\u01d4\135\0\1\u0159\116\0\1\u01d5\3\0\1\u01d6"+
    "\146\0\1\u01d7\120\0\1\u01d8\111\0\1\u01d9\5\0\1\u01da"+
    "\116\0\1\u01db\130\0\1\u01dc\130\0\1\u01dd\121\0\1\u01de"+
    "\120\0\1\u01df\126\0\1\u01e0\133\0\1\u01e1\131\0\1\u01e2"+
    "\117\0\1\u01e3\3\0\1\u01e4\134\0\1\u01e5\126\0\1\u01e6"+
    "\105\0\1\u01e7\2\0\1\u01e8\21\0\1\u01e9\107\0\1\u01ea"+
    "\116\0\1\u01eb\137\0\1\u01ec\5\0\1\u01ed\51\0\1\u01ee"+
    "\167\0\1\u01ef\117\0\1\u01f0\2\0\1\u01f1\14\0\1\u01f2"+
    "\117\0\1\u01f3\120\0\1\u01f4\4\0\1\u01f5\125\0\1\u01f6"+
    "\115\0\1\u01f7\7\0\1\u01f8\127\0\1\u01f9\110\0\1\u01fa"+
    "\140\0\1\u01fb\115\0\1\u01fc\15\0\1\u01fd\1\0\1\u01fe"+
    "\104\0\1\u01ff\130\0\1\u0200\131\0\1\u0201\3\0\1\u0202"+
    "\115\0\1\u0203\2\0\1\u0165\122\0\1\u0204\125\0\1\u0205"+
    "\141\0\1\u0206\70\0\1\u0207\140\0\1\u0208\135\0\1\u0181"+
    "\63\0\1\u0209\171\0\1\u020a\135\0\1\u020b\70\0\1\u020c"+
    "\140\0\1\u020d\135\0\1\u0187\53\0\1\11\2\0\1\11"+
    "\4\u020e\1\11\1\0\5\11\3\0\2\11\2\u020e\15\0"+
    "\1\11\2\u020e\3\11\2\u020e\10\11\1\u020e\2\11\1\u020e"+
    "\3\11\3\0\1\11\1\u020e\1\11\1\u020e\1\11\1\u020e"+
    "\11\11\6\u020e\2\11\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\13\14"+
    "\1\303\13\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\7\14\1\u020f\17\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\11\14\1\u0210\15\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\23\14\1\u0211\3\14\3\0\27\14\2\0"+
    "\1\11\2\0\1\11\4\u0212\1\11\1\0\5\11\3\0"+
    "\2\11\2\u0212\15\0\1\11\2\u0212\3\11\2\u0212\10\11"+
    "\1\u0212\2\11\1\u0212\3\11\3\0\1\11\1\u0212\1\11"+
    "\1\u0212\1\11\1\u0212\11\11\6\u0212\2\11\6\0\4\u0213"+
    "\14\0\2\u0213\16\0\2\u0213\3\0\2\u0213\10\0\1\u0213"+
    "\2\0\1\u0213\7\0\1\u0213\1\0\1\u0213\1\0\1\u0213"+
    "\11\0\6\u0213\4\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\4\14\1\u0214"+
    "\22\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\4\14"+
    "\1\u0215\22\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\5\14\1\u0149\21\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\15\14\1\u0216\11\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\5\14\1\u0217\21\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\1\u0218\26\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\17\14\1\246\7\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\7\14\1\u0219\17\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\11\14\1\u021a\15\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\4\14\1\u019a"+
    "\22\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\14\14"+
    "\1\u021b\12\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\3\14\1\u021c\23\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\16\14\1\u021d\10\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\15\14\1\55\11\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\5\14\1\u021e\21\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\11\14\1\u021f\15\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\3\14\1\u019a\23\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\11\14\1\u0220"+
    "\15\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\20\14"+
    "\1\u0221\6\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\13\14\1\u0222\13\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\7\14\1\u0223\17\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\5\14\1\u0224\21\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\13\14\1\u0225\13\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\27\14\3\0\11\14\1\u01a7"+
    "\15\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\1\14\1\u0226\25\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\5\14\1\u0227"+
    "\21\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\1\14"+
    "\1\u0228\25\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\24\14\1\u010d\2\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\12\14\1\u0229\14\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\4\14\1\u011a\22\14\3\0\27\14\2\0"+
    "\1\11\2\0\5\14\1\u022a\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\27\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\10\14\1\u010d\16\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\7\14\1\u022b\17\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\1\14\1\u022c\25\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\1\14\1\215"+
    "\25\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\7\14"+
    "\1\u022d\17\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\4\14\1\u022e\22\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\10\14\1\u022f\16\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\4\14\1\u0230\22\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\15\14\1\u0231\11\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\15\14\1\u0232\11\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\11\14\1\u0233\15\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\11\14\1\u0234"+
    "\15\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\22\14"+
    "\1\u0235\4\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\27\14\3\0\3\14\1\u0236\23\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\27\14\3\0\21\14\1\u01c1\5\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\27\14\3\0\23\14\1\u01c1\3\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\13\14\1\u0237\13\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\27\14\3\0\25\14\1\u0238"+
    "\1\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\13\14\1\u0239\13\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\15\14\1\u023a"+
    "\11\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\1\14"+
    "\1\u023b\25\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\6\14\1\303\20\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\7\14\1\u0193\17\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\25\14\1\u023c\1\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\5\14\1\u023d\21\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\27\14\3\0\17\14\1\u023e"+
    "\1\u01c2\1\14\1\u01c3\4\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\5\14\1\200\21\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\27\14\3\0\7\14\1\u023f\2\14\1\u0240\14\14"+
    "\44\0\1\u01d4\3\0\1\u0159\62\0\6\u01d3\1\0\1\u0241"+
    "\1\0\1\u0241\1\u01d3\2\u0241\1\u01d3\1\u0241\4\u01d3\2\u0241"+
    "\1\0\1\u0241\1\0\1\u0241\2\0\2\u0241\1\0\2\u0241"+
    "\27\u01d3\1\0\2\u0241\27\u01d3\22\0\1\u0242\152\0\1\u0243"+
    "\137\0\1\u0244\120\0\1\u01e4\1\0\1\u0245\61\0\1\u0246"+
    "\174\0\1\u0247\111\0\1\u0248\131\0\1\u0249\130\0\1\u024a"+
    "\117\0\1\u01e4\131\0\1\u01e3\120\0\1\u024b\131\0\1\u024c"+
    "\127\0\1\u0165\134\0\1\u024d\113\0\1\u01e1\137\0\1\u01e1"+
    "\117\0\1\u024e\136\0\1\u024f\52\0\1\u0250\125\0\1\u0251"+
    "\170\0\1\u0252\120\0\1\u0253\125\0\1\u0254\144\0\1\u0255"+
    "\103\0\1\u01e1\140\0\1\u0256\112\0\1\u0257\134\0\1\u0258"+
    "\133\0\1\u0259\130\0\1\u01e4\114\0\1\u025a\135\0\1\u01e1"+
    "\123\0\1\u025b\114\0\1\u025c\130\0\1\u025d\120\0\1\u025e"+
    "\132\0\1\u025f\136\0\1\u01e1\113\0\1\u01e1\124\0\1\u0260"+
    "\121\0\1\u0261\134\0\1\u024c\116\0\1\u01ee\150\0\1\u0262"+
    "\105\0\1\u0263\14\0\1\u0264\113\0\1\u01e4\127\0\1\u0265"+
    "\117\0\1\u0266\121\0\1\u0208\3\0\1\u0181\62\0\6\u0207"+
    "\1\0\1\u0267\1\0\1\u0267\1\u0207\2\u0267\1\u0207\1\u0267"+
    "\4\u0207\2\u0267\1\0\1\u0267\1\0\1\u0267\2\0\2\u0267"+
    "\1\0\2\u0267\27\u0207\1\0\2\u0267\27\u0207\22\0\1\u0268"+
    "\154\0\1\u0269\134\0\1\u026a\111\0\1\u020d\3\0\1\u0187"+
    "\62\0\6\u020c\1\0\1\u026b\1\0\1\u026b\1\u020c\2\u026b"+
    "\1\u020c\1\u026b\4\u020c\2\u026b\1\0\1\u026b\1\0\1\u026b"+
    "\2\0\2\u026b\1\0\2\u026b\27\u020c\1\0\2\u026b\27\u020c"+
    "\22\0\1\u026c\105\0\1\11\2\0\1\11\4\u026d\1\11"+
    "\1\0\5\11\3\0\2\11\2\u026d\15\0\1\11\2\u026d"+
    "\3\11\2\u026d\10\11\1\u026d\2\11\1\u026d\3\11\3\0"+
    "\1\11\1\u026d\1\11\1\u026d\1\11\1\u026d\11\11\6\u026d"+
    "\2\11\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\1\14\1\u026e\25\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\2\14\1\u026f"+
    "\24\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\11\14"+
    "\1\u0270\15\14\3\0\27\14\2\0\1\11\2\0\1\11"+
    "\4\u0271\1\11\1\0\5\11\3\0\2\11\2\u0271\15\0"+
    "\1\11\2\u0271\3\11\2\u0271\10\11\1\u0271\2\11\1\u0271"+
    "\3\11\3\0\1\11\1\u0271\1\11\1\u0271\1\11\1\u0271"+
    "\11\11\6\u0271\2\11\6\0\4\u0272\14\0\2\u0272\16\0"+
    "\2\u0272\3\0\2\u0272\10\0\1\u0272\2\0\1\u0272\7\0"+
    "\1\u0272\1\0\1\u0272\1\0\1\u0272\11\0\6\u0272\4\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\11\14\1\u0273\15\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\27\14\3\0\21\14\1\u0274"+
    "\1\u01c3\4\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\5\14\1\u0194"+
    "\21\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\1\14"+
    "\1\u0275\25\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\7\14\1\u0276\17\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\1\14\1\u0277\25\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\6\14\1\u019a\20\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\5\14\1\u0278\21\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\11\14\1\u0279\15\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\13\14\1\246\13\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\5\14\1\u027a"+
    "\21\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\13\14"+
    "\1\u027b\13\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\7\14\1\u027c\17\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\20\14\1\u01a4\6\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\1\u027d\26\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\4\14\1\u027e\22\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\11\14\1\u027f\15\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\13\14\1\u0280\13\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\23\14\1\u0281\3\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\10\14\1\u0282"+
    "\16\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\12\14"+
    "\1\u0283\14\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\10\14\1\241\16\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\2\14"+
    "\1\u0284\1\14\15\0\27\14\3\0\4\14\1\u0285\22\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\12\14\1\u010d\14\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\6\14\1\u0286\20\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\11\14\1\u0287"+
    "\15\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\10\14"+
    "\1\u0288\16\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\11\14\1\u01b4\15\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\13\14\1\u0289\13\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\10\14\1\u028a\16\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\3\14\1\u028b\23\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\13\14\1\u028c\13\14\3\0"+
    "\27\14\2\0\1\11\2\0\3\14\1\u028d\2\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\27\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\5\14\1\u028e"+
    "\21\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\11\14"+
    "\1\u028f\15\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\11\14\1\u0290\15\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\12\14\1\u0149\14\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\10\14\1\u0149\16\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\25\14\1\u0153\1\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\21\14\1\u0149\5\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\7\14\1\u0291\17\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\27\14\3\0"+
    "\1\14\1\u0292\1\14\1\u0236\23\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\7\14\1\303\17\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\1\14\1\u023c\25\14\3\0\27\14\22\0"+
    "\1\u01d3\157\0\1\u0293\133\0\1\u01fb\123\0\1\u01e1\122\0"+
    "\1\u0165\132\0\1\u025d\117\0\1\u0294\123\0\1\u0295\123\0"+
    "\1\u01e4\123\0\1\u0296\135\0\1\u01fc\132\0\1\u01e4\127\0"+
    "\1\u0297\122\0\1\u0298\115\0\1\u0299\131\0\1\u029a\116\0"+
    "\1\u029b\126\0\1\u029c\126\0\1\u029d\126\0\1\u029e\124\0"+
    "\1\u01e1\142\0\1\u0246\111\0\1\u029f\125\0\1\u02a0\133\0"+
    "\1\u02a1\117\0\1\u0165\121\0\1\u0166\131\0\1\u01e1\121\0"+
    "\1\u02a2\127\0\1\u02a3\131\0\1\u02a4\63\0\1\u02a5\161\0"+
    "\1\u02a6\133\0\1\u02a7\125\0\1\u02a8\117\0\1\u02a9\135\0"+
    "\1\u02aa\71\0\1\u0207\165\0\1\u02ab\127\0\1\u02ac\63\0"+
    "\1\u020c\105\0\1\11\2\0\1\11\4\14\1\11\1\0"+
    "\5\11\3\0\2\11\2\14\15\0\1\11\2\14\3\11"+
    "\2\14\10\11\1\14\2\11\1\14\3\11\3\0\1\11"+
    "\1\14\1\11\1\14\1\11\1\14\11\11\6\14\2\11"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\13\14\1\u0149\13\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\5\14\1\u02ad\21\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\13\14\1\u02ae"+
    "\13\14\3\0\27\14\2\0\1\11\2\0\1\11\4\22"+
    "\1\11\1\0\5\11\3\0\2\11\2\22\15\0\1\11"+
    "\2\22\3\11\2\22\10\11\1\22\2\11\1\22\3\11"+
    "\3\0\1\11\1\22\1\11\1\22\1\11\1\22\11\11"+
    "\6\22\2\11\6\0\4\u02af\14\0\2\u02af\16\0\2\u02af"+
    "\3\0\2\u02af\10\0\1\u02af\2\0\1\u02af\7\0\1\u02af"+
    "\1\0\1\u02af\1\0\1\u02af\11\0\6\u02af\4\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\15\14\1\u026e\11\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\27\14\3\0\24\14\1\u01c1\2\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\6\14\1\u019c\20\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\13\14\1\u02b0\13\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\13\14\1\u019a"+
    "\13\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\15\14"+
    "\1\u02b1\11\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\7\14\1\u02b2\17\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\7\14\1\u01a7\17\14\3\0\27\14\2\0\1\11"+
    "\2\0\5\14\1\u011a\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\27\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\27\14\3\0\15\14\1\u02b3\11\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\7\14\1\u02b4\17\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\27\14\3\0\1\14\1\u02b5"+
    "\1\u02b6\24\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\4\14\1\u027a"+
    "\22\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\6\14"+
    "\1\u0117\20\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\1\14\1\u02b7\25\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\27\14\3\0\1\u02b8\26\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\7\14\1\270\17\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\10\14\1\u02b9\16\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\13\14\1\u02ba\13\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\4\14\1\u02bb\22\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\15\14\1\u021e\11\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\10\14\1\u02bc"+
    "\16\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\7\14"+
    "\1\u02bd\17\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\7\14\1\u0194\17\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\7\14\1\u0149\17\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\27\14\3\0\1\14\1\u02be\25\14\2\0"+
    "\1\11\2\0\5\14\1\u02bf\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\27\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\5\14\1\u02c0\21\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\4\14\1\u02bc\22\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\7\14\1\u02c1\17\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\13\14\1\u02c2"+
    "\13\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\10\14"+
    "\1\u02c3\16\14\3\0\27\14\52\0\1\u02c4\133\0\1\u02a0"+
    "\113\0\1\u02c5\131\0\1\u02c6\127\0\1\u02c7\131\0\1\u02c8"+
    "\125\0\1\u02c9\117\0\1\u0203\121\0\1\u02ca\144\0\1\u02cb"+
    "\106\0\1\u01ef\3\0\1\u02cc\131\0\1\u02cd\127\0\1\u025e"+
    "\116\0\1\u01e4\124\0\1\u0165\132\0\1\u01e1\136\0\1\u02ce"+
    "\112\0\1\u02cf\127\0\1\u0256\121\0\1\u0165\127\0\1\u02d0"+
    "\124\0\1\u02d1\124\0\1\u0266\136\0\1\u0245\115\0\1\u02d2"+
    "\55\0\30\u02ac\1\u01e1\75\u02ac\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\1\14"+
    "\1\u02d3\25\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\7\14\1\u013d\17\14\3\0\27\14\6\0\4\170\14\0"+
    "\2\170\16\0\2\170\3\0\2\170\10\0\1\170\2\0"+
    "\1\170\7\0\1\170\1\0\1\170\1\0\1\170\11\0"+
    "\6\170\4\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\4\14\1\u0106\22\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\13\14\1\u02d4"+
    "\13\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\13\14"+
    "\1\u019c\13\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\27\14\3\0\14\14\1\u02d5\12\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\13\14\1\u02d6\13\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\10\14\1\u02d7\16\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\1\14\1\u02d8\25\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\6\14\1\u010d\20\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\14\14\1\u02d9\12\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\15\14\1\u02da"+
    "\11\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\4\14"+
    "\1\u01a7\22\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\7\14\1\u02db\17\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\22\14\1\246\4\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\13\14\1\u02dc\13\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\15\14\1\u02dd\11\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\23\14\1\u02de\3\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\1\14\1\u02df\25\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\16\14\1\u0149"+
    "\10\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\6\14"+
    "\1\u013e\20\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\1\14\1\u02e0\25\14\3\0\27\14\62\0\1\u02c7\116\0"+
    "\1\u0256\141\0\1\u01e1\126\0\1\u01e1\112\0\1\u02c6\123\0"+
    "\1\u01f5\126\0\1\u02e1\63\0\1\u02e2\172\0\1\u02e3\114\0"+
    "\1\u01e2\125\0\1\u02d0\130\0\1\u02e4\125\0\1\u02c6\132\0"+
    "\1\u02e5\51\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\5\14\1\u02e6\21\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\11\14\1\u02e7"+
    "\15\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\27\14"+
    "\3\0\4\14\1\u02e8\22\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\4\14\1\u01a4\22\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\1\14\1\u02e9\25\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\6\14\1\u02ea\20\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\11\14\1\u0106\15\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\1\14\1\u02ba\25\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\20\14\1\u019a\6\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\4\14\1\u0194"+
    "\22\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\13\14"+
    "\1\u02eb\13\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\23\14\1\u01ca\3\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\22\14\1\u0149\4\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\1\u02ec\26\14\3\0\27\14\50\0\1\u01fc"+
    "\130\0\1\u02ed\133\0\1\u0256\120\0\1\u01fb\117\0\1\u02ee"+
    "\61\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\22\14\1\u01a7\4\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\27\14\3\0\26\14"+
    "\1\u02bb\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\27\14\3\0\1\14"+
    "\1\u02ef\25\14\2\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\3\14\1\u02f0"+
    "\23\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\17\14"+
    "\1\u02f1\7\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\4\14\1\u02f2\22\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\21\14\1\u02f3\5\14\3\0\27\14\51\0\1\u02f4"+
    "\131\0\1\u02ac\52\0\1\11\2\0\6\14\1\0\1\11"+
    "\1\152\1\14\2\11\3\0\4\14\15\0\15\14\1\u02f5"+
    "\11\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\3\14"+
    "\1\u01a7\23\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\1\14\1\u02f6\25\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\7\14\1\u02f7\17\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\7\14\1\u02f8\17\14\3\0\27\14\50\0"+
    "\1\u01e1\11\0\1\u025d\45\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\1\u02f9"+
    "\26\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\11\1\152\1\14\2\11\3\0\4\14\15\0\12\14"+
    "\1\u027a\14\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\11\1\152\1\14\2\11\3\0\4\14\15\0"+
    "\25\14\1\u02dc\1\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\11\1\152\1\14\2\11\3\0\4\14"+
    "\15\0\20\14\1\u01c1\6\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\11\1\152\1\14\2\11\3\0"+
    "\4\14\15\0\21\14\1\u02fa\5\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\11\1\152\1\14\2\11"+
    "\3\0\4\14\15\0\15\14\1\u02fb\11\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\11\1\152\1\14"+
    "\2\11\3\0\4\14\15\0\13\14\1\u02fc\13\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\11\1\152"+
    "\1\14\2\11\3\0\4\14\15\0\7\14\1\u0285\17\14"+
    "\3\0\27\14\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[61490];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\2\1\1\11\5\1\1\11\10\1\2\11\3\1"+
    "\1\11\24\1\1\11\16\1\2\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\11\1\1\1\11\5\1"+
    "\1\11\10\1\1\11\4\1\1\11\2\1\1\11\1\1"+
    "\1\11\1\1\1\11\17\1\2\0\1\11\11\1\2\0"+
    "\1\11\106\1\1\11\2\1\1\11\25\0\1\11\2\0"+
    "\1\11\11\0\2\11\2\1\1\0\7\1\1\0\124\1"+
    "\64\0\6\1\1\0\1\11\77\1\1\0\1\11\1\0"+
    "\1\1\15\0\1\11\45\0\1\1\4\0\1\1\1\0"+
    "\5\1\1\0\55\1\15\0\1\1\20\0\1\1\15\0"+
    "\5\1\1\0\40\1\32\0\2\1\1\0\25\1\4\0"+
    "\1\1\11\0\16\1\5\0\7\1\2\0\5\1\1\0"+
    "\10\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[764];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */private char zzBuffer[];/** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */

	/**
     * Token type specifying we're in a JavaScript multiline comment.
     */
    static final int INTERNAL_IN_JS_MLC				= -8;

    /**
     * Token type specifying we're in a JavaScript documentation comment.
     */
    static final int INTERNAL_IN_JS_COMMENT_DOCUMENTATION = -9;

    /**
     * Token type specifying we're in an invalid multi-line JS string.
     */
    static final int INTERNAL_IN_JS_STRING_INVALID	= -10;

    /**
     * Token type specifying we're in a valid multi-line JS string.
     */
    static final int INTERNAL_IN_JS_STRING_VALID		= -11;

    /**
     * Token type specifying we're in an invalid multi-line JS single-quoted string.
     */
    static final int INTERNAL_IN_JS_CHAR_INVALID	= -12;

    /**
     * Token type specifying we're in a valid multi-line JS single-quoted string.
     */
    static final int INTERNAL_IN_JS_CHAR_VALID		= -13;

    /**
     * Token type specifying we're in a valid multi-line template literal.
     */
    static final int INTERNAL_IN_JS_TEMPLATE_LITERAL_VALID = -23;

    /**
     * Token type specifying we're in an invalid multi-line template literal.
     */
    static final int INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID = -24;

    /**
     * When in the JS_STRING state, whether the current string is valid.
     */
    private boolean validJSString;

    /**
     * Language state set on JS tokens.  Must be 0.
     */
    private static final int LANG_INDEX_DEFAULT	= 0;

    private Stack<Boolean> varDepths;

    /**
     * Constructor.  This must be here because JFlex does not generate a
     * no-parameter constructor.
     */
    public SEJavaScriptTokenMaker() {
        super();
    }


    /**
     * Adds the token specified to the current linked list of tokens as an
     * "end token;" that is, at <code>zzMarkedPos</code>.
     *
     * @param tokenType The token's type.
     */
    private void addEndToken(int tokenType) {
        addToken(zzMarkedPos,zzMarkedPos, tokenType);
    }


    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     * @see #addToken(int, int, int)
     */
    private void addHyperlinkToken(int start, int end, int tokenType) {
        int so = start + offsetShift;
        addToken(zzBuffer, start,end, tokenType, so, true);
    }


    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     */
    private void addToken(int tokenType) {
        addToken(zzStartRead, zzMarkedPos-1, tokenType);
    }


    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     */
    private void addToken(int start, int end, int tokenType) {
        int so = start + offsetShift;
        addToken(zzBuffer, start,end, tokenType, so);
    }


    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param array The character array.
     * @param start The starting offset in the array.
     * @param end The ending offset in the array.
     * @param tokenType The token's type.
     * @param startOffset The offset in the document at which this token
     *                    occurs.
     */
    @Override
    public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
        super.addToken(array, start,end, tokenType, startOffset);
        zzStartRead = zzMarkedPos;
    }


    /**
     * Returns the closest {@link TokenTypes} "standard" token type for a given
     * "internal" token type (e.g. one whose value is <code>&lt; 0</code>).
     */
     @Override
    public int getClosestStandardTokenTypeForInternalType(int type) {
        switch (type) {
            case INTERNAL_IN_JS_MLC:
                return TokenTypes.COMMENT_MULTILINE;
            case INTERNAL_IN_JS_COMMENT_DOCUMENTATION:
                return TokenTypes.COMMENT_DOCUMENTATION;
            case INTERNAL_IN_JS_STRING_INVALID:
            case INTERNAL_IN_JS_STRING_VALID:
            case INTERNAL_IN_JS_CHAR_INVALID:
            case INTERNAL_IN_JS_CHAR_VALID:
                return TokenTypes.LITERAL_STRING_DOUBLE_QUOTE;
            case INTERNAL_IN_JS_TEMPLATE_LITERAL_VALID:
                return TokenTypes.LITERAL_BACKQUOTE;
            case INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID:
                return TokenTypes.ERROR_STRING_DOUBLE;
        }
        return type;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String[] getLineCommentStartAndEnd(int languageIndex) {
        return new String[] { "//", null };
    }


    /**
     * Returns the first token in the linked list of tokens generated
     * from <code>text</code>.  This method must be implemented by
     * subclasses so they can correctly implement syntax highlighting.
     *
     * @param text The text from which to get tokens.
     * @param initialTokenType The token type we should start with.
     * @param startOffset The offset into the document at which
     *        <code>text</code> starts.
     * @return The first <code>Token</code> in a linked list representing
     *         the syntax highlighted text.
     */
    @Override
    public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

        resetTokenList();
        this.offsetShift = -text.offset + startOffset;
        validJSString = true;
        int languageIndex = LANG_INDEX_DEFAULT;

        // Start off in the proper state.
        int state;
        switch (initialTokenType) {
            case INTERNAL_IN_JS_MLC:
                state = JS_MLC;
                break;
            case INTERNAL_IN_JS_COMMENT_DOCUMENTATION:
                state = JS_DOCCOMMENT;
                start = text.offset;
                break;
            case INTERNAL_IN_JS_STRING_INVALID:
                state = JS_STRING;
                validJSString = false;
                break;
            case INTERNAL_IN_JS_STRING_VALID:
                state = JS_STRING;
                break;
            case INTERNAL_IN_JS_CHAR_INVALID:
                state = JS_CHAR;
                validJSString = false;
                break;
            case INTERNAL_IN_JS_CHAR_VALID:
                state = JS_CHAR;
                break;
            case INTERNAL_IN_JS_TEMPLATE_LITERAL_VALID:
                state = JS_TEMPLATE_LITERAL;
                validJSString = true;
                break;
            case INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID:
                state = JS_TEMPLATE_LITERAL;
                validJSString = false;
                break;
            default:
                // Shouldn't happen
                state = YYINITIAL;
        }

        setLanguageIndex(languageIndex);
        start = text.offset;
        s = text;
        try {
            yyreset(zzReader);
            yybegin(state);
            return yylex();
        } catch (IOException ioe) {
            ioe.printStackTrace();
            return new TokenImpl();
        }

    }

    /**
     * Refills the input buffer.
     *
     * @return      <code>true</code> if EOF was reached, otherwise
     *              <code>false</code>.
     */
    private boolean zzRefill() {
        return zzCurrentPos>=s.offset+s.count;
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     *
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>YY_INITIAL</tt>.
     *
     * @param reader   the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        // 's' has been updated.
        zzBuffer = s.array;
        /*
         * We replaced the line below with the two below it because zzRefill
         * no longer "refills" the buffer (since the way we do it, it's always
         * "full" the first time through, since it points to the segment's
         * array).  So, we assign zzEndRead here.
         */
        //zzStartRead = zzEndRead = s.offset;
        zzStartRead = s.offset;
        zzEndRead = zzStartRead + s.count - 1;
        zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
        zzLexicalState = YYINITIAL;
        zzReader = reader;
        zzAtBOL  = true;
        zzAtEOF  = false;
    }




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SEJavaScriptTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public SEJavaScriptTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 200) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }/**
   * Closes the input stream.
   */
  @Override
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }/**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  @Override
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 13: 
          { addToken(start,zzStartRead-1, Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 53: break;
        case 4: 
          { addToken(Token.IDENTIFIER);
          }
        case 54: break;
        case 47: 
          { addToken(Token.LITERAL_BOOLEAN);
          }
        case 55: break;
        case 34: 
          { /* Skip all escaped chars. */
          }
        case 56: break;
        case 36: 
          { /* Invalid latin-1 character \xXX */ validJSString = false;
          }
        case 57: break;
        case 25: 
          { // TODO: This isn't right.  The expression and its depth should continue to the next line.
							addToken(start,zzStartRead-1, Token.VARIABLE); addEndToken(INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID); return firstToken;
          }
        case 58: break;
        case 41: 
          { varDepths.push(Boolean.TRUE);
          }
        case 59: break;
        case 27: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 60: break;
        case 19: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addEndToken(INTERNAL_IN_JS_MLC); return firstToken;
          }
        case 61: break;
        case 48: 
          { addToken(Token.FUNCTION);
          }
        case 62: break;
        case 6: 
          { addToken(Token.ANNOTATION);
          }
        case 63: break;
        case 24: 
          { int type = validJSString ? Token.LITERAL_BACKQUOTE : Token.ERROR_STRING_DOUBLE; addToken(start,zzStartRead, type); yybegin(YYINITIAL);
          }
        case 64: break;
        case 1: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 65: break;
        case 40: 
          { addToken(start, zzStartRead - 1, Token.LITERAL_BACKQUOTE);
								start = zzMarkedPos-2;
								if (varDepths==null) {
									varDepths = new Stack<>();
								}
								else {
									varDepths.clear();
								}
								varDepths.push(Boolean.TRUE);
								yybegin(JS_TEMPLATE_LITERAL_EXPR);
          }
        case 66: break;
        case 31: 
          { start = zzMarkedPos-2; yybegin(JS_MLC);
          }
        case 67: break;
        case 15: 
          { int type = validJSString ? Token.LITERAL_STRING_DOUBLE_QUOTE : Token.ERROR_STRING_DOUBLE; addToken(start,zzStartRead, type); yybegin(YYINITIAL);
          }
        case 68: break;
        case 11: 
          { start = zzMarkedPos-1; validJSString = true; yybegin(JS_TEMPLATE_LITERAL);
          }
        case 69: break;
        case 43: 
          { start = zzMarkedPos-3; yybegin(JS_DOCCOMMENT);
          }
        case 70: break;
        case 23: 
          { /* Skip valid '$' that is not part of template literal expression start */
          }
        case 71: break;
        case 18: 
          { int type = validJSString ? Token.LITERAL_CHAR : Token.ERROR_CHAR; addToken(start,zzStartRead, type); yybegin(YYINITIAL);
          }
        case 72: break;
        case 16: 
          { addToken(start,zzStartRead-1, Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 73: break;
        case 30: 
          { start = zzMarkedPos-2; yybegin(JS_EOL_COMMENT);
          }
        case 74: break;
        case 51: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_DOCUMENTATION); start = zzMarkedPos;
          }
        case 75: break;
        case 17: 
          { /* Line ending in '\' => continue to next line. */
								if (validJSString) {
									addToken(start,zzStartRead, Token.LITERAL_CHAR);
									addEndToken(INTERNAL_IN_JS_CHAR_VALID);
								}
								else {
									addToken(start,zzStartRead, Token.ERROR_CHAR);
									addEndToken(INTERNAL_IN_JS_CHAR_INVALID);
								}
								return firstToken;
          }
        case 76: break;
        case 29: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 77: break;
        case 2: 
          { addToken(Token.WHITESPACE);
          }
        case 78: break;
        case 38: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_DOCUMENTATION);
          }
        case 79: break;
        case 44: 
          { addToken(Token.DATA_TYPE);
          }
        case 80: break;
        case 37: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 81: break;
        case 14: 
          { /* Line ending in '\' => continue to next line. */
								if (validJSString) {
									addToken(start,zzStartRead, Token.LITERAL_STRING_DOUBLE_QUOTE);
									addEndToken(INTERNAL_IN_JS_STRING_VALID);
								}
								else {
									addToken(start,zzStartRead, Token.ERROR_STRING_DOUBLE);
									addEndToken(INTERNAL_IN_JS_STRING_INVALID);
								}
								return firstToken;
          }
        case 82: break;
        case 5: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 83: break;
        case 10: 
          { start = zzMarkedPos-1; validJSString = true; yybegin(JS_STRING);
          }
        case 84: break;
        case 26: 
          { if (!varDepths.empty()) {
								varDepths.pop();
								if (varDepths.empty()) {
									addToken(start,zzStartRead, Token.VARIABLE);
									start = zzMarkedPos;
									yybegin(JS_TEMPLATE_LITERAL);
								}
							}
          }
        case 85: break;
        case 32: 
          { int start = zzStartRead;
										int operatorLen = yycharat(0)=='+' ? 2 : 1;
										int yylen = yylength(); // Cache before first addToken() invalidates it
										//System.out.println("'" + yytext() + "': " + yylength() + ", " + (operatorLen+1));
										addToken(zzStartRead,zzStartRead+operatorLen-1, Token.OPERATOR);
										if (yylen>operatorLen+1) {
											//System.out.println((start+operatorLen) + ", " + (zzMarkedPos-2));
											addToken(start+operatorLen,zzMarkedPos-2, Token.WHITESPACE);
										}
										zzStartRead = zzCurrentPos = zzMarkedPos = zzMarkedPos - 1;
          }
        case 86: break;
        case 20: 
          { addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addEndToken(INTERNAL_IN_JS_COMMENT_DOCUMENTATION); return firstToken;
          }
        case 87: break;
        case 35: 
          { /* Invalid Unicode character \\uXXXX */ validJSString = false;
          }
        case 88: break;
        case 9: 
          { start = zzMarkedPos-1; validJSString = true; yybegin(JS_CHAR);
          }
        case 89: break;
        case 50: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addToken(temp,zzMarkedPos-1, Token.COMMENT_KEYWORD); start = zzMarkedPos;
          }
        case 90: break;
        case 39: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addToken(temp,zzMarkedPos-1, Token.COMMENT_MARKUP); start = zzMarkedPos;
          }
        case 91: break;
        case 33: 
          { addToken(Token.RESERVED_WORD);
          }
        case 92: break;
        case 49: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 93: break;
        case 46: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 94: break;
        case 21: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 95: break;
        case 8: 
          { addToken(Token.SEPARATOR);
          }
        case 96: break;
        case 22: 
          { if (validJSString) {
									addToken(start, zzStartRead - 1, Token.LITERAL_BACKQUOTE);
									addEndToken(INTERNAL_IN_JS_TEMPLATE_LITERAL_VALID);
								}
								else {
									addToken(start,zzStartRead - 1, Token.ERROR_STRING_DOUBLE);
									addEndToken(INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID);
								}
								return firstToken;
          }
        case 97: break;
        case 3: 
          { addNullToken(); return firstToken;
          }
        case 98: break;
        case 42: 
          { boolean highlightedAsRegex = false;
										if (firstToken==null) {
											addToken(Token.REGEX);
											highlightedAsRegex = true;
										}
										else {
											// If this is *likely* to be a regex, based on
											// the previous token, highlight it as such.
											Token t = firstToken.getLastNonCommentNonWhitespaceToken();
											if (RSyntaxUtilities.regexCanFollowInJavaScript(t)) {
												addToken(Token.REGEX);
												highlightedAsRegex = true;
											}
										}
										// If it doesn't *appear* to be a regex, highlight it as
										// individual tokens.
										if (!highlightedAsRegex) {
											int temp = zzStartRead + 1;
											addToken(zzStartRead, zzStartRead, Token.OPERATOR);
											zzStartRead = zzCurrentPos = zzMarkedPos = temp;
										}
          }
        case 99: break;
        case 7: 
          { addToken(Token.OPERATOR);
          }
        case 100: break;
        case 28: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 101: break;
        case 52: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 102: break;
        case 45: 
          { addToken(Token.COMMENT_MULTILINE);
          }
        case 103: break;
        case 12: 
          { 
          }
        case 104: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case JS_TEMPLATE_LITERAL: {
              if (validJSString) {
									addToken(start, zzStartRead - 1, Token.LITERAL_BACKQUOTE);
									addEndToken(INTERNAL_IN_JS_TEMPLATE_LITERAL_VALID);
								}
								else {
									addToken(start,zzStartRead - 1, Token.ERROR_STRING_DOUBLE);
									addEndToken(INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID);
								}
								return firstToken;
            }
            case 765: break;
            case JS_STRING: {
              addToken(start,zzStartRead-1, Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
            }
            case 766: break;
            case JS_TEMPLATE_LITERAL_EXPR: {
              // TODO: This isn't right.  The expression and its depth should continue to the next line.
							addToken(start,zzStartRead-1, Token.VARIABLE); addEndToken(INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID); return firstToken;
            }
            case 767: break;
            case JS_CHAR: {
              addToken(start,zzStartRead-1, Token.ERROR_CHAR); addNullToken(); return firstToken;
            }
            case 768: break;
            case JS_EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 769: break;
            case JS_DOCCOMMENT: {
              yybegin(YYINITIAL); addToken(start,zzEndRead, Token.COMMENT_DOCUMENTATION); addEndToken(INTERNAL_IN_JS_COMMENT_DOCUMENTATION); return firstToken;
            }
            case 770: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 771: break;
            case JS_MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addEndToken(INTERNAL_IN_JS_MLC); return firstToken;
            }
            case 772: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
