/* The following code was generated by JFlex 1.4.1 on 26/02/22 6:41 AM */

/*
 * SEJavaScriptTokenMaker.java - Parses a document into JavaScript tokens.
 *
 * This version is heavily modified for Strange Rhino: removes E4X support,
 * adds several keywords, adds standard types, adds some
 * special SE-specific global objects and functions, and recognizes special
 * string lookup identifiers.
 * 
 * Adapted from the RSyntaxTextArea JavaScript tokenizer. See about
 * dialog tempate for license information.
 */
package ca.cgjennings.ui.textedit;

import java.io.*;
import javax.swing.text.Segment;
import java.util.Stack;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * Scanner for SE JavaScript files. Unlike standard JavaScript, this
 * will recognize special string lookup identifiers starting with
 * {@code @} and {@code #}.
 *
 * <p>
 * <strong>
 * This file is generated automatically.
 * See {@code build-tools/README.md} for details.
 * </strong>
 */

public class SEJavaScriptTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int JS_TEMPLATE_LITERAL = 6;
  public static final int JS_STRING = 1;
  public static final int JS_TEMPLATE_LITERAL_EXPR = 7;
  public static final int JS_CHAR = 2;
  public static final int JS_EOL_COMMENT = 5;
  public static final int JS_DOCCOMMENT = 4;
  public static final int YYINITIAL = 0;
  public static final int JS_MLC = 3;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\2\1\0\1\1\1\11\22\0\1\1\1\35\1\123"+
    "\1\12\1\14\1\35\1\40\1\73\2\72\1\17\1\30\1\27\1\24"+
    "\1\25\1\16\1\5\1\114\1\117\1\116\1\120\1\7\1\115\1\7"+
    "\1\113\1\4\1\41\1\27\1\31\1\32\1\34\1\36\1\15\1\77"+
    "\1\6\1\75\1\101\1\23\1\22\2\3\1\100\1\102\1\3\1\21"+
    "\1\106\1\105\1\104\1\76\1\3\1\110\1\103\1\74\1\111\1\121"+
    "\1\112\1\20\2\3\1\72\1\13\1\72\1\33\1\12\1\124\1\43"+
    "\1\44\1\50\1\62\1\51\1\65\1\54\1\56\1\53\1\107\1\61"+
    "\1\52\1\42\1\55\1\57\1\63\1\70\1\47\1\45\1\46\1\10"+
    "\1\66\1\60\1\67\1\64\1\122\1\71\1\37\1\26\1\36\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\2\1\3\1\4\2\5\2\4\1\1"+
    "\2\6\2\4\1\6\1\4\1\7\1\4\7\6\22\4"+
    "\1\10\16\4\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\13\1\17\1\20\1\21\1\13\1\22\5\13\1\23"+
    "\10\13\1\24\4\13\2\25\1\26\1\27\1\13\1\30"+
    "\1\13\1\31\1\1\1\32\1\5\1\33\1\32\1\33"+
    "\1\32\1\34\1\32\4\4\2\0\1\35\1\36\1\6"+
    "\6\4\1\6\2\0\1\37\1\6\34\4\2\40\10\4"+
    "\1\40\36\4\1\41\1\42\1\43\1\44\25\0\1\45"+
    "\2\0\1\46\11\0\1\47\1\50\1\1\1\33\1\0"+
    "\2\34\4\4\1\51\1\52\45\4\1\1\40\4\1\53"+
    "\13\4\64\0\1\1\4\4\1\54\3\4\1\55\5\4"+
    "\1\1\3\4\1\56\10\4\1\57\50\4\1\0\1\13"+
    "\1\0\1\60\15\0\1\61\45\0\1\62\4\0\1\63"+
    "\1\0\1\1\14\4\1\40\21\4\1\1\5\4\1\53"+
    "\13\4\15\0\1\61\20\0\1\61\15\0\1\1\16\4"+
    "\1\1\3\4\1\55\20\4\32\0\26\4\1\61\4\0"+
    "\1\61\11\0\16\4\5\0\2\4\1\57\4\4\2\0"+
    "\5\4\1\0\10\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[752];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\125\0\252\0\377\0\u0154\0\u01a9\0\u01fe\0\u0253"+
    "\0\u02a8\0\u02fd\0\u0352\0\u03a7\0\u03fc\0\u0451\0\u04a6\0\u04fb"+
    "\0\u0352\0\u0550\0\u05a5\0\u05fa\0\u064f\0\u06a4\0\u06f9\0\u0352"+
    "\0\u0352\0\u074e\0\u07a3\0\u07f8\0\u084d\0\u0352\0\u08a2\0\u08f7"+
    "\0\u094c\0\u09a1\0\u09f6\0\u0a4b\0\u0aa0\0\u0af5\0\u0b4a\0\u0b9f"+
    "\0\u0bf4\0\u0c49\0\u0c9e\0\u0cf3\0\u0d48\0\u0d9d\0\u0df2\0\u0e47"+
    "\0\u0e9c\0\u0ef1\0\u0352\0\u0f46\0\u0f9b\0\u0ff0\0\u1045\0\u109a"+
    "\0\u10ef\0\u1144\0\u1199\0\u11ee\0\u1243\0\u1298\0\u12ed\0\u1342"+
    "\0\u1397\0\u0352\0\u0352\0\u13ec\0\u0352\0\u1441\0\u0352\0\u1496"+
    "\0\u0352\0\u1441\0\u0352\0\u14eb\0\u0352\0\u1540\0\u1595\0\u15ea"+
    "\0\u163f\0\u1694\0\u0352\0\u16e9\0\u173e\0\u1793\0\u17e8\0\u183d"+
    "\0\u1892\0\u18e7\0\u193c\0\u0352\0\u1991\0\u19e6\0\u1a3b\0\u1a90"+
    "\0\u0352\0\u1441\0\u1ae5\0\u0352\0\u1b3a\0\u0352\0\u1b8f\0\u0352"+
    "\0\u1be4\0\u1c39\0\u1c39\0\u1c39\0\u1c8e\0\u1ce3\0\u1d38\0\u1d8d"+
    "\0\u1de2\0\u1e37\0\u1e8c\0\u1ee1\0\u1f36\0\u1f8b\0\u1fe0\0\u0352"+
    "\0\u2035\0\u1f8b\0\u208a\0\u20df\0\u2134\0\u2189\0\u21de\0\u2233"+
    "\0\u2288\0\u05a5\0\u2288\0\u0352\0\u22dd\0\u2332\0\u2387\0\u23dc"+
    "\0\u2431\0\u2486\0\u24db\0\u2530\0\u2585\0\u25da\0\u262f\0\u2684"+
    "\0\u26d9\0\u272e\0\u2783\0\u27d8\0\u282d\0\u2882\0\u28d7\0\u292c"+
    "\0\u2981\0\u29d6\0\u2a2b\0\u2a80\0\u2ad5\0\u2b2a\0\u2b7f\0\u2bd4"+
    "\0\u2c29\0\u2c7e\0\u03a7\0\u2cd3\0\u2d28\0\u2d7d\0\u2dd2\0\u2e27"+
    "\0\u2e7c\0\u2ed1\0\u2f26\0\u2f7b\0\u2fd0\0\u3025\0\u307a\0\u30cf"+
    "\0\u3124\0\u3179\0\u31ce\0\u3223\0\u3278\0\u32cd\0\u3322\0\u3377"+
    "\0\u33cc\0\u3421\0\u3476\0\u34cb\0\u3520\0\u3575\0\u35ca\0\u361f"+
    "\0\u3674\0\u36c9\0\u371e\0\u3773\0\u37c8\0\u381d\0\u3872\0\u38c7"+
    "\0\u391c\0\u3971\0\u0352\0\u39c6\0\u3a1b\0\u0352\0\u3a70\0\u3ac5"+
    "\0\u3b1a\0\u3b6f\0\u3bc4\0\u3c19\0\u3c6e\0\u3cc3\0\u3d18\0\u3d6d"+
    "\0\u3dc2\0\u3e17\0\u3e6c\0\u3ec1\0\u3f16\0\u3f6b\0\u3fc0\0\u4015"+
    "\0\u406a\0\u40bf\0\u4114\0\u0352\0\u4169\0\u41be\0\u0352\0\u4213"+
    "\0\u4268\0\u42bd\0\u4312\0\u4367\0\u43bc\0\u4411\0\u4466\0\u44bb"+
    "\0\u0352\0\u0352\0\u4510\0\u4565\0\u45ba\0\u1c39\0\u460f\0\u4664"+
    "\0\u46b9\0\u470e\0\u4763\0\u47b8\0\u480d\0\u4862\0\u48b7\0\u490c"+
    "\0\u4961\0\u49b6\0\u4a0b\0\u4a60\0\u4ab5\0\u4b0a\0\u4b5f\0\u4bb4"+
    "\0\u4c09\0\u4c5e\0\u4cb3\0\u4d08\0\u4d5d\0\u4db2\0\u4e07\0\u4e5c"+
    "\0\u4eb1\0\u4f06\0\u4f5b\0\u4fb0\0\u5005\0\u505a\0\u50af\0\u5104"+
    "\0\u5159\0\u51ae\0\u5203\0\u5258\0\u52ad\0\u5302\0\u5357\0\u53ac"+
    "\0\u5401\0\u5456\0\u54ab\0\u5500\0\u5555\0\u55aa\0\u55ff\0\u5654"+
    "\0\u56a9\0\u56fe\0\u5753\0\u57a8\0\u57fd\0\u5852\0\u58a7\0\u58fc"+
    "\0\u5951\0\u59a6\0\u59fb\0\u5a50\0\u5aa5\0\u5afa\0\u5b4f\0\u5ba4"+
    "\0\u5bf9\0\u5c4e\0\u5ca3\0\u5cf8\0\u5d4d\0\u5da2\0\u5df7\0\u5e4c"+
    "\0\u5ea1\0\u5ef6\0\u5f4b\0\u03a7\0\u5fa0\0\u5ff5\0\u604a\0\u609f"+
    "\0\u60f4\0\u6149\0\u619e\0\u61f3\0\u6248\0\u629d\0\u62f2\0\u6347"+
    "\0\u639c\0\u63f1\0\u6446\0\u649b\0\u64f0\0\u6545\0\u659a\0\u65ef"+
    "\0\u6644\0\u6699\0\u66ee\0\u6743\0\u6798\0\u67ed\0\u6842\0\u6897"+
    "\0\u68ec\0\u6941\0\u6996\0\u69eb\0\u6a40\0\u6a95\0\u6aea\0\u6b3f"+
    "\0\u6b94\0\u6be9\0\u6c3e\0\u6c93\0\u6ce8\0\u6d3d\0\u6d92\0\u6de7"+
    "\0\u6e3c\0\u6e91\0\u6ee6\0\u6f3b\0\u6f90\0\u6fe5\0\u703a\0\u708f"+
    "\0\u70e4\0\u7139\0\u718e\0\u71e3\0\u7238\0\u728d\0\u72e2\0\u7337"+
    "\0\u738c\0\u73e1\0\u7436\0\u748b\0\u74e0\0\u7535\0\u758a\0\u75df"+
    "\0\u0352\0\u7634\0\u7689\0\u76de\0\u03a7\0\u7733\0\u7788\0\u77dd"+
    "\0\u7832\0\u7887\0\u03a7\0\u78dc\0\u7931\0\u7986\0\u03a7\0\u79db"+
    "\0\u7a30\0\u7a85\0\u7ada\0\u7b2f\0\u7b84\0\u7bd9\0\u7c2e\0\u03a7"+
    "\0\u7c83\0\u7cd8\0\u7d2d\0\u7d82\0\u7dd7\0\u7e2c\0\u7e81\0\u7ed6"+
    "\0\u7f2b\0\u7f80\0\u7fd5\0\u802a\0\u807f\0\u80d4\0\u8129\0\u817e"+
    "\0\u81d3\0\u8228\0\u827d\0\u82d2\0\u8327\0\u837c\0\u83d1\0\u8426"+
    "\0\u847b\0\u84d0\0\u8525\0\u857a\0\u85cf\0\u8624\0\u8679\0\u86ce"+
    "\0\u8723\0\u8778\0\u87cd\0\u8822\0\u8877\0\u88cc\0\u8921\0\u8976"+
    "\0\u3a1b\0\u0352\0\u89cb\0\u8a20\0\u8a75\0\u8aca\0\u8b1f\0\u8b74"+
    "\0\u8bc9\0\u8c1e\0\u8c73\0\u8cc8\0\u8d1d\0\u8d72\0\u8dc7\0\u8e1c"+
    "\0\u8e71\0\u0352\0\u8ec6\0\u8f1b\0\u8f70\0\u8fc5\0\u901a\0\u906f"+
    "\0\u90c4\0\u9119\0\u916e\0\u91c3\0\u9218\0\u926d\0\u92c2\0\u9317"+
    "\0\u936c\0\u93c1\0\u9416\0\u946b\0\u94c0\0\u9515\0\u956a\0\u95bf"+
    "\0\u9614\0\u9669\0\u96be\0\u9713\0\u9768\0\u97bd\0\u9812\0\u9867"+
    "\0\u98bc\0\u9911\0\u9966\0\u99bb\0\u9a10\0\u9a65\0\u9aba\0\u9b0f"+
    "\0\u9b64\0\u9bb9\0\u9c0e\0\u9c63\0\u9cb8\0\u9d0d\0\u9d62\0\u9db7"+
    "\0\u9e0c\0\u9e61\0\u9eb6\0\u9f0b\0\u9f60\0\u9fb5\0\ua00a\0\ua05f"+
    "\0\ua0b4\0\ua109\0\ua15e\0\u7b84\0\ua1b3\0\ua208\0\ua25d\0\ua2b2"+
    "\0\ua307\0\ua35c\0\ua3b1\0\ua406\0\ua45b\0\ua4b0\0\ua505\0\ua55a"+
    "\0\ua5af\0\ua604\0\ua659\0\ua6ae\0\ua703\0\ua758\0\ua7ad\0\ua802"+
    "\0\ua857\0\ua8ac\0\ua901\0\ua956\0\ua9ab\0\uaa00\0\uaa55\0\uaaaa"+
    "\0\uaaff\0\uab54\0\uaba9\0\uabfe\0\uac53\0\uaca8\0\uacfd\0\u8a20"+
    "\0\uad52\0\uada7\0\uadfc\0\uae51\0\uaea6\0\uaefb\0\uaf50\0\uafa5"+
    "\0\uaffa\0\ub04f\0\ub0a4\0\ub0f9\0\ub14e\0\ub1a3\0\ub1f8\0\ub24d"+
    "\0\ub2a2\0\ub2f7\0\ub34c\0\ub3a1\0\ub3f6\0\ub44b\0\ub4a0\0\ub4f5"+
    "\0\ub54a\0\ub59f\0\ub5f4\0\ub649\0\ub69e\0\ub6f3\0\ub748\0\ub79d"+
    "\0\ub7f2\0\ub847\0\ub89c\0\ub8f1\0\ub946\0\u9b0f\0\ub99b\0\ub9f0"+
    "\0\uba45\0\u9cb8\0\uba9a\0\ubaef\0\ubb44\0\ubb99\0\ubbee\0\ubc43"+
    "\0\ubc98\0\ubced\0\ubd42\0\ubd97\0\ubdec\0\ube41\0\ube96\0\ubeeb"+
    "\0\ubf40\0\ubf95\0\ubfea\0\uc03f\0\uc094\0\uc0e9\0\uc13e\0\uc193"+
    "\0\uc1e8\0\uc23d\0\uc292\0\uc2e7\0\uc33c\0\uc391\0\uc3e6\0\uc43b"+
    "\0\uc490\0\uc4e5\0\uc53a\0\uc58f\0\uc5e4\0\uc639\0\uc68e\0\uc6e3"+
    "\0\uc738\0\uc78d\0\uc7e2\0\uc837\0\uc88c\0\uc8e1\0\uc936\0\uc98b"+
    "\0\uc9e0\0\uca35\0\uca8a\0\ucadf\0\ucb34\0\ucb89\0\ucbde\0\ucc33"+
    "\0\ucc88\0\uccdd\0\ucd32\0\ucd87\0\ucddc\0\uce31\0\uce86\0\ucedb"+
    "\0\ucf30\0\ucf85\0\ucfda\0\ud02f\0\ud084\0\ud0d9\0\ud12e\0\ud183"+
    "\0\ud1d8\0\ud22d\0\ud282\0\ud2d7\0\ud32c\0\ud381\0\ud3d6\0\ud42b"+
    "\0\ud480\0\ud4d5\0\ud52a\0\ud57f\0\ud5d4\0\ud629\0\ud67e\0\ud6d3"+
    "\0\ud728\0\ud77d\0\ud7d2\0\ud827\0\u8f70\0\ud87c\0\ud8d1\0\ud926"+
    "\0\ud97b\0\ud9d0\0\uda25\0\uda7a\0\udacf\0\udb24\0\udb79\0\udbce"+
    "\0\udc23\0\udc78\0\udccd\0\udd22\0\udd77\0\uddcc\0\ude21\0\ude76"+
    "\0\udecb\0\udf20\0\udf75\0\udfca\0\ue01f\0\ue074\0\ue0c9\0\ue11e"+
    "\0\ue173\0\ue1c8\0\ue21d\0\ue272\0\ue2c7\0\ue31c\0\ue371\0\ue3c6"+
    "\0\ue41b\0\ue470\0\ue4c5\0\ue51a\0\ue56f\0\ue5c4\0\ue619\0\ue66e"+
    "\0\ue6c3\0\ue718\0\ue76d\0\ue7c2\0\ue817\0\ue86c\0\ue8c1\0\ue916";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[752];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\15"+
    "\1\20\1\21\1\14\1\11\2\14\1\22\1\23\2\14"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\23\1\35\1\23\1\36\1\37\1\40\1\36"+
    "\1\14\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\14\1\54\1\55\1\14"+
    "\1\56\1\57\1\60\1\61\1\62\2\14\2\30\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\14\1\77\1\100\1\101\6\15"+
    "\2\14\1\102\1\103\2\104\1\105\10\104\1\106\107\104"+
    "\1\107\1\104\2\110\1\111\10\110\1\112\57\110\1\113"+
    "\31\110\2\114\1\115\14\114\1\116\36\114\1\117\1\114"+
    "\1\120\4\114\1\121\37\114\2\122\1\123\12\122\1\124"+
    "\1\122\1\125\11\122\1\126\24\122\1\127\1\122\1\130"+
    "\4\122\1\131\3\122\1\132\33\122\2\133\1\134\53\133"+
    "\1\135\1\133\1\136\4\133\1\137\37\133\2\140\1\141"+
    "\10\140\1\142\1\143\107\140\1\144\2\145\1\146\11\145"+
    "\1\147\11\145\1\150\76\145\1\11\2\0\6\11\1\0"+
    "\4\11\2\0\4\11\16\0\27\11\3\0\27\11\3\0"+
    "\1\12\250\0\1\11\2\0\6\14\1\0\1\14\1\151"+
    "\2\14\2\0\4\14\16\0\27\14\3\0\27\14\2\0"+
    "\1\152\2\0\1\152\2\15\1\152\1\15\1\152\1\0"+
    "\4\152\2\0\1\152\1\153\1\154\1\155\1\0\1\156"+
    "\14\0\7\152\1\155\1\153\7\152\1\154\2\152\1\154"+
    "\3\152\3\0\5\152\1\154\11\152\6\15\2\152\2\0"+
    "\1\152\2\0\1\152\1\157\1\160\1\152\1\160\1\152"+
    "\1\0\4\152\2\0\1\161\1\153\1\154\1\155\1\0"+
    "\1\156\14\0\7\152\1\155\1\153\7\152\1\154\2\152"+
    "\1\154\1\152\1\161\1\152\3\0\5\152\1\154\11\152"+
    "\1\157\5\160\2\152\2\0\1\11\2\0\6\14\1\0"+
    "\1\14\1\151\2\14\2\0\4\14\16\0\11\14\1\162"+
    "\3\14\1\163\11\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\3\14\1\164\7\14\1\165\13\14\3\0\27\14\2\0"+
    "\13\166\1\167\2\166\1\170\1\171\12\166\1\172\72\166"+
    "\32\0\1\36\72\0\1\11\2\0\5\14\1\173\1\0"+
    "\1\14\1\151\2\14\2\0\4\14\16\0\10\14\1\174"+
    "\16\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\14\1\151\2\14\2\0\4\14\16\0\5\14\1\175"+
    "\7\14\1\176\2\14\1\177\3\14\1\200\2\14\3\0"+
    "\27\14\26\0\1\36\5\0\1\36\76\0\2\156\1\0"+
    "\1\156\103\0\6\156\34\0\1\36\1\0\1\201\123\0"+
    "\1\202\1\36\73\0\1\203\27\0\1\204\1\36\124\0"+
    "\1\36\1\0\1\205\122\0\1\36\4\0\1\36\117\0"+
    "\1\36\5\0\1\36\64\0\1\11\2\0\6\14\1\0"+
    "\1\14\1\151\2\14\2\0\4\14\16\0\2\14\1\206"+
    "\2\14\1\207\21\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\5\14\1\210\7\14\1\211\4\14\1\212\4\14\3\0"+
    "\27\14\2\0\1\11\2\0\5\14\1\213\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\4\14\1\214\2\14"+
    "\1\215\4\14\1\216\1\14\1\217\3\14\1\220\4\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\5\14\1\221\6\14"+
    "\1\222\5\14\1\223\4\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\7\14\1\224\17\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\1\14\1\225\6\14\1\226\3\14\1\227\1\230"+
    "\11\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\14\1\151\2\14\2\0\4\14\16\0\1\14\1\231"+
    "\6\14\1\232\2\14\1\233\10\14\1\234\1\235\1\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\7\14\1\236\5\14"+
    "\1\237\11\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\14\1\151\2\14\2\0\4\14\16\0\1\240"+
    "\2\14\1\241\7\14\1\242\7\14\1\243\3\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\14\1\151"+
    "\2\14\2\0\4\14\16\0\7\14\1\236\1\244\4\14"+
    "\1\245\11\14\3\0\27\14\2\0\1\11\2\0\5\14"+
    "\1\246\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\1\14\1\247\5\14\1\250\17\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\23\14\1\243\3\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\11\14\1\251\2\14\1\252\12\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\14\1\151"+
    "\2\14\2\0\4\14\16\0\7\14\1\253\5\14\1\254"+
    "\11\14\3\0\27\14\2\0\1\11\2\0\5\14\1\255"+
    "\1\0\1\14\1\151\2\14\2\0\4\14\16\0\1\14"+
    "\1\256\3\14\1\257\21\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\11\14\1\260\15\14\3\0\27\14\2\0\1\11"+
    "\2\0\5\14\1\261\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\1\14\1\262\6\14\1\263\1\264\3\14"+
    "\1\265\11\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\14\1\151\2\14\2\0\4\14\16\0\1\14"+
    "\1\265\13\14\1\266\11\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\22\14\1\267\4\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\15\14\1\270\11\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\5\14\1\271\2\14\1\272\16\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\14\1\151\2\14"+
    "\2\0\4\14\16\0\5\14\1\273\21\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\14\1\151\2\14"+
    "\2\0\4\14\16\0\13\14\1\274\13\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\14\1\151\2\14"+
    "\2\0\4\14\16\0\1\14\1\275\25\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\14\1\151\2\14"+
    "\2\0\4\14\16\0\27\14\3\0\7\14\1\276\17\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\14\1\151\2\14"+
    "\2\0\4\14\16\0\4\14\1\277\2\14\1\300\12\14"+
    "\1\301\4\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\14\1\151\2\14\2\0\4\14\16\0\2\14"+
    "\1\302\24\14\3\0\27\14\2\0\1\11\2\0\5\14"+
    "\1\303\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\1\14\1\304\25\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\1\14\1\305\25\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\1\14\1\306\5\14\1\307\17\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\11\14\1\310\15\14\3\0\14\14\1\311"+
    "\12\14\2\0\1\11\2\0\6\14\1\0\1\14\1\151"+
    "\2\14\2\0\4\14\16\0\7\14\1\312\17\14\3\0"+
    "\27\14\2\0\2\104\1\0\10\104\1\0\107\104\1\0"+
    "\1\104\2\313\1\0\5\313\1\314\56\313\1\315\35\313"+
    "\2\110\1\0\10\110\1\0\57\110\1\0\31\110\2\114"+
    "\1\0\14\114\1\0\36\114\1\0\1\114\1\0\4\114"+
    "\1\0\37\114\16\0\1\316\154\0\1\317\136\0\1\320"+
    "\112\0\1\321\4\0\1\322\51\0\2\122\1\0\12\122"+
    "\1\0\1\122\1\0\11\122\1\0\24\122\1\0\1\122"+
    "\1\0\4\122\1\0\3\122\1\0\33\122\42\0\1\323"+
    "\1\324\1\325\1\326\1\327\1\330\1\331\1\332\1\333"+
    "\1\334\1\335\1\336\3\0\1\337\1\340\1\341\1\0"+
    "\1\342\1\343\54\0\1\344\111\0\1\345\2\0\1\345"+
    "\1\0\1\345\5\0\1\346\1\0\4\345\10\0\1\347"+
    "\5\0\27\345\3\0\17\345\6\0\2\345\50\0\1\350"+
    "\136\0\1\351\112\0\1\352\4\0\1\353\66\0\1\354"+
    "\107\0\2\133\1\0\53\133\1\0\1\133\1\0\4\133"+
    "\1\0\37\133\46\0\1\355\136\0\1\356\112\0\1\357"+
    "\4\0\1\360\51\0\2\140\1\0\10\140\2\0\107\140"+
    "\72\0\1\361\33\0\2\145\1\0\11\145\1\0\11\145"+
    "\1\0\76\145\71\0\1\362\33\0\1\11\2\0\5\11"+
    "\1\363\1\0\4\11\2\0\4\11\16\0\27\11\3\0"+
    "\27\11\2\0\1\152\2\0\6\152\1\0\4\152\2\0"+
    "\4\152\16\0\27\152\3\0\27\152\2\0\1\152\2\0"+
    "\1\152\2\364\1\152\1\364\1\152\1\0\4\152\2\0"+
    "\4\152\1\365\3\0\1\365\11\0\27\152\3\0\17\152"+
    "\6\364\2\152\2\0\1\152\2\0\1\152\2\156\1\152"+
    "\1\156\1\152\1\0\4\152\2\0\2\152\1\154\1\155"+
    "\16\0\7\152\1\155\10\152\1\154\2\152\1\154\3\152"+
    "\3\0\5\152\1\154\11\152\6\156\2\152\2\0\1\152"+
    "\2\0\1\152\2\157\1\152\1\157\1\152\1\0\4\152"+
    "\2\0\2\152\1\154\1\155\1\0\1\156\14\0\7\152"+
    "\1\155\10\152\1\154\2\152\1\154\3\152\3\0\5\152"+
    "\1\154\11\152\6\157\2\152\2\0\1\152\2\0\1\152"+
    "\1\157\1\160\1\152\1\160\1\152\1\0\4\152\2\0"+
    "\1\152\1\366\1\154\1\155\1\0\1\156\14\0\7\152"+
    "\1\155\1\366\7\152\1\154\2\152\1\154\3\152\3\0"+
    "\5\152\1\154\11\152\1\157\5\160\2\152\2\0\1\152"+
    "\2\0\1\152\4\367\1\152\1\0\4\152\2\0\2\152"+
    "\2\367\16\0\1\152\2\367\3\152\2\367\10\152\1\367"+
    "\2\152\1\367\3\152\3\0\1\152\1\367\1\152\1\367"+
    "\1\152\1\367\11\152\6\367\2\152\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\12\14\1\370\14\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\15\14\1\371\11\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\7\14\1\372\17\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\20\14\1\373\6\14\3\0\27\14\2\0\13\166\1\167"+
    "\2\166\1\374\110\166\1\0\122\166\17\0\1\375\105\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\13\14\1\376\13\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\15\14\1\377\11\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\5\14\1\u0100\21\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\13\14\1\u0101\13\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\11\14\1\u0102\15\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\1\14\1\u0103\25\14\3\0\27\14\3\0"+
    "\1\203\27\0\1\204\125\0\1\36\1\0\1\23\70\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\3\14\1\u0104\23\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\12\14\1\u0105\14\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\7\14\1\u0106\17\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\15\14\1\u0107\11\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\4\14\1\u0108\22\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\21\14\1\u0109\5\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\1\14\1\u010a\25\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\4\14\1\243\3\14\1\u010b\16\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\14\1\151"+
    "\2\14\2\0\4\14\16\0\15\14\1\u010c\11\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\14\1\151"+
    "\2\14\2\0\4\14\16\0\11\14\1\u010d\15\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\14\1\151"+
    "\2\14\2\0\4\14\16\0\13\14\1\u010e\13\14\3\0"+
    "\27\14\2\0\1\11\2\0\5\14\1\u010f\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\1\14\1\u0110\20\14"+
    "\1\243\4\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\14\1\151\2\14\2\0\4\14\16\0\5\14"+
    "\1\u0111\3\14\1\u0101\15\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\21\14\1\u0112\5\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\4\14\1\u0113\21\14\1\u0114\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\3\14\1\u0115\1\231\22\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\14\1\151\2\14"+
    "\2\0\4\14\16\0\1\14\1\u0116\25\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\14\1\151\2\14"+
    "\2\0\4\14\16\0\1\14\1\u0117\25\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\14\1\151\2\14"+
    "\2\0\4\14\16\0\13\14\1\u0118\13\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\14\1\151\2\14"+
    "\2\0\4\14\16\0\6\14\1\u0119\20\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\14\1\151\2\14"+
    "\2\0\4\14\16\0\3\14\1\u0115\23\14\3\0\27\14"+
    "\2\0\1\11\2\0\5\14\1\u011a\1\0\1\14\1\151"+
    "\2\14\2\0\4\14\16\0\6\14\1\u011b\20\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\14\1\151"+
    "\2\14\2\0\4\14\16\0\1\14\1\u011c\25\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\14\1\151"+
    "\2\14\2\0\4\14\16\0\4\14\1\u011d\14\14\1\216"+
    "\5\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\14\1\151\2\14\2\0\4\14\16\0\4\14\1\243"+
    "\22\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\14\1\151\2\14\2\0\4\14\16\0\13\14\1\u011e"+
    "\13\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\14\1\151\2\14\2\0\4\14\16\0\21\14\1\u011f"+
    "\5\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\14\1\151\2\14\2\0\2\14\1\u0120\1\14\16\0"+
    "\27\14\3\0\11\14\1\u0121\15\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\3\14\1\u0122\1\u0123\22\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\15\14\1\u0124\11\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\4\14\1\u0125\22\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\10\14\1\u0126\16\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\4\14\1\u0127\22\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\16\14\1\243\10\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\4\14\1\u0119\22\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\11\14\1\u0128\15\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\2\14\1\u0129\3\14\1\u011b\1\14\1\u012a\12\14"+
    "\1\u012b\3\14\3\0\27\14\2\0\1\11\2\0\5\14"+
    "\1\u012c\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\27\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\14\1\151\2\14\2\0\4\14\16\0\2\14\1\u012d"+
    "\24\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\14\1\151\2\14\2\0\4\14\16\0\5\14\1\u012e"+
    "\1\u012f\20\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\14\1\151\2\14\2\0\4\14\16\0\11\14"+
    "\1\u0130\3\14\1\u0131\11\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\7\14\1\u0132\17\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\13\14\1\u0133\13\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\10\14\1\u0134\16\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\15\14\1\u0135\11\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\13\14\1\u0136\13\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\5\14\1\243\21\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\10\14\1\u0137\1\u0138\15\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\21\14\1\u0139\5\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\1\u013a\12\14\1\u013b\13\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\14\1\151\2\14"+
    "\2\0\4\14\16\0\15\14\1\u013c\11\14\3\0\27\14"+
    "\2\0\1\11\2\0\5\14\1\u013d\1\0\1\14\1\151"+
    "\2\14\2\0\4\14\16\0\27\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\5\14\1\u013e\21\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\4\14\1\u013f\16\14\1\u0140\3\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\14\1\151"+
    "\2\14\2\0\4\14\16\0\4\14\1\u0141\22\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\14\1\151"+
    "\2\14\2\0\4\14\16\0\27\14\3\0\10\14\1\u0142"+
    "\16\14\2\0\1\11\2\0\6\14\1\0\1\14\1\151"+
    "\2\14\2\0\4\14\16\0\5\14\1\u0143\21\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\14\1\151"+
    "\2\14\2\0\4\14\16\0\4\14\1\u0144\22\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\14\1\151"+
    "\2\14\2\0\4\14\16\0\1\u0145\12\14\1\u0146\13\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\27\14\3\0\13\14"+
    "\1\u0147\13\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\1\u0148\26\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\14\1\151"+
    "\2\14\2\0\4\14\16\0\27\14\3\0\11\14\1\243"+
    "\15\14\2\0\1\11\2\0\6\14\1\0\1\14\1\151"+
    "\2\14\2\0\4\14\16\0\4\14\1\u0149\14\14\1\u0144"+
    "\5\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\14\1\151\2\14\2\0\4\14\16\0\13\14\1\u014a"+
    "\13\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\14\1\151\2\14\2\0\4\14\16\0\12\14\1\u014b"+
    "\10\14\1\u014c\3\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\13\14\1\u014d\13\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\27\14\3\0\4\14\1\u014e\22\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\1\14\1\u014f\25\14\3\0\27\14\6\0\4\u0150\12\0"+
    "\2\u0150\17\0\2\u0150\3\0\2\u0150\10\0\1\u0150\2\0"+
    "\1\u0150\7\0\1\u0150\1\0\1\u0150\1\0\1\u0150\11\0"+
    "\6\u0150\10\0\4\u0151\12\0\2\u0151\17\0\2\u0151\3\0"+
    "\2\u0151\10\0\1\u0151\2\0\1\u0151\7\0\1\u0151\1\0"+
    "\1\u0151\1\0\1\u0151\11\0\6\u0151\52\0\1\u0152\136\0"+
    "\1\u0153\127\0\1\u0154\113\0\1\u0155\123\0\1\u0156\1\0"+
    "\1\u0157\3\0\1\u0158\55\0\1\u0159\33\0\1\u015a\3\0"+
    "\1\u015b\1\0\1\u015c\131\0\1\u015d\55\0\1\u015e\35\0"+
    "\1\u015f\2\0\1\u0160\1\0\1\u0161\127\0\1\u0162\1\u0163"+
    "\4\0\1\u0164\111\0\1\u0165\116\0\1\u0166\6\0\1\u0167"+
    "\4\0\1\u0168\122\0\1\u0169\10\0\1\u016a\1\u016b\106\0"+
    "\1\u016c\1\0\1\u016d\125\0\1\u016e\1\u016f\121\0\1\u0170"+
    "\115\0\1\u0171\134\0\1\u0172\122\0\1\u0173\63\0\1\u0174"+
    "\32\0\1\u0175\3\0\1\u0176\130\0\1\u0177\114\0\1\u0178"+
    "\5\0\1\u0179\53\0\34\345\1\347\70\345\3\0\1\345"+
    "\2\0\1\345\1\0\1\345\7\0\4\345\10\0\1\347"+
    "\5\0\27\345\3\0\17\345\6\0\2\345\50\0\1\u017a"+
    "\136\0\1\u017b\127\0\1\u017c\113\0\1\u017d\120\0\1\u017e"+
    "\3\0\1\u017f\120\0\1\u0180\136\0\1\u0181\127\0\1\u0182"+
    "\113\0\1\u0183\52\0\1\11\2\0\1\11\4\u0184\1\11"+
    "\1\0\4\11\2\0\2\11\2\u0184\16\0\1\11\2\u0184"+
    "\3\11\2\u0184\10\11\1\u0184\2\11\1\u0184\3\11\3\0"+
    "\1\11\1\u0184\1\11\1\u0184\1\11\1\u0184\11\11\6\u0184"+
    "\2\11\2\0\1\152\2\0\1\152\2\364\1\152\1\364"+
    "\1\152\1\0\4\152\2\0\2\152\1\154\1\152\16\0"+
    "\20\152\1\154\2\152\1\154\3\152\3\0\5\152\1\154"+
    "\11\152\6\364\2\152\6\0\2\364\1\0\1\364\103\0"+
    "\6\364\4\0\1\152\2\0\1\152\4\367\1\152\1\0"+
    "\4\152\2\0\1\152\1\366\2\367\16\0\1\152\2\367"+
    "\3\152\2\367\1\366\7\152\1\367\2\152\1\367\3\152"+
    "\3\0\1\152\1\367\1\152\1\367\1\152\1\367\11\152"+
    "\6\367\2\152\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\27\14\3\0\4\14"+
    "\1\u0185\22\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\10\14\1\u0186\16\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\1\14\1\u0187\2\14\16\0\27\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\7\14\1\u0188\17\14"+
    "\3\0\27\14\44\0\1\374\10\0\2\374\66\0\1\u0189"+
    "\106\0\1\11\2\0\6\14\1\0\1\14\1\151\2\14"+
    "\2\0\4\14\16\0\6\14\1\u018a\20\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\14\1\151\2\14"+
    "\2\0\4\14\16\0\1\14\1\u018b\25\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\14\1\151\2\14"+
    "\2\0\4\14\16\0\15\14\1\u018c\11\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\14\1\151\2\14"+
    "\2\0\4\14\16\0\3\14\1\u018d\23\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\14\1\151\2\14"+
    "\2\0\4\14\16\0\4\14\1\u018e\22\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\14\1\151\2\14"+
    "\2\0\4\14\16\0\10\14\1\u014e\16\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\14\1\151\2\14"+
    "\2\0\4\14\16\0\4\14\1\u018f\22\14\3\0\27\14"+
    "\2\0\1\11\2\0\5\14\1\u0190\1\0\1\14\1\151"+
    "\2\14\2\0\4\14\16\0\27\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\1\14\1\u0191\25\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\10\14\1\u0192\16\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\7\14\1\u0193\17\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\7\14\1\u0117\17\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\4\14\1\u0194\22\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\23\14\1\u018d\3\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\5\14\1\u0195\21\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\4\14\1\231\22\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\6\14\1\u0196\20\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\7\14\1\u0197\17\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\13\14\1\u0198\13\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\15\14\1\u0199\11\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\7\14\1\u019a\17\14\3\0\27\14\2\0"+
    "\1\11\2\0\5\14\1\u019b\1\0\1\14\1\151\2\14"+
    "\2\0\4\14\16\0\27\14\3\0\27\14\2\0\1\11"+
    "\2\0\5\14\1\u019c\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\27\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\7\14\1\243\17\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\3\14\1\u019d\23\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\5\14\1\u0193\21\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\3\14\1\236\1\u019e\22\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\14\14\1\243\12\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\1\u0193\26\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\15\14\1\u019f\11\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\10\14\1\u01a0\16\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\7\14\1\u01a1\17\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\12\14\1\u0193\14\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\10\14\1\u01a2\4\14\1\u01a3\11\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\11\14\1\u01a4\15\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\1\14\1\u01a5\25\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\4\14\1\u01a6\22\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\7\14\1\u01a7\17\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\2\14\1\u01a8\24\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\15\14\1\u0193\11\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\10\14\1\243\16\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\11\14\1\u01a9\15\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\10\14\1\u0115\16\14\3\0\27\14\2\0"+
    "\1\11\2\0\5\14\1\u01aa\1\0\1\14\1\151\2\14"+
    "\2\0\4\14\16\0\27\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\7\14\1\u01ab\17\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\1\14\1\u01ac\25\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\2\14\1\u01ad\24\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\10\14\1\u0194\16\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\3\14\1\u01ae\23\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\17\14\1\u01af\7\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\24\14\1\u01b0\2\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\4\14\1\u01b1\22\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\10\14\1\u0138\16\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\6\14\1\u01b2\20\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\3\14\1\u010f\23\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\1\14\1\u0195\25\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\1\14\1\u01b3\25\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\1\14\1\u01b4\25\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\20\14\1\243\6\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\7\14\1\u014e\17\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\21\14\1\u01b5\5\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\3\14\1\u01b6\23\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\1\u01b7\26\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\12\14\1\u01b8\14\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\1\14\1\u01b9\25\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\27\14\3\0\17\14\1\u01ba\1\u01bb\1\14\1\u01bc\4\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\14\1\151\2\14"+
    "\2\0\4\14\16\0\11\14\1\u01bd\15\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\14\1\151\2\14"+
    "\2\0\4\14\16\0\1\14\1\u01be\5\14\1\u0144\17\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\27\14\3\0\11\14"+
    "\1\u0144\15\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\11\14\1\u01bf\15\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\2\14\1\u01c0\24\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\4\14\1\u01c1\22\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\7\14\1\u01c2\17\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\2\14\1\u01c3\24\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\14\14\1\u0144\12\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\12\14\1\u0139\14\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\3\14\1\u01c4\16\0\27\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\14\1\151"+
    "\2\14\2\0\4\14\16\0\7\14\1\u01c5\17\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\14\1\151"+
    "\2\14\2\0\4\14\16\0\4\14\1\u01c6\22\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\14\1\151"+
    "\2\14\2\0\3\14\1\u01c7\16\0\27\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\14\1\151\2\14"+
    "\2\0\4\14\16\0\17\14\1\u01c8\7\14\3\0\27\14"+
    "\6\0\4\u01c9\12\0\2\u01c9\17\0\2\u01c9\3\0\2\u01c9"+
    "\10\0\1\u01c9\2\0\1\u01c9\7\0\1\u01c9\1\0\1\u01c9"+
    "\1\0\1\u01c9\11\0\6\u01c9\10\0\4\u01ca\12\0\2\u01ca"+
    "\17\0\2\u01ca\3\0\2\u01ca\10\0\1\u01ca\2\0\1\u01ca"+
    "\7\0\1\u01ca\1\0\1\u01ca\1\0\1\u01ca\11\0\6\u01ca"+
    "\67\0\1\u01cb\66\0\1\u01cc\140\0\1\u01cd\134\0\1\u0154"+
    "\115\0\1\u01ce\3\0\1\u01cf\145\0\1\u01d0\117\0\1\u01d1"+
    "\110\0\1\u01d2\5\0\1\u01d3\115\0\1\u01d4\127\0\1\u01d5"+
    "\127\0\1\u01d6\120\0\1\u01d7\117\0\1\u01d8\125\0\1\u01d9"+
    "\132\0\1\u01da\130\0\1\u01db\116\0\1\u01dc\3\0\1\u01dd"+
    "\133\0\1\u01de\125\0\1\u01df\104\0\1\u01e0\2\0\1\u01e1"+
    "\21\0\1\u01e2\106\0\1\u01e3\115\0\1\u01e4\136\0\1\u01e5"+
    "\5\0\1\u01e6\51\0\1\u01e7\165\0\1\u01e8\116\0\1\u01e9"+
    "\2\0\1\u01ea\14\0\1\u01eb\116\0\1\u01ec\117\0\1\u01ed"+
    "\4\0\1\u01ee\124\0\1\u01ef\114\0\1\u01f0\7\0\1\u01f1"+
    "\126\0\1\u01f2\107\0\1\u01f3\137\0\1\u01f4\114\0\1\u01f5"+
    "\15\0\1\u01f6\1\0\1\u01f7\103\0\1\u01f8\127\0\1\u01f9"+
    "\130\0\1\u01fa\3\0\1\u01fb\114\0\1\u01fc\2\0\1\u0160"+
    "\121\0\1\u01fd\124\0\1\u01fe\140\0\1\u01ff\66\0\1\u0200"+
    "\140\0\1\u0201\134\0\1\u017c\63\0\1\u0202\167\0\1\u0203"+
    "\134\0\1\u0204\66\0\1\u0205\140\0\1\u0206\134\0\1\u0182"+
    "\53\0\1\11\2\0\1\11\4\u0207\1\11\1\0\4\11"+
    "\2\0\2\11\2\u0207\16\0\1\11\2\u0207\3\11\2\u0207"+
    "\10\11\1\u0207\2\11\1\u0207\3\11\3\0\1\11\1\u0207"+
    "\1\11\1\u0207\1\11\1\u0207\11\11\6\u0207\2\11\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\13\14\1\300\13\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\7\14\1\u0208\17\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\11\14\1\u0209\15\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\23\14\1\u020a\3\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\4\14\1\u020b\22\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\4\14\1\u020c\22\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\5\14\1\u0144\21\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\15\14\1\u020d\11\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\5\14\1\u020e\21\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\1\u020f\26\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\17\14\1\243\7\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\7\14\1\u0210\17\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\11\14\1\u0211\15\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\4\14\1\u0193\22\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\14\14\1\u0212\12\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\3\14\1\u0213\23\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\16\14\1\u0214\10\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\15\14\1\54\11\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\5\14\1\u0215\21\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\11\14\1\u0216\15\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\3\14\1\u0193\23\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\11\14\1\u0217\15\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\20\14\1\u0218\6\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\13\14\1\u0219\13\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\7\14\1\u021a\17\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\5\14\1\u021b\21\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\13\14\1\u021c\13\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\27\14\3\0\11\14\1\u01a0\15\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\1\14\1\u021d\25\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\5\14\1\u021e\21\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\1\14\1\u021f\25\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\24\14\1\u0108\2\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\12\14\1\u0220\14\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\4\14\1\u0115\22\14\3\0\27\14\2\0\1\11"+
    "\2\0\5\14\1\u0221\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\27\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\10\14\1\u0108\16\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\7\14\1\u0222\17\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\1\14\1\u0223\25\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\1\14\1\212\25\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\7\14\1\u0224\17\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\4\14\1\u0225\22\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\10\14\1\u0226\16\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\4\14\1\u0227\22\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\15\14\1\u0228\11\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\15\14\1\u0229\11\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\11\14\1\u022a\15\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\11\14\1\u022b\15\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\22\14\1\u022c\4\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\27\14\3\0\3\14\1\u022d\23\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\27\14\3\0\21\14\1\u01ba\5\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\27\14\3\0\23\14\1\u01ba\3\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\13\14\1\u022e\13\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\27\14\3\0\25\14\1\u022f\1\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\13\14\1\u0230\13\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\15\14\1\u0231\11\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\1\14\1\u0232\25\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\6\14\1\300\20\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\7\14\1\u018c\17\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\25\14\1\u0233\1\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\5\14\1\u0234\21\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\27\14\3\0\17\14\1\u0235\1\u01bb\1\14\1\u01bc\4\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\14\1\151\2\14"+
    "\2\0\4\14\16\0\5\14\1\175\21\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\14\1\151\2\14"+
    "\2\0\4\14\16\0\27\14\3\0\7\14\1\u0236\2\14"+
    "\1\u0237\14\14\43\0\1\u01cd\3\0\1\u0154\62\0\6\u01cc"+
    "\1\0\1\u0238\1\0\1\u01cc\1\u0238\1\u01cc\1\u0238\4\u01cc"+
    "\2\u0238\1\0\2\u0238\1\0\1\u0238\2\0\2\u0238\1\0"+
    "\2\u0238\27\u01cc\1\0\2\u0238\27\u01cc\20\0\1\u0239\152\0"+
    "\1\u023a\136\0\1\u023b\117\0\1\u01dd\1\0\1\u023c\61\0"+
    "\1\u023d\172\0\1\u023e\110\0\1\u023f\130\0\1\u0240\127\0"+
    "\1\u0241\116\0\1\u01dd\130\0\1\u01dc\117\0\1\u0242\130\0"+
    "\1\u0243\126\0\1\u0160\133\0\1\u0244\112\0\1\u01da\136\0"+
    "\1\u01da\116\0\1\u0245\135\0\1\u0246\52\0\1\u0247\124\0"+
    "\1\u0248\166\0\1\u0249\117\0\1\u024a\124\0\1\u024b\143\0"+
    "\1\u024c\102\0\1\u01da\137\0\1\u024d\111\0\1\u024e\133\0"+
    "\1\u024f\132\0\1\u0250\127\0\1\u01dd\113\0\1\u0251\134\0"+
    "\1\u01da\122\0\1\u0252\113\0\1\u0253\127\0\1\u0254\117\0"+
    "\1\u0255\131\0\1\u0256\135\0\1\u01da\112\0\1\u01da\123\0"+
    "\1\u0257\120\0\1\u0258\133\0\1\u0243\115\0\1\u01e7\147\0"+
    "\1\u0259\104\0\1\u025a\14\0\1\u025b\112\0\1\u01dd\126\0"+
    "\1\u025c\116\0\1\u025d\120\0\1\u0201\3\0\1\u017c\62\0"+
    "\6\u0200\1\0\1\u025e\1\0\1\u0200\1\u025e\1\u0200\1\u025e"+
    "\4\u0200\2\u025e\1\0\2\u025e\1\0\1\u025e\2\0\2\u025e"+
    "\1\0\2\u025e\27\u0200\1\0\2\u025e\27\u0200\20\0\1\u025f"+
    "\154\0\1\u0260\133\0\1\u0261\110\0\1\u0206\3\0\1\u0182"+
    "\62\0\6\u0205\1\0\1\u0262\1\0\1\u0205\1\u0262\1\u0205"+
    "\1\u0262\4\u0205\2\u0262\1\0\2\u0262\1\0\1\u0262\2\0"+
    "\2\u0262\1\0\2\u0262\27\u0205\1\0\2\u0262\27\u0205\20\0"+
    "\1\u0263\106\0\1\11\2\0\1\11\4\u0264\1\11\1\0"+
    "\4\11\2\0\2\11\2\u0264\16\0\1\11\2\u0264\3\11"+
    "\2\u0264\10\11\1\u0264\2\11\1\u0264\3\11\3\0\1\11"+
    "\1\u0264\1\11\1\u0264\1\11\1\u0264\11\11\6\u0264\2\11"+
    "\2\0\1\11\2\0\6\14\1\0\1\14\1\151\2\14"+
    "\2\0\4\14\16\0\1\14\1\u0265\25\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\14\1\151\2\14"+
    "\2\0\4\14\16\0\2\14\1\u0266\24\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\14\1\151\2\14"+
    "\2\0\4\14\16\0\11\14\1\u0267\15\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\14\1\151\2\14"+
    "\2\0\4\14\16\0\11\14\1\u0268\15\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\14\1\151\2\14"+
    "\2\0\4\14\16\0\27\14\3\0\21\14\1\u0269\1\u01bc"+
    "\4\14\2\0\1\11\2\0\6\14\1\0\1\14\1\151"+
    "\2\14\2\0\4\14\16\0\5\14\1\u018d\21\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\14\1\151"+
    "\2\14\2\0\4\14\16\0\1\14\1\u026a\25\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\14\1\151"+
    "\2\14\2\0\4\14\16\0\7\14\1\u026b\17\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\14\1\151"+
    "\2\14\2\0\4\14\16\0\1\14\1\u026c\25\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\14\1\151"+
    "\2\14\2\0\4\14\16\0\6\14\1\u0193\20\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\14\1\151"+
    "\2\14\2\0\4\14\16\0\5\14\1\u026d\21\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\14\1\151"+
    "\2\14\2\0\4\14\16\0\11\14\1\u026e\15\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\14\1\151"+
    "\2\14\2\0\4\14\16\0\13\14\1\243\13\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\14\1\151"+
    "\2\14\2\0\4\14\16\0\5\14\1\u026f\21\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\14\1\151"+
    "\2\14\2\0\4\14\16\0\13\14\1\u0270\13\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\14\1\151"+
    "\2\14\2\0\4\14\16\0\7\14\1\u0271\17\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\14\1\151"+
    "\2\14\2\0\4\14\16\0\20\14\1\u019d\6\14\3\0"+
    "\27\14\2\0\1\11\2\0\6\14\1\0\1\14\1\151"+
    "\2\14\2\0\4\14\16\0\1\u0272\26\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\14\1\151\2\14"+
    "\2\0\4\14\16\0\4\14\1\u0273\22\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\14\1\151\2\14"+
    "\2\0\4\14\16\0\11\14\1\u0274\15\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\14\1\151\2\14"+
    "\2\0\4\14\16\0\13\14\1\u0275\13\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\14\1\151\2\14"+
    "\2\0\4\14\16\0\23\14\1\u0276\3\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\14\1\151\2\14"+
    "\2\0\4\14\16\0\10\14\1\u0277\16\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\14\1\151\2\14"+
    "\2\0\4\14\16\0\12\14\1\u0278\14\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\14\1\151\2\14"+
    "\2\0\4\14\16\0\10\14\1\236\16\14\3\0\27\14"+
    "\2\0\1\11\2\0\6\14\1\0\1\14\1\151\2\14"+
    "\2\0\2\14\1\u0279\1\14\16\0\27\14\3\0\4\14"+
    "\1\u027a\22\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\12\14\1\u0108\14\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\6\14\1\u027b\20\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\11\14\1\u027c\15\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\10\14\1\u027d\16\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\11\14\1\u01ad\15\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\13\14\1\u027e\13\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\10\14\1\u027f\16\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\3\14\1\u0280\23\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\13\14\1\u0281\13\14"+
    "\3\0\27\14\2\0\1\11\2\0\3\14\1\u0282\2\14"+
    "\1\0\1\14\1\151\2\14\2\0\4\14\16\0\27\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\5\14\1\u0283\21\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\11\14\1\u0284\15\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\11\14\1\u0285\15\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\12\14\1\u0144\14\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\10\14\1\u0144\16\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\25\14\1\u014e\1\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\21\14\1\u0144\5\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\7\14\1\u0286\17\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\27\14\3\0\1\14"+
    "\1\u0287\1\14\1\u022d\23\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\14\1\151\2\14\2\0\4\14\16\0\7\14"+
    "\1\300\17\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\14\1\151\2\14\2\0\4\14\16\0\1\14"+
    "\1\u0233\25\14\3\0\27\14\20\0\1\u01cc\157\0\1\u0288"+
    "\132\0\1\u01f4\122\0\1\u01da\121\0\1\u0160\131\0\1\u0254"+
    "\116\0\1\u0289\122\0\1\u028a\122\0\1\u01dd\122\0\1\u028b"+
    "\134\0\1\u01f5\131\0\1\u01dd\126\0\1\u028c\121\0\1\u028d"+
    "\114\0\1\u028e\130\0\1\u028f\115\0\1\u0290\125\0\1\u0291"+
    "\125\0\1\u0292\125\0\1\u0293\123\0\1\u01da\141\0\1\u023d"+
    "\110\0\1\u0294\124\0\1\u0295\132\0\1\u0296\116\0\1\u0160"+
    "\120\0\1\u0161\130\0\1\u01da\120\0\1\u0297\126\0\1\u0298"+
    "\130\0\1\u0299\63\0\1\u029a\157\0\1\u029b\132\0\1\u029c"+
    "\124\0\1\u029d\116\0\1\u029e\134\0\1\u029f\67\0\1\u0200"+
    "\165\0\1\u02a0\126\0\1\u02a1\61\0\1\u0205\106\0\1\11"+
    "\2\0\1\11\4\14\1\11\1\0\4\11\2\0\2\11"+
    "\2\14\16\0\1\11\2\14\3\11\2\14\10\11\1\14"+
    "\2\11\1\14\3\11\3\0\1\11\1\14\1\11\1\14"+
    "\1\11\1\14\11\11\6\14\2\11\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\13\14\1\u0144\13\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\5\14\1\u02a2\21\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\13\14\1\u02a3\13\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\15\14\1\u0265\11\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\27\14\3\0\24\14\1\u01ba\2\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\6\14\1\u0195\20\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\13\14\1\u02a4\13\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\13\14\1\u0193\13\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\15\14\1\u02a5\11\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\7\14\1\u02a6\17\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\7\14\1\u01a0\17\14\3\0\27\14\2\0\1\11\2\0"+
    "\5\14\1\u0115\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\27\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\14\1\151\2\14\2\0\4\14\16\0\27\14"+
    "\3\0\15\14\1\u02a7\11\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\14\1\151\2\14\2\0\4\14\16\0\7\14"+
    "\1\u02a8\17\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\14\1\151\2\14\2\0\4\14\16\0\27\14"+
    "\3\0\1\14\1\u02a9\1\u02aa\24\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\4\14\1\u026f\22\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\6\14\1\u0112\20\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\1\14\1\u02ab\25\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\27\14\3\0\1\u02ac\26\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\14\1\151\2\14\2\0\4\14\16\0\7\14"+
    "\1\265\17\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\14\1\151\2\14\2\0\4\14\16\0\10\14"+
    "\1\u02ad\16\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\14\1\151\2\14\2\0\4\14\16\0\13\14"+
    "\1\u02ae\13\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\14\1\151\2\14\2\0\4\14\16\0\4\14"+
    "\1\u02af\22\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\14\1\151\2\14\2\0\4\14\16\0\15\14"+
    "\1\u0215\11\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\14\1\151\2\14\2\0\4\14\16\0\10\14"+
    "\1\u02b0\16\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\14\1\151\2\14\2\0\4\14\16\0\7\14"+
    "\1\u02b1\17\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\14\1\151\2\14\2\0\4\14\16\0\7\14"+
    "\1\u018d\17\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\14\1\151\2\14\2\0\4\14\16\0\7\14"+
    "\1\u0144\17\14\3\0\27\14\2\0\1\11\2\0\6\14"+
    "\1\0\1\14\1\151\2\14\2\0\4\14\16\0\27\14"+
    "\3\0\1\14\1\u02b2\25\14\2\0\1\11\2\0\5\14"+
    "\1\u02b3\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\27\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\14\1\151\2\14\2\0\4\14\16\0\5\14\1\u02b4"+
    "\21\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\14\1\151\2\14\2\0\4\14\16\0\4\14\1\u02b0"+
    "\22\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\14\1\151\2\14\2\0\4\14\16\0\7\14\1\u02b5"+
    "\17\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\14\1\151\2\14\2\0\4\14\16\0\13\14\1\u02b6"+
    "\13\14\3\0\27\14\2\0\1\11\2\0\6\14\1\0"+
    "\1\14\1\151\2\14\2\0\4\14\16\0\10\14\1\u02b7"+
    "\16\14\3\0\27\14\51\0\1\u02b8\132\0\1\u0295\112\0"+
    "\1\u02b9\130\0\1\u02ba\126\0\1\u02bb\130\0\1\u02bc\124\0"+
    "\1\u02bd\116\0\1\u01fc\120\0\1\u02be\143\0\1\u02bf\105\0"+
    "\1\u01e8\3\0\1\u02c0\130\0\1\u02c1\126\0\1\u0255\115\0"+
    "\1\u01dd\123\0\1\u0160\131\0\1\u01da\135\0\1\u02c2\111\0"+
    "\1\u02c3\126\0\1\u024d\120\0\1\u0160\126\0\1\u02c4\123\0"+
    "\1\u02c5\123\0\1\u025d\135\0\1\u023c\114\0\1\u02c6\55\0"+
    "\26\u02a1\1\u01da\76\u02a1\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\1\14\1\u02c7\25\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\7\14\1\u0138\17\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\4\14\1\u0101\22\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\13\14\1\u02c8\13\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\13\14\1\u0195\13\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\27\14\3\0\14\14"+
    "\1\u02c9\12\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\13\14\1\u02ca\13\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\10\14\1\u02cb\16\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\1\14\1\u02cc\25\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\6\14\1\u0108\20\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\14\14\1\u02cd\12\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\15\14\1\u02ce\11\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\4\14\1\u01a0\22\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\7\14\1\u02cf\17\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\22\14\1\243\4\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\13\14\1\u02d0\13\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\15\14\1\u02d1\11\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\23\14\1\u02d2\3\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\1\14\1\u02d3\25\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\16\14\1\u0144\10\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\6\14\1\u0139\20\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\1\14\1\u02d4\25\14"+
    "\3\0\27\14\61\0\1\u02bb\115\0\1\u024d\140\0\1\u01da"+
    "\125\0\1\u01da\111\0\1\u02ba\122\0\1\u01ee\125\0\1\u02d5"+
    "\63\0\1\u02d6\170\0\1\u02d7\113\0\1\u01db\124\0\1\u02c4"+
    "\127\0\1\u02d8\124\0\1\u02ba\131\0\1\u02d9\51\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\5\14\1\u02da\21\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\11\14\1\u02db\15\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\27\14\3\0\4\14\1\u02dc\22\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\4\14\1\u019d\22\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\1\14\1\u02dd\25\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\6\14\1\u02de\20\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\11\14\1\u0101\15\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\1\14\1\u02ae\25\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\20\14\1\u0193\6\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\4\14\1\u018d\22\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\13\14\1\u02df\13\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\23\14\1\u01c3\3\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\22\14\1\u0144\4\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\1\u02e0\26\14\3\0\27\14\47\0\1\u01f5\127\0"+
    "\1\u02e1\132\0\1\u024d\117\0\1\u01f4\116\0\1\u02e2\61\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\22\14\1\u01a0\4\14\3\0\27\14\2\0"+
    "\1\11\2\0\6\14\1\0\1\14\1\151\2\14\2\0"+
    "\4\14\16\0\27\14\3\0\26\14\1\u02af\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\27\14\3\0\1\14\1\u02e3\25\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\3\14\1\u02e4\23\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\17\14\1\u02e5\7\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\4\14\1\u02e6\22\14\3\0\27\14\2\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\21\14\1\u02e7\5\14\3\0\27\14\50\0\1\u02e8"+
    "\130\0\1\u02a1\52\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\15\14\1\u02e9\11\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\3\14\1\u01a0\23\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\1\14\1\u02ea\25\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\7\14\1\u02eb\17\14"+
    "\3\0\27\14\2\0\1\11\2\0\6\14\1\0\1\14"+
    "\1\151\2\14\2\0\4\14\16\0\7\14\1\u02ec\17\14"+
    "\3\0\27\14\47\0\1\u01da\11\0\1\u0254\45\0\1\11"+
    "\2\0\6\14\1\0\1\14\1\151\2\14\2\0\4\14"+
    "\16\0\1\u02ed\26\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\12\14\1\u026f\14\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\25\14\1\u02d0\1\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\20\14\1\u01ba\6\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\21\14\1\u02ee\5\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\15\14\1\u02ef\11\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\13\14\1\u02f0\13\14\3\0\27\14\2\0\1\11\2\0"+
    "\6\14\1\0\1\14\1\151\2\14\2\0\4\14\16\0"+
    "\7\14\1\u027a\17\14\3\0\27\14\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[59755];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\2\1\1\11\5\1\1\11\6\1\2\11\4\1"+
    "\1\11\24\1\1\11\16\1\2\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\11\1\1\1\11\5\1"+
    "\1\11\10\1\1\11\4\1\1\11\2\1\1\11\1\1"+
    "\1\11\1\1\1\11\15\1\2\0\1\11\11\1\2\0"+
    "\1\11\106\1\1\11\2\1\1\11\25\0\1\11\2\0"+
    "\1\11\11\0\2\11\2\1\1\0\132\1\64\0\5\1"+
    "\1\11\77\1\1\0\1\11\1\0\1\1\15\0\1\11"+
    "\45\0\1\1\4\0\1\1\1\0\61\1\15\0\1\1"+
    "\20\0\1\1\15\0\44\1\32\0\27\1\4\0\1\1"+
    "\11\0\16\1\5\0\7\1\2\0\5\1\1\0\10\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[752];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */private char zzBuffer[];/** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */

	/**
     * Token type specifying we're in a JavaScript multiline comment.
     */
    static final int INTERNAL_IN_JS_MLC				= -8;

    /**
     * Token type specifying we're in a JavaScript documentation comment.
     */
    static final int INTERNAL_IN_JS_COMMENT_DOCUMENTATION = -9;

    /**
     * Token type specifying we're in an invalid multi-line JS string.
     */
    static final int INTERNAL_IN_JS_STRING_INVALID	= -10;

    /**
     * Token type specifying we're in a valid multi-line JS string.
     */
    static final int INTERNAL_IN_JS_STRING_VALID		= -11;

    /**
     * Token type specifying we're in an invalid multi-line JS single-quoted string.
     */
    static final int INTERNAL_IN_JS_CHAR_INVALID	= -12;

    /**
     * Token type specifying we're in a valid multi-line JS single-quoted string.
     */
    static final int INTERNAL_IN_JS_CHAR_VALID		= -13;

    /**
     * Token type specifying we're in a valid multi-line template literal.
     */
    static final int INTERNAL_IN_JS_TEMPLATE_LITERAL_VALID = -23;

    /**
     * Token type specifying we're in an invalid multi-line template literal.
     */
    static final int INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID = -24;

    /**
     * When in the JS_STRING state, whether the current string is valid.
     */
    private boolean validJSString;

    /**
     * Language state set on JS tokens.  Must be 0.
     */
    private static final int LANG_INDEX_DEFAULT	= 0;

    private Stack<Boolean> varDepths;

    /**
     * Constructor.  This must be here because JFlex does not generate a
     * no-parameter constructor.
     */
    public SEJavaScriptTokenMaker() {
        super();
    }


    /**
     * Adds the token specified to the current linked list of tokens as an
     * "end token;" that is, at <code>zzMarkedPos</code>.
     *
     * @param tokenType The token's type.
     */
    private void addEndToken(int tokenType) {
        addToken(zzMarkedPos,zzMarkedPos, tokenType);
    }


    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     * @see #addToken(int, int, int)
     */
    private void addHyperlinkToken(int start, int end, int tokenType) {
        int so = start + offsetShift;
        addToken(zzBuffer, start,end, tokenType, so, true);
    }


    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     */
    private void addToken(int tokenType) {
        addToken(zzStartRead, zzMarkedPos-1, tokenType);
    }


    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     */
    private void addToken(int start, int end, int tokenType) {
        int so = start + offsetShift;
        addToken(zzBuffer, start,end, tokenType, so);
    }


    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param array The character array.
     * @param start The starting offset in the array.
     * @param end The ending offset in the array.
     * @param tokenType The token's type.
     * @param startOffset The offset in the document at which this token
     *                    occurs.
     */
    @Override
    public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
        super.addToken(array, start,end, tokenType, startOffset);
        zzStartRead = zzMarkedPos;
    }


    /**
     * Returns the closest {@link TokenTypes} "standard" token type for a given
     * "internal" token type (e.g. one whose value is <code>&lt; 0</code>).
     */
     @Override
    public int getClosestStandardTokenTypeForInternalType(int type) {
        switch (type) {
            case INTERNAL_IN_JS_MLC:
                return TokenTypes.COMMENT_MULTILINE;
            case INTERNAL_IN_JS_COMMENT_DOCUMENTATION:
                return TokenTypes.COMMENT_DOCUMENTATION;
            case INTERNAL_IN_JS_STRING_INVALID:
            case INTERNAL_IN_JS_STRING_VALID:
            case INTERNAL_IN_JS_CHAR_INVALID:
            case INTERNAL_IN_JS_CHAR_VALID:
                return TokenTypes.LITERAL_STRING_DOUBLE_QUOTE;
            case INTERNAL_IN_JS_TEMPLATE_LITERAL_VALID:
                return TokenTypes.LITERAL_BACKQUOTE;
            case INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID:
                return TokenTypes.ERROR_STRING_DOUBLE;
        }
        return type;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String[] getLineCommentStartAndEnd(int languageIndex) {
        return new String[] { "//", null };
    }


    /**
     * Returns the first token in the linked list of tokens generated
     * from <code>text</code>.  This method must be implemented by
     * subclasses so they can correctly implement syntax highlighting.
     *
     * @param text The text from which to get tokens.
     * @param initialTokenType The token type we should start with.
     * @param startOffset The offset into the document at which
     *        <code>text</code> starts.
     * @return The first <code>Token</code> in a linked list representing
     *         the syntax highlighted text.
     */
    @Override
    public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

        resetTokenList();
        this.offsetShift = -text.offset + startOffset;
        validJSString = true;
        int languageIndex = LANG_INDEX_DEFAULT;

        // Start off in the proper state.
        int state;
        switch (initialTokenType) {
            case INTERNAL_IN_JS_MLC:
                state = JS_MLC;
                break;
            case INTERNAL_IN_JS_COMMENT_DOCUMENTATION:
                state = JS_DOCCOMMENT;
                start = text.offset;
                break;
            case INTERNAL_IN_JS_STRING_INVALID:
                state = JS_STRING;
                validJSString = false;
                break;
            case INTERNAL_IN_JS_STRING_VALID:
                state = JS_STRING;
                break;
            case INTERNAL_IN_JS_CHAR_INVALID:
                state = JS_CHAR;
                validJSString = false;
                break;
            case INTERNAL_IN_JS_CHAR_VALID:
                state = JS_CHAR;
                break;
            case INTERNAL_IN_JS_TEMPLATE_LITERAL_VALID:
                state = JS_TEMPLATE_LITERAL;
                validJSString = true;
                break;
            case INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID:
                state = JS_TEMPLATE_LITERAL;
                validJSString = false;
                break;
            default:
                // Shouldn't happen
                state = YYINITIAL;
        }

        setLanguageIndex(languageIndex);
        start = text.offset;
        s = text;
        try {
            yyreset(zzReader);
            yybegin(state);
            return yylex();
        } catch (IOException ioe) {
            ioe.printStackTrace();
            return new TokenImpl();
        }

    }

    /**
     * Refills the input buffer.
     *
     * @return      <code>true</code> if EOF was reached, otherwise
     *              <code>false</code>.
     */
    private boolean zzRefill() {
        return zzCurrentPos>=s.offset+s.count;
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     *
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>YY_INITIAL</tt>.
     *
     * @param reader   the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        // 's' has been updated.
        zzBuffer = s.array;
        /*
         * We replaced the line below with the two below it because zzRefill
         * no longer "refills" the buffer (since the way we do it, it's always
         * "full" the first time through, since it points to the segment's
         * array).  So, we assign zzEndRead here.
         */
        //zzStartRead = zzEndRead = s.offset;
        zzStartRead = s.offset;
        zzEndRead = zzStartRead + s.count - 1;
        zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
        zzLexicalState = YYINITIAL;
        zzReader = reader;
        zzAtBOL  = true;
        zzAtEOF  = false;
    }




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SEJavaScriptTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public SEJavaScriptTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 200) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }/**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }/**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 12: 
          { addToken(start,zzStartRead-1, Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 52: break;
        case 4: 
          { addToken(Token.IDENTIFIER);
          }
        case 53: break;
        case 46: 
          { addToken(Token.LITERAL_BOOLEAN);
          }
        case 54: break;
        case 33: 
          { /* Skip all escaped chars. */
          }
        case 55: break;
        case 24: 
          { // TODO: This isn't right.  The expression and its depth should continue to the next line.
							addToken(start,zzStartRead-1, Token.VARIABLE); addEndToken(INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID); return firstToken;
          }
        case 56: break;
        case 35: 
          { /* Invalid latin-1 character \xXX */ validJSString = false;
          }
        case 57: break;
        case 40: 
          { varDepths.push(Boolean.TRUE);
          }
        case 58: break;
        case 26: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 59: break;
        case 18: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addEndToken(INTERNAL_IN_JS_MLC); return firstToken;
          }
        case 60: break;
        case 47: 
          { addToken(Token.FUNCTION);
          }
        case 61: break;
        case 23: 
          { int type = validJSString ? Token.LITERAL_BACKQUOTE : Token.ERROR_STRING_DOUBLE; addToken(start,zzStartRead, type); yybegin(YYINITIAL);
          }
        case 62: break;
        case 1: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 63: break;
        case 39: 
          { addToken(start, zzStartRead - 1, Token.LITERAL_BACKQUOTE);
								start = zzMarkedPos-2;
								if (varDepths==null) {
									varDepths = new Stack<>();
								}
								else {
									varDepths.clear();
								}
								varDepths.push(Boolean.TRUE);
								yybegin(JS_TEMPLATE_LITERAL_EXPR);
          }
        case 64: break;
        case 30: 
          { start = zzMarkedPos-2; yybegin(JS_MLC);
          }
        case 65: break;
        case 14: 
          { int type = validJSString ? Token.LITERAL_STRING_DOUBLE_QUOTE : Token.ERROR_STRING_DOUBLE; addToken(start,zzStartRead, type); yybegin(YYINITIAL);
          }
        case 66: break;
        case 10: 
          { start = zzMarkedPos-1; validJSString = true; yybegin(JS_TEMPLATE_LITERAL);
          }
        case 67: break;
        case 42: 
          { start = zzMarkedPos-3; yybegin(JS_DOCCOMMENT);
          }
        case 68: break;
        case 22: 
          { /* Skip valid '$' that is not part of template literal expression start */
          }
        case 69: break;
        case 17: 
          { int type = validJSString ? Token.LITERAL_CHAR : Token.ERROR_CHAR; addToken(start,zzStartRead, type); yybegin(YYINITIAL);
          }
        case 70: break;
        case 15: 
          { addToken(start,zzStartRead-1, Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 71: break;
        case 29: 
          { start = zzMarkedPos-2; yybegin(JS_EOL_COMMENT);
          }
        case 72: break;
        case 50: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_DOCUMENTATION); start = zzMarkedPos;
          }
        case 73: break;
        case 16: 
          { /* Line ending in '\' => continue to next line. */
								if (validJSString) {
									addToken(start,zzStartRead, Token.LITERAL_CHAR);
									addEndToken(INTERNAL_IN_JS_CHAR_VALID);
								}
								else {
									addToken(start,zzStartRead, Token.ERROR_CHAR);
									addEndToken(INTERNAL_IN_JS_CHAR_INVALID);
								}
								return firstToken;
          }
        case 74: break;
        case 28: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 75: break;
        case 2: 
          { addToken(Token.WHITESPACE);
          }
        case 76: break;
        case 37: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_DOCUMENTATION);
          }
        case 77: break;
        case 43: 
          { addToken(Token.DATA_TYPE);
          }
        case 78: break;
        case 36: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 79: break;
        case 13: 
          { /* Line ending in '\' => continue to next line. */
								if (validJSString) {
									addToken(start,zzStartRead, Token.LITERAL_STRING_DOUBLE_QUOTE);
									addEndToken(INTERNAL_IN_JS_STRING_VALID);
								}
								else {
									addToken(start,zzStartRead, Token.ERROR_STRING_DOUBLE);
									addEndToken(INTERNAL_IN_JS_STRING_INVALID);
								}
								return firstToken;
          }
        case 80: break;
        case 5: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 81: break;
        case 9: 
          { start = zzMarkedPos-1; validJSString = true; yybegin(JS_STRING);
          }
        case 82: break;
        case 25: 
          { if (!varDepths.empty()) {
								varDepths.pop();
								if (varDepths.empty()) {
									addToken(start,zzStartRead, Token.VARIABLE);
									start = zzMarkedPos;
									yybegin(JS_TEMPLATE_LITERAL);
								}
							}
          }
        case 83: break;
        case 31: 
          { int start = zzStartRead;
										int operatorLen = yycharat(0)=='+' ? 2 : 1;
										int yylen = yylength(); // Cache before first addToken() invalidates it
										//System.out.println("'" + yytext() + "': " + yylength() + ", " + (operatorLen+1));
										addToken(zzStartRead,zzStartRead+operatorLen-1, Token.OPERATOR);
										if (yylen>operatorLen+1) {
											//System.out.println((start+operatorLen) + ", " + (zzMarkedPos-2));
											addToken(start+operatorLen,zzMarkedPos-2, Token.WHITESPACE);
										}
										zzStartRead = zzCurrentPos = zzMarkedPos = zzMarkedPos - 1;
          }
        case 84: break;
        case 19: 
          { addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addEndToken(INTERNAL_IN_JS_COMMENT_DOCUMENTATION); return firstToken;
          }
        case 85: break;
        case 34: 
          { /* Invalid Unicode character \\uXXXX */ validJSString = false;
          }
        case 86: break;
        case 8: 
          { start = zzMarkedPos-1; validJSString = true; yybegin(JS_CHAR);
          }
        case 87: break;
        case 49: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addToken(temp,zzMarkedPos-1, Token.COMMENT_KEYWORD); start = zzMarkedPos;
          }
        case 88: break;
        case 38: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addToken(temp,zzMarkedPos-1, Token.COMMENT_MARKUP); start = zzMarkedPos;
          }
        case 89: break;
        case 32: 
          { addToken(Token.RESERVED_WORD);
          }
        case 90: break;
        case 48: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 91: break;
        case 45: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 92: break;
        case 20: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 93: break;
        case 7: 
          { addToken(Token.SEPARATOR);
          }
        case 94: break;
        case 21: 
          { if (validJSString) {
									addToken(start, zzStartRead - 1, Token.LITERAL_BACKQUOTE);
									addEndToken(INTERNAL_IN_JS_TEMPLATE_LITERAL_VALID);
								}
								else {
									addToken(start,zzStartRead - 1, Token.ERROR_STRING_DOUBLE);
									addEndToken(INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID);
								}
								return firstToken;
          }
        case 95: break;
        case 3: 
          { addNullToken(); return firstToken;
          }
        case 96: break;
        case 41: 
          { boolean highlightedAsRegex = false;
										if (firstToken==null) {
											addToken(Token.REGEX);
											highlightedAsRegex = true;
										}
										else {
											// If this is *likely* to be a regex, based on
											// the previous token, highlight it as such.
											Token t = firstToken.getLastNonCommentNonWhitespaceToken();
											if (RSyntaxUtilities.regexCanFollowInJavaScript(t)) {
												addToken(Token.REGEX);
												highlightedAsRegex = true;
											}
										}
										// If it doesn't *appear* to be a regex, highlight it as
										// individual tokens.
										if (!highlightedAsRegex) {
											int temp = zzStartRead + 1;
											addToken(zzStartRead, zzStartRead, Token.OPERATOR);
											zzStartRead = zzCurrentPos = zzMarkedPos = temp;
										}
          }
        case 97: break;
        case 6: 
          { addToken(Token.OPERATOR);
          }
        case 98: break;
        case 27: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 99: break;
        case 51: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 100: break;
        case 44: 
          { addToken(Token.COMMENT_MULTILINE);
          }
        case 101: break;
        case 11: 
          { 
          }
        case 102: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case JS_TEMPLATE_LITERAL: {
              if (validJSString) {
									addToken(start, zzStartRead - 1, Token.LITERAL_BACKQUOTE);
									addEndToken(INTERNAL_IN_JS_TEMPLATE_LITERAL_VALID);
								}
								else {
									addToken(start,zzStartRead - 1, Token.ERROR_STRING_DOUBLE);
									addEndToken(INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID);
								}
								return firstToken;
            }
            case 753: break;
            case JS_STRING: {
              addToken(start,zzStartRead-1, Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
            }
            case 754: break;
            case JS_TEMPLATE_LITERAL_EXPR: {
              // TODO: This isn't right.  The expression and its depth should continue to the next line.
							addToken(start,zzStartRead-1, Token.VARIABLE); addEndToken(INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID); return firstToken;
            }
            case 755: break;
            case JS_CHAR: {
              addToken(start,zzStartRead-1, Token.ERROR_CHAR); addNullToken(); return firstToken;
            }
            case 756: break;
            case JS_EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 757: break;
            case JS_DOCCOMMENT: {
              yybegin(YYINITIAL); addToken(start,zzEndRead, Token.COMMENT_DOCUMENTATION); addEndToken(INTERNAL_IN_JS_COMMENT_DOCUMENTATION); return firstToken;
            }
            case 758: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 759: break;
            case JS_MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addEndToken(INTERNAL_IN_JS_MLC); return firstToken;
            }
            case 760: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
