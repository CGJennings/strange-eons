package {%package};

import ca.cgjennings.graphics.ImageUtilities;
import ca.cgjennings.ui.theme.AbstractBaseTheme;
import ca.cgjennings.ui.theme.CachingPainter;
import ca.cgjennings.ui.theme.Painter;
import ca.cgjennings.ui.theme.ThemedIcon;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;

/**
 * Implementation of the {%plainname} theme for Strange Eons.
 */
public class {%classname} extends AbstractBaseTheme {
	/**
	 * Creates a new instance of the theme.
	 * All themes must provide a public constructor that takes no arguments.
	 */
	public {%classname}() {
	}

	/**
	 * Returns the name of this theme, as it should be presented to the user.
	 * Theme names are typically short, one or two words.
	 *
	 * @return the human-friendly name of this theme
	 */
	@Override
	public String getThemeName() {
		return {%name};
	}{?isDescribed}

	/**
	 * Returns a sentence (without final punctuation) that briefly describes
	 * the theme.
     *
	 * @return a theme description
	 */
	@Override
	public String getThemeDescription() {
		return {%description};
	}{/?isDescribed}

	/**
	 * This is called by {@link AbstractBaseTheme} to allow you to customize
	 * the theme by calling various protected "set" methods defined in that class.
	 * For more complete control over the look and feel, you can subclass
	 * {@link Theme} directly.
	 */
	@Override
	protected void initializeTheme() {
		setBackgroundBase( 0xdddddd );
		setForegroundBase( 0x666666 );
		setFocusRingBase( 0x446688 );
		setFontBase( matchFont(
				"Gill Sans MT,Gill Sans,Calibri,Trebuchet,Kalimati",
				Font.PLAIN, 12
		));
		setDocumentBackdropPainter( new CachingPainter( new Painter() {
			@Override
			public void paint( Graphics2D g, Object object, int width, int height ) {
				int cx = width/2;
				int x2 = width-1;
				int y2 = height-1;
				g.setPaint( Color.GRAY );
				g.fillRect( 0, 0, width, height );
				g.setPaint( Color.LIGHT_GRAY );
				for( int y=0; y<height; y += 2 ) {
					g.drawLine( cx, 0, 0, y );
					g.drawLine( cx, 0, x2, y );
				}
				for( int x=0; x<width; x += 2 ) {
					g.drawLine( cx, 0, x, y2 );
				}
			}
		}));
	}

	/**
	 * Called to allow you to modify the image data for a {@link ThemedIcon}. If
	 * you wish to substitute one image resource for another, override
	 * {@link Theme#applyThemeToImage(java.lang.String)} instead.
	 *
	 * @param source the image to theme
	 * @return a (possibly different) image, modified to suit the theme
	 */
	@Override
	public BufferedImage applyThemeToImage( BufferedImage source ) {
		if( source != null && source.getWidth() < 128 && source.getHeight() < 128 ) {
			source = ImageUtilities.desaturate( source );
		}
		return source;
	}
}