package ca.cgjennings.apps.arkham.project;

import ca.cgjennings.apps.arkham.StrangeEons;
import ca.cgjennings.apps.arkham.dialog.ErrorDialog;
import ca.cgjennings.platform.AgnosticDialog;
import ca.cgjennings.platform.PlatformSupport;
import ca.cgjennings.ui.FilteredDocument;
import ca.cgjennings.ui.JUtilities;
import ca.cgjennings.ui.theme.Palette;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.io.File;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Map.Entry;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import static resources.Language.string;
import resources.ResourceKit;

/**
 * Dialog to rename files in a project.
 *
 * @author Chris Jennings <https://cgjennings.ca/contact>
 */
@SuppressWarnings("serial")
class RenameDialog extends javax.swing.JDialog implements AgnosticDialog {

    private final Member member;
    private String name, ext;
    private final File parent;

    /**
     * Creates new form RenameDialog
     */
    public RenameDialog(Member memberToRename) {
        super(StrangeEons.getWindow(), true);
        JUtilities.makeUtilityWindow(this);

        initComponents();
        getRootPane().setDefaultButton(okBtn);
        PlatformSupport.makeAgnosticDialog(this, okBtn, cancelBtn);

        if (memberToRename.isFolder()) {
            tip.setTipText(string("pa-rename-tip-folder"));
            nameField.setDocument(new FilteredDocument("?[]=+<>:;\"*|^~"));
        } else {
            tip.setTipText(string("pa-rename-tip-ext"));
        }

        member = memberToRename;
        name = member.getFile().getName();
        int pos = name.lastIndexOf('.');
        if (pos >= 0) {
            ext = name.substring(pos);
            name = name.substring(0, pos);
            extLabel.setText(ext);
        } else {
            ext = "";
            extLabel.setVisible(false);
        }
        nameField.setText(name);
        nameField.selectAll();
        nameField.requestFocusInWindow();
        parent = member.getFile().getParentFile();

        nameField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                nameChanged();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                nameChanged();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                nameChanged();
            }
        });

        newName = member.getFile();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        renameLabel = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        cancelBtn = new javax.swing.JButton();
        okBtn = new javax.swing.JButton();
        extLabel = new javax.swing.JLabel();
        errorLabel = new javax.swing.JLabel();
        tip = new ca.cgjennings.ui.JTip();
        spacer = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(string( "pa-rename-title" )); // NOI18N

        renameLabel.setText(string( "pa-rename-filename" )); // NOI18N

        nameField.setDocument( FilteredDocument.createFileNameDocument() );
        nameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fieldKeyPressed(evt);
            }
        });

        cancelBtn.setText(string( "cancel" )); // NOI18N

        okBtn.setText(string( "pa-rename-title" )); // NOI18N

        extLabel.setText(".js");
        extLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        extLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                extLabelMousePressed(evt);
            }
        });

        errorLabel.setForeground(Palette.get.foreground.opaque.red);
        errorLabel.setText(" ");

        spacer.setText("  ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(errorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 88, Short.MAX_VALUE)
                        .addComponent(okBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(renameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nameField, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                        .addGap(1, 1, 1)
                        .addComponent(extLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spacer)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelBtn, okBtn});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(renameLabel)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spacer)
                    .addComponent(extLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(errorLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelBtn)
                    .addComponent(okBtn))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {okBtn, tip});

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void fieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldKeyPressed
            if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
                handleCancelAction(null);
            }
	}//GEN-LAST:event_fieldKeyPressed

	private void extLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_extLabelMousePressed
            if (evt.getButton() == MouseEvent.BUTTON1 && extLabel.isVisible()) {
                String oldText = nameField.getText();
                String newText = oldText + ext;
                nameField.setText(newText);
                nameField.select(oldText.length() + 1, newText.length());
                ext = "";
                extLabel.setVisible(false);
                validate();
            }
	}//GEN-LAST:event_extLabelMousePressed

    private static String getLocalePart(String name) {
        int dot = name.indexOf('.');
        int under = name.indexOf('_');
        if (under < 0) {
            return ""; // has no _ at all, therefore empty locale
        }
        if (under >= 0 && (dot < 0 || dot > under)) {
            if (dot < 0) {
                dot = name.length();
            }
            if ((dot - under) < 7) {
                String locale = name.substring(under, dot);
                if (locale.matches("_[a-z][a-z](_[A-Z][A-Z])?")) {
                    return locale;
                }
            }
        }
        // has an underscore, but is not a valid locale
        return null;
    }

    private static String getBasePart(String name) {
        int under = name.indexOf('_');
        if (under < 0) {
            int dot = name.indexOf('.');
            if (dot < 0) {
                under = name.length();
            } else {
                under = dot;
            }
        }
        return under > 0 ? name.substring(0, under) : "";
    }

    private static String getExtPart(String name) {
        int dot = name.indexOf('.');
        return dot < 0 ? "" : name.substring(dot);
    }

    private static Map<Member, String> getLocaleFamily(Member m, String newName) {
        if (m.isFolder() || m.getParent() == null) {
            return null;
        }

        // the locale part of the name must be staying the same
        // (either null->null or equal)
        String name = m.getName();
        String loc = getLocalePart(name);
        // existing file has an _ but not a valid locale
        if (loc == null) {
            return null;
        }

        String newLoc = getLocalePart(newName);
        // changing the locale part of the name: can't rename family
        if (!loc.equals(newLoc)) {
            return null;
        }

        // OK, the locale part of the name isn't changing:
        // analyze all of the siblings and find out if this is part
        // of a family or not
        String base = getBasePart(name);
        String ext = getExtPart(name);
        String newBase = getBasePart(newName);
        String newExt = getExtPart(newName);
        LinkedHashMap<Member, String> matches = new LinkedHashMap<>(m.getParent().getChildCount());
        for (Member sib : m.getParent().getChildren()) {
            String sibName = sib.getName();
            if (base.equals(getBasePart(sibName)) && ext.equals(getExtPart(sibName))) {
                newLoc = getLocalePart(sibName);
                if (newLoc != null) {
                    matches.put(sib, newBase + newLoc + newExt);
                }
            }
        }

        if (matches.size() < 2) {
            matches = null;
        } else {
            // we will return a non-null matches value
            // to make sure that the selected member is reselected after
            // a family rename, we need to rename it last; to ensure this,
            // we remove it from the map, then add it back, thus placing
            // it at the end of the group
            newName = matches.remove(m);
            if (newName != null) {
                matches.put(m, newName);
            } else {
                StrangeEons.log.warning("member not in family");
                return null;
            }
        }

        return matches;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelBtn;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JLabel extLabel;
    private javax.swing.JTextField nameField;
    private javax.swing.JButton okBtn;
    private javax.swing.JLabel renameLabel;
    private javax.swing.JLabel spacer;
    private ca.cgjennings.ui.JTip tip;
    // End of variables declaration//GEN-END:variables

    @Override
    public void handleOKAction(ActionEvent e) {
        if (!validateName()) {
            return;
        }

        File f = composeNewFile();

        // check for localized family renaming
        if (!member.isFolder()) {
            Map<Member, String> localeMap = getLocaleFamily(member, f.getName());
            if (localeMap != null) {
                int v = JOptionPane.showConfirmDialog(
                        this, string("pa-rename-locale-family"), getTitle(),
                        JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE
                );
                if (v != JOptionPane.NO_OPTION) {
                    if (v == JOptionPane.YES_OPTION) {
                        final File parent = member.getParent().getFile();
                        for (Entry<Member, String> entry : localeMap.entrySet()) {
                            f = new File(parent, entry.getValue());
                            try {
                                newName = Rename.rename(entry.getKey(), f, null);
                            } catch (Exception ex) {
                                for (Entry<Member, String> backout : localeMap.entrySet()) {
                                    // stop when we reach the file that failed
                                    if (backout.getKey().equals(entry.getKey())) {
                                        break;
                                    }

                                    f = new File(parent, backout.getValue());
                                    f.renameTo(backout.getKey().getFile());
                                }
                                displayError(entry.getKey(), ex);
                                break;
                            }
                        }
                    }
                    dispose();
                    return;
                }
            }
        }

        try {
            Rename.rename(member, f, newSubfolders);
        } catch (Exception ex) {
            displayError(member, ex);
        }
        dispose();
    }

    private static void displayError(Member m, Throwable t) {
        ErrorDialog.displayError(string("pa-rename-err", ResourceKit.makeStringHTMLSafe(m.getName())), t);
    }

    private File newName;

    /**
     * After the dialog completes, you may call this to determine the new name
     * of the target file.
     *
     * @return the name of the target file after the rename operation completes
     */
    public File getNewFile() {
        return newName;
    }

    private File composeNewFile() {
        String newName = nameField.getText();

        newName = newName.replace('\\', '/');
        int slash = newName.indexOf('/');
        int comma = newName.indexOf(',');
        if (slash >= 0 || comma >= 0) {
            if (comma >= 0 && comma < slash) {
                slash = comma;
            }
            newSubfolders = newName.substring(slash + 1);
            newName = newName.substring(0, slash);
        }

        newName += ext;

        return new File(parent, newName);
    }

    // after calling composeNewFile, this will contain any subfolders to
    // be created, separated by slashes
    private String newSubfolders = null;

    private boolean validateName() {
        String error = " ";
        File newFile = composeNewFile();
        File oldFile = member.getFile();

        if (newFile.exists() && !newFile.equals(oldFile)) {
            error = string("pa-rename-exists");
        }

        errorLabel.setText(error);
        String newName = newFile.getName();
        return newName.length() > 0 && error.equals(" ");
    }

    private void nameChanged() {
        PlatformSupport.getAgnosticOK(true, okBtn, cancelBtn).setEnabled(validateName());
    }

    @Override
    public void handleCancelAction(ActionEvent e) {
        dispose();
    }
}
