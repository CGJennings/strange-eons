package ca.cgjennings.apps.arkham.deck.item;

import ca.cgjennings.math.Interpolation;
import static resources.Language.string;

/**
 * The style panel for editing user-defined bleed margins.
 *
 * @author Chris Jennings <https://cgjennings.ca/contact>
 * @since 3.0
 */
@SuppressWarnings("serial")
class UserBleedMarginStylePanel extends AbstractStylePanel<UserBleedMarginStyle> implements UserBleedMarginStyle {

    /**
     * Creates new shape style editing panel.
     */
    public UserBleedMarginStylePanel() {
        initComponents();
    }

    @Override
    public String getTitle() {
        return string("style-l-title-bleed");
    }

    @Override
    public boolean isBleedMarginMarked() {
        return cropMarkBox.isSelected();
    }

    @Override
    public void setBleedMarginMarked(boolean mark) {
        cropMarkBox.setSelected(mark);
        cropMarkBoxActionPerformed(null);
    }

    @Override
    public double getBleedMargin() {
        return ((Number) bleedSpinner.getValue()).doubleValue();
    }

    @Override
    public void setBleedMargin(double margin) {
        margin = Interpolation.clamp(margin, 0d, 36d);
        bleedSpinner.setValue(margin);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cropMarkBox = new javax.swing.JCheckBox();
        bleedLabel = new javax.swing.JLabel();
        bleedSpinner = new javax.swing.JSpinner();
        pointsLabel = new javax.swing.JLabel();

        cropMarkBox.setText(string( "style-optional-crop-marks" )); // NOI18N
        cropMarkBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cropMarkBoxActionPerformed(evt);
            }
        });

        bleedLabel.setLabelFor(bleedSpinner);
        bleedLabel.setText(string( "style-bleed-margin" )); // NOI18N

        bleedSpinner.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, 36.0d, 0.25d));
        bleedSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                bleedSpinnerStateChanged(evt);
            }
        });

        pointsLabel.setText(string( "de-l-points" )); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(bleedLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bleedSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pointsLabel))
                    .addComponent(cropMarkBox))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cropMarkBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bleedLabel)
                    .addComponent(bleedSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pointsLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cropMarkBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cropMarkBoxActionPerformed
        boolean enabled = cropMarkBox.isSelected();
        bleedLabel.setEnabled(enabled);
        bleedSpinner.setEnabled(enabled);
        pointsLabel.setEnabled(enabled);
        styleChanged();
    }//GEN-LAST:event_cropMarkBoxActionPerformed

    private void bleedSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_bleedSpinnerStateChanged
        styleChanged();
    }//GEN-LAST:event_bleedSpinnerStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bleedLabel;
    private javax.swing.JSpinner bleedSpinner;
    private javax.swing.JCheckBox cropMarkBox;
    private javax.swing.JLabel pointsLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public int getPanelGroup() {
        return 1200;
    }
}
