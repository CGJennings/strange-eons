package ca.cgjennings.apps.arkham;

import ca.cgjennings.apps.arkham.component.Marker;
import ca.cgjennings.spelling.ui.JSpellingTextArea;
import ca.cgjennings.spelling.ui.JSpellingTextField;
import ca.cgjennings.ui.FilteredListModel;
import gamedata.RegistrationListener;
import gamedata.Silhouette;
import java.awt.EventQueue;
import static resources.Language.string;

/**
 * Editor for game markers and tokens.
 *
 * @author Chris Jennings <https://cgjennings.ca/contact>
 */
@SuppressWarnings("serial")
public final class MarkerEditor extends AbstractGameComponentEditor<Marker> {

    private RegistrationListener silListener;

    /**
     * Creates a new editor for markers. The editor will initially contain a
     * default marker.
     */
    public MarkerEditor() {
        this(null);
    }

    /**
     * Creates a new editor for the specified marker.
     *
     * @param m the marker to be edited
     */
    public MarkerEditor(Marker m) {
        initComponents();
        localizeForPlatform();

        silListener = (Object instance, boolean isRegistration) -> {
            EventQueue.invokeLater(() -> {
                Silhouette sel = (Silhouette) silList.getSelectedValue();
                FilteredListModel<Silhouette> m1 = updateListModel(Silhouette.getSilhouettes());
                if (sel != null) {
                    for (int i = 0; i < m1.getSize(); ++i) {
                        if (sel.equals(m1.getElementAt(i))) {
                            silList.setSelectedIndex(i);
                            break;
                        }
                    }
                }
            });
        };
        updateListModel(Silhouette.getSilhouettes());
        Silhouette.Listeners.addListener(silListener);

        if (m == null) {
            m = new Marker();
        }
        replaceEditedComponent(m);

        initializeSheetViewers(frontBackPane);
        populateFieldsFromComponent();
        getGameComponent().markSaved();
        createTimer();
    }

    @Override
    public void dispose() {
        Silhouette.Listeners.removeListener(silListener);
        super.dispose();
    }

    private FilteredListModel<Silhouette> updateListModel(Silhouette[] silhouettes) {
        FilteredListModel<Silhouette> m = new FilteredListModel<>(silhouettes);
        silList.setModel(m);
        m.linkTo(filterField, silList, true);
        return m;
    }

    @Override
    protected void populateComponentFromDelayedFields() {
        Marker item = getGameComponent();
        item.setName(nameField.getText());
        item.setComment(commentField.getText());
        item.setFrontText(frontField.getText());
        item.setBackText(backField.getText());
    }

    @Override
    public void populateFieldsFromComponent() {
        Marker item = getGameComponent();

        String key = item.getStencilKey();
        FilteredListModel<Silhouette> model = (FilteredListModel<Silhouette>) silList.getModel();
        model.setFilter(FilteredListModel.acceptAllFilter());

        int i = 0;
        for (; i < model.getSize(); ++i) {
            Silhouette s = (Silhouette) model.getElementAt(i);
            if (s.getKey().equals(key)) {
                silList.setSelectedIndex(i);
                break;
            }
        }
        if (i >= model.getSize()) {
            model.add(new Silhouette(key, item.getStencilKey(), item.getStencil()));
            silList.setSelectedIndex(model.getSize() - 1);
        }

        // reinstate the filter
        model.setFilter(FilteredListModel.createStringFilter(filterField.getText()));

        nameField.setText(item.getName());
        nameField.select(0, 0);
        frontField.setText(item.getFrontText());
        frontField.select(0, 0);
        backField.setText(item.getBackText());
        backField.select(0, 0);

        portraitAdjPanel.updatePanel();
        backPortraitAdjPanel.updatePanel();

        commentField.setText(item.getComment());
        commentField.select(0, 0);

        filterField.putClientProperty(MarkupTarget.FORCE_MARKUP_TARGET_PROPERTY, Boolean.FALSE);

        super.populateFieldsFromComponent();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        cardType = new javax.swing.ButtonGroup();
        filterField = new ca.cgjennings.ui.JFilterField();
        editTabs = new javax.swing.JTabbedPane();
        silPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        javax.swing.JLabel nameLabel = new javax.swing.JLabel();
        javax.swing.JLabel silLabel = new javax.swing.JLabel();
        nameField = new JSpellingTextField();
        javax.swing.JScrollPane silListScroll = new javax.swing.JScrollPane();
        silList = new ca.cgjennings.ui.JIconList<>();
        jTip1 = new ca.cgjennings.ui.JTip();
        frontTab = new javax.swing.JPanel();
        portraitAdjPanel = new ca.cgjennings.apps.arkham.PortraitPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        frontField = new JSpellingTextArea();
        backTab = new javax.swing.JPanel();
        backPortraitAdjPanel = new ca.cgjennings.apps.arkham.PortraitPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        backField = new JSpellingTextArea();
        commentTab = new javax.swing.JPanel();
        rationalePanel = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        commentField = new JSpellingTextArea();
        frontBackPane = new javax.swing.JTabbedPane();

        filterField.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, java.awt.Color.gray), javax.swing.BorderFactory.createEmptyBorder(2, 4, 2, 4)));
        filterField.setName("filterField"); // NOI18N

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setName("Form"); // NOI18N
        getContentPane().setLayout(new java.awt.GridBagLayout());

        editTabs.setName("editTabs"); // NOI18N

        silPanel.setName("silPanel"); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(string("me-shape"))); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N

        nameLabel.setLabelFor(nameField);
        nameLabel.setText(string("me-l-name")); // NOI18N
        nameLabel.setName("nameLabel"); // NOI18N

        silLabel.setLabelFor(silList);
        silLabel.setText(string("me-shape")); // NOI18N
        silLabel.setName("silLabel"); // NOI18N

        nameField.setDragEnabled(true);
        nameField.setName("nameField"); // NOI18N

        silListScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        silListScroll.setName("silListScroll"); // NOI18N

        silList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        silList.setName("silList"); // NOI18N
        silList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                silListValueChanged(evt);
            }
        });
        silListScroll.setViewportView(silList);

        jTip1.setName("jTip1"); // NOI18N
        jTip1.setTipText(string( "me-l-sil-hint" )); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(silListScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(nameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nameField, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(silLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 358, Short.MAX_VALUE)
                                .addComponent(jTip1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(silLabel)
                    .addComponent(jTip1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(silListScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
                .addContainerGap())
        );

        filterField.setSearchBorder( filterField.getBorder() );
        silListScroll.setColumnHeaderView( filterField );

        javax.swing.GroupLayout silPanelLayout = new javax.swing.GroupLayout(silPanel);
        silPanel.setLayout(silPanelLayout);
        silPanelLayout.setHorizontalGroup(
            silPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(silPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        silPanelLayout.setVerticalGroup(
            silPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(silPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        editTabs.addTab(string("me-shape"), silPanel); // NOI18N

        frontTab.setName("frontTab"); // NOI18N

        portraitAdjPanel.setName("portraitAdjPanel"); // NOI18N

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(string("me-front-text"))); // NOI18N
        jPanel3.setName("jPanel3"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        frontField.setTabSize(4);
        frontField.setName("frontField"); // NOI18N
        jScrollPane1.setViewportView(frontField);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout frontTabLayout = new javax.swing.GroupLayout(frontTab);
        frontTab.setLayout(frontTabLayout);
        frontTabLayout.setHorizontalGroup(
            frontTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frontTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frontTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(portraitAdjPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        frontTabLayout.setVerticalGroup(
            frontTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frontTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(portraitAdjPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        editTabs.addTab(string("front"), frontTab); // NOI18N

        backTab.setName("backTab"); // NOI18N

        backPortraitAdjPanel.setName("backPortraitAdjPanel"); // NOI18N

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(string("me-back-text"))); // NOI18N
        jPanel2.setName("jPanel2"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        backField.setTabSize(4);
        backField.setName("backField"); // NOI18N
        jScrollPane2.setViewportView(backField);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout backTabLayout = new javax.swing.GroupLayout(backTab);
        backTab.setLayout(backTabLayout);
        backTabLayout.setHorizontalGroup(
            backTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(backTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(backPortraitAdjPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        backTabLayout.setVerticalGroup(
            backTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(backPortraitAdjPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        editTabs.addTab(string("back"), backTab); // NOI18N

        commentTab.setName("commentTab"); // NOI18N

        rationalePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(string("ae-panel-drc"))); // NOI18N
        rationalePanel.setName("rationalePanel"); // NOI18N

        jLabel19.setText(string("ae-l-drc")); // NOI18N
        jLabel19.setName("jLabel19"); // NOI18N

        jScrollPane7.setName("jScrollPane7"); // NOI18N

        commentField.setColumns(20);
        commentField.setLineWrap(true);
        commentField.setRows(5);
        commentField.setTabSize(4);
        commentField.setWrapStyleWord(true);
        commentField.setDragEnabled(true);
        commentField.setName("commentField"); // NOI18N
        jScrollPane7.setViewportView(commentField);

        javax.swing.GroupLayout rationalePanelLayout = new javax.swing.GroupLayout(rationalePanel);
        rationalePanel.setLayout(rationalePanelLayout);
        rationalePanelLayout.setHorizontalGroup(
            rationalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rationalePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rationalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(rationalePanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE))
                    .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE))
                .addContainerGap())
        );
        rationalePanelLayout.setVerticalGroup(
            rationalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rationalePanelLayout.createSequentialGroup()
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout commentTabLayout = new javax.swing.GroupLayout(commentTab);
        commentTab.setLayout(commentTabLayout);
        commentTabLayout.setHorizontalGroup(
            commentTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(commentTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rationalePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        commentTabLayout.setVerticalGroup(
            commentTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(commentTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rationalePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        rationalePanel.getAccessibleContext().setAccessibleName(string("ae-panel-drc")); // NOI18N

        editTabs.addTab(string("ae-tab-comments"), commentTab); // NOI18N

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(editTabs, gridBagConstraints);

        frontBackPane.setMinimumSize(new java.awt.Dimension(1, 1));
        frontBackPane.setName("frontBackPane"); // NOI18N
        frontBackPane.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(frontBackPane, gridBagConstraints);

        setBounds(0, 0, 822, 564);
    }// </editor-fold>//GEN-END:initComponents

private void silListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_silListValueChanged
    if (silList.getSelectedIndex() < 0) {
        return;
    }
    Silhouette s = (Silhouette) silList.getSelectedValue();
    getGameComponent().setSilhouette(s);
    // tell both portrait editors that the portrait changed so that they
    // will adjust to the new shape
    portraitAdjPanel.setPortrait(portraitAdjPanel.getPortrait());
    backPortraitAdjPanel.setPortrait(backPortraitAdjPanel.getPortrait());
}//GEN-LAST:event_silListValueChanged

    @Override
    public void setGameComponent(Marker c) {
        super.setGameComponent(c);
        if (c != null) {
            Marker m = getGameComponent();
            portraitAdjPanel.setPortrait(m.getPortrait(0));
            backPortraitAdjPanel.setPortrait(m.getPortrait(1));
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea backField;
    private ca.cgjennings.apps.arkham.PortraitPanel backPortraitAdjPanel;
    private javax.swing.JPanel backTab;
    private javax.swing.ButtonGroup cardType;
    private javax.swing.JTextArea commentField;
    private javax.swing.JPanel commentTab;
    private javax.swing.JTabbedPane editTabs;
    private ca.cgjennings.ui.JFilterField filterField;
    private javax.swing.JTabbedPane frontBackPane;
    private javax.swing.JTextArea frontField;
    private javax.swing.JPanel frontTab;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane7;
    private ca.cgjennings.ui.JTip jTip1;
    private javax.swing.JTextField nameField;
    private ca.cgjennings.apps.arkham.PortraitPanel portraitAdjPanel;
    private javax.swing.JPanel rationalePanel;
    private ca.cgjennings.ui.JIconList<Silhouette> silList;
    private javax.swing.JPanel silPanel;
    // End of variables declaration//GEN-END:variables

}
