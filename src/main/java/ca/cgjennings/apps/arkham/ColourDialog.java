package ca.cgjennings.apps.arkham;

import ca.cgjennings.graphics.paints.CheckeredPaint;
import ca.cgjennings.platform.AgnosticDialog;
import ca.cgjennings.platform.PlatformSupport;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusListener;
import java.awt.event.WindowListener;
import java.lang.ref.SoftReference;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Locale;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.border.EtchedBorder;
import javax.swing.event.ChangeListener;
import static resources.Language.string;
import resources.RawSettings;

/**
 * A colour selection dialog consistent with the tint selector
 * ({@link HSBPanel}).
 *
 * @author Chris Jennings <https://cgjennings.ca/contact>
 */
@SuppressWarnings("serial")
public class ColourDialog extends javax.swing.JDialog implements AgnosticDialog, Tintable, ActionListener, FocusListener, ChangeListener, WindowListener {

    boolean showOpacity;
    NumberFormat formatter;

    public ColourDialog(java.awt.Frame parent) {
        this(parent, true);
    }

    /**
     * Creates new form ColourDialog
     */
    public ColourDialog(java.awt.Frame parent, boolean setOpacity) {
        super(parent, true);
        initComponents();
        HSBPanel.takeOverSlider(opacityLabel, opacitySlider);
        formatter = NumberFormat.getInstance();
        PlatformSupport.makeAgnosticDialog(this, okBtn, cancelBtn);
        hsbPanel.setTintable(this, true);
        hsbPanel.setPresetsVisible(false);
        showOpacity = setOpacity;
        if (!showOpacity) {
            opacityPanel.setVisible(false);
        }
        pack();

        recentColours = new JButton[]{
            recent1, recent2, recent3, recent4,
            recent5, recent6, recent7, recent8,
            recent9, recent10, recent11, recent12,
            recent13, recent14, recent15, recent16,
            recent17, recent18, recent19, recent20,
            recent21, recent22, recent23, recent24,
            recent25, recent26, recent27, recent28,
            recent29, recent30, recent31, recent32
        };

        loadRecentColours();
    }

    public static ColourDialog getSharedDialog() {
        if (shared == null) {
            shared = new ColourDialog(StrangeEons.getWindow());
        }
        return shared;
    }
    private static ColourDialog shared;
    private JButton[] recentColours;
    private static final String COLOUR_KEY_PREFIX = "recent-colour-";

    private void loadRecentColours() {
        for (int i = 0; i < recentColours.length; ++i) {
            boolean ok = false;
            int rgb = -1;
            String s = RawSettings.getUserSetting(COLOUR_KEY_PREFIX + (i + 1));

            if (s != null) {
                if (s.length() < 8) {
                    s = "ffffffff".substring(s.length()) + s;
                }
                try {
                    rgb = (int) (Long.parseLong(s, 16) & 0xffffffffL);
                    ok = true;
                } catch (NumberFormatException e) {
                }
            }

            if (!ok) {
                recentColours[i].setEnabled(false);
                recentColours[i].setOpaque(false);
                recentColours[i].setBackground(Color.LIGHT_GRAY);
            } else {
                recentColours[i].setEnabled(true);
                recentColours[i].setOpaque(true);
                recentColours[i].setBackground(new Color(rgb, true));
            }
        }
    }

    private void saveRecentColours() {
        String newColor = String.format(Locale.US, "%08x", selectedColour.getRGB());
        ArrayList<String> colours = new ArrayList<>(recentColours.length + 1);
        colours.add(newColor);
        for (int i = 0; i < recentColours.length; ++i) {
            String s = RawSettings.getUserSetting(COLOUR_KEY_PREFIX + (i + 1));
            if (s != null && !s.trim().toLowerCase(Locale.US).equals(newColor)) {
                colours.add(s);
            }
        }
        for (int i = 0; i < colours.size(); ++i) {
            RawSettings.setUserSetting(COLOUR_KEY_PREFIX + (i + 1), colours.get(i));
        }
        for (int i = colours.size(); i < recentColours.length; ++i) {
            RawSettings.removeUserSetting(COLOUR_KEY_PREFIX + (i + 1));
        }
        RawSettings.writeUserSettings();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        hsbPanel = new ca.cgjennings.apps.arkham.HSBPanel();
        swatchPanel = new javax.swing.JPanel();
        recent1 = new ColourButton();
        recent2 = new ColourButton();
        recent3 = new ColourButton();
        recent4 = new ColourButton();
        recent5 = new ColourButton();
        recent6 = new ColourButton();
        recent7 = new ColourButton();
        recent8 = new ColourButton();
        recent9 = new ColourButton();
        recent10 = new ColourButton();
        recent11 = new ColourButton();
        recent12 = new ColourButton();
        recent13 = new ColourButton();
        recent14 = new ColourButton();
        recent15 = new ColourButton();
        recent16 = new ColourButton();
        recent17 = new ColourButton();
        recent18 = new ColourButton();
        recent19 = new ColourButton();
        recent20 = new ColourButton();
        recent21 = new ColourButton();
        recent22 = new ColourButton();
        recent23 = new ColourButton();
        recent24 = new ColourButton();
        recent25 = new ColourButton();
        recent26 = new ColourButton();
        recent27 = new ColourButton();
        recent28 = new ColourButton();
        recent29 = new ColourButton();
        recent30 = new ColourButton();
        recent31 = new ColourButton();
        recent32 = new ColourButton();
        okBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        opacityPanel = new javax.swing.JPanel();
        opacityLabel = new ca.cgjennings.ui.OpacityLabel();
        opacitySlider = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        opacityField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        opacitySwatch = new ColourButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(string("cd-l-colour")); // NOI18N
        addWindowListener(this);

        hsbPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(string("cd-l-colour"))); // NOI18N

        swatchPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(string("cd-l-recent"))); // NOI18N
        swatchPanel.setLayout(new java.awt.GridBagLayout());

        recent1.setBackground(new java.awt.Color(255, 0, 0));
        recent1.setText(" ");
        recent1.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        recent1.setContentAreaFilled(false);
        recent1.setMaximumSize(new java.awt.Dimension(18, 18));
        recent1.setMinimumSize(new java.awt.Dimension(18, 18));
        recent1.setPreferredSize(new java.awt.Dimension(18, 18));
        recent1.addActionListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 16, 2, 2);
        swatchPanel.add(recent1, gridBagConstraints);

        recent2.setBackground(new java.awt.Color(255, 0, 0));
        recent2.setText(" ");
        recent2.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        recent2.setContentAreaFilled(false);
        recent2.setMaximumSize(new java.awt.Dimension(18, 18));
        recent2.setMinimumSize(new java.awt.Dimension(18, 18));
        recent2.setPreferredSize(new java.awt.Dimension(18, 18));
        recent2.addActionListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        swatchPanel.add(recent2, gridBagConstraints);

        recent3.setBackground(new java.awt.Color(255, 0, 0));
        recent3.setText(" ");
        recent3.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        recent3.setContentAreaFilled(false);
        recent3.setMaximumSize(new java.awt.Dimension(18, 18));
        recent3.setMinimumSize(new java.awt.Dimension(18, 18));
        recent3.setPreferredSize(new java.awt.Dimension(18, 18));
        recent3.addActionListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        swatchPanel.add(recent3, gridBagConstraints);

        recent4.setBackground(new java.awt.Color(255, 0, 0));
        recent4.setText(" ");
        recent4.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        recent4.setContentAreaFilled(false);
        recent4.setMaximumSize(new java.awt.Dimension(18, 18));
        recent4.setMinimumSize(new java.awt.Dimension(18, 18));
        recent4.setPreferredSize(new java.awt.Dimension(18, 18));
        recent4.addActionListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 16);
        swatchPanel.add(recent4, gridBagConstraints);

        recent5.setBackground(new java.awt.Color(255, 0, 0));
        recent5.setText(" ");
        recent5.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        recent5.setContentAreaFilled(false);
        recent5.setMaximumSize(new java.awt.Dimension(18, 18));
        recent5.setMinimumSize(new java.awt.Dimension(18, 18));
        recent5.setPreferredSize(new java.awt.Dimension(18, 18));
        recent5.addActionListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 16, 2, 2);
        swatchPanel.add(recent5, gridBagConstraints);

        recent6.setBackground(new java.awt.Color(255, 0, 0));
        recent6.setText(" ");
        recent6.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        recent6.setContentAreaFilled(false);
        recent6.setMaximumSize(new java.awt.Dimension(18, 18));
        recent6.setMinimumSize(new java.awt.Dimension(18, 18));
        recent6.setPreferredSize(new java.awt.Dimension(18, 18));
        recent6.addActionListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        swatchPanel.add(recent6, gridBagConstraints);

        recent7.setBackground(new java.awt.Color(255, 0, 0));
        recent7.setText(" ");
        recent7.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        recent7.setContentAreaFilled(false);
        recent7.setMaximumSize(new java.awt.Dimension(18, 18));
        recent7.setMinimumSize(new java.awt.Dimension(18, 18));
        recent7.setPreferredSize(new java.awt.Dimension(18, 18));
        recent7.addActionListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        swatchPanel.add(recent7, gridBagConstraints);

        recent8.setBackground(new java.awt.Color(255, 0, 0));
        recent8.setText(" ");
        recent8.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        recent8.setContentAreaFilled(false);
        recent8.setMaximumSize(new java.awt.Dimension(18, 18));
        recent8.setMinimumSize(new java.awt.Dimension(18, 18));
        recent8.setPreferredSize(new java.awt.Dimension(18, 18));
        recent8.addActionListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 16);
        swatchPanel.add(recent8, gridBagConstraints);

        recent9.setBackground(new java.awt.Color(255, 0, 0));
        recent9.setText(" ");
        recent9.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        recent9.setContentAreaFilled(false);
        recent9.setMaximumSize(new java.awt.Dimension(18, 18));
        recent9.setMinimumSize(new java.awt.Dimension(18, 18));
        recent9.setPreferredSize(new java.awt.Dimension(18, 18));
        recent9.addActionListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(2, 16, 2, 2);
        swatchPanel.add(recent9, gridBagConstraints);

        recent10.setBackground(new java.awt.Color(255, 0, 0));
        recent10.setText(" ");
        recent10.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        recent10.setContentAreaFilled(false);
        recent10.setMaximumSize(new java.awt.Dimension(18, 18));
        recent10.setMinimumSize(new java.awt.Dimension(18, 18));
        recent10.setPreferredSize(new java.awt.Dimension(18, 18));
        recent10.addActionListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        swatchPanel.add(recent10, gridBagConstraints);

        recent11.setBackground(new java.awt.Color(255, 0, 0));
        recent11.setText(" ");
        recent11.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        recent11.setContentAreaFilled(false);
        recent11.setMaximumSize(new java.awt.Dimension(18, 18));
        recent11.setMinimumSize(new java.awt.Dimension(18, 18));
        recent11.setPreferredSize(new java.awt.Dimension(18, 18));
        recent11.addActionListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        swatchPanel.add(recent11, gridBagConstraints);

        recent12.setBackground(new java.awt.Color(255, 0, 0));
        recent12.setText(" ");
        recent12.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        recent12.setContentAreaFilled(false);
        recent12.setMaximumSize(new java.awt.Dimension(18, 18));
        recent12.setMinimumSize(new java.awt.Dimension(18, 18));
        recent12.setPreferredSize(new java.awt.Dimension(18, 18));
        recent12.addActionListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 16);
        swatchPanel.add(recent12, gridBagConstraints);

        recent13.setBackground(new java.awt.Color(255, 0, 0));
        recent13.setText(" ");
        recent13.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        recent13.setContentAreaFilled(false);
        recent13.setMaximumSize(new java.awt.Dimension(18, 18));
        recent13.setMinimumSize(new java.awt.Dimension(18, 18));
        recent13.setPreferredSize(new java.awt.Dimension(18, 18));
        recent13.addActionListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(2, 16, 2, 2);
        swatchPanel.add(recent13, gridBagConstraints);

        recent14.setBackground(new java.awt.Color(255, 0, 0));
        recent14.setText(" ");
        recent14.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        recent14.setContentAreaFilled(false);
        recent14.setMaximumSize(new java.awt.Dimension(18, 18));
        recent14.setMinimumSize(new java.awt.Dimension(18, 18));
        recent14.setPreferredSize(new java.awt.Dimension(18, 18));
        recent14.addActionListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        swatchPanel.add(recent14, gridBagConstraints);

        recent15.setBackground(new java.awt.Color(255, 0, 0));
        recent15.setText(" ");
        recent15.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        recent15.setContentAreaFilled(false);
        recent15.setMaximumSize(new java.awt.Dimension(18, 18));
        recent15.setMinimumSize(new java.awt.Dimension(18, 18));
        recent15.setPreferredSize(new java.awt.Dimension(18, 18));
        recent15.addActionListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        swatchPanel.add(recent15, gridBagConstraints);

        recent16.setBackground(new java.awt.Color(255, 0, 0));
        recent16.setText(" ");
        recent16.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        recent16.setContentAreaFilled(false);
        recent16.setMaximumSize(new java.awt.Dimension(18, 18));
        recent16.setMinimumSize(new java.awt.Dimension(18, 18));
        recent16.setPreferredSize(new java.awt.Dimension(18, 18));
        recent16.addActionListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 16);
        swatchPanel.add(recent16, gridBagConstraints);

        recent17.setBackground(new java.awt.Color(255, 0, 0));
        recent17.setText(" ");
        recent17.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        recent17.setContentAreaFilled(false);
        recent17.setMaximumSize(new java.awt.Dimension(18, 18));
        recent17.setMinimumSize(new java.awt.Dimension(18, 18));
        recent17.setPreferredSize(new java.awt.Dimension(18, 18));
        recent17.addActionListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(2, 16, 2, 2);
        swatchPanel.add(recent17, gridBagConstraints);

        recent18.setBackground(new java.awt.Color(255, 0, 0));
        recent18.setText(" ");
        recent18.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        recent18.setContentAreaFilled(false);
        recent18.setMaximumSize(new java.awt.Dimension(18, 18));
        recent18.setMinimumSize(new java.awt.Dimension(18, 18));
        recent18.setPreferredSize(new java.awt.Dimension(18, 18));
        recent18.addActionListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        swatchPanel.add(recent18, gridBagConstraints);

        recent19.setBackground(new java.awt.Color(255, 0, 0));
        recent19.setText(" ");
        recent19.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        recent19.setContentAreaFilled(false);
        recent19.setMaximumSize(new java.awt.Dimension(18, 18));
        recent19.setMinimumSize(new java.awt.Dimension(18, 18));
        recent19.setPreferredSize(new java.awt.Dimension(18, 18));
        recent19.addActionListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        swatchPanel.add(recent19, gridBagConstraints);

        recent20.setBackground(new java.awt.Color(255, 0, 0));
        recent20.setText(" ");
        recent20.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        recent20.setContentAreaFilled(false);
        recent20.setMaximumSize(new java.awt.Dimension(18, 18));
        recent20.setMinimumSize(new java.awt.Dimension(18, 18));
        recent20.setPreferredSize(new java.awt.Dimension(18, 18));
        recent20.addActionListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 16);
        swatchPanel.add(recent20, gridBagConstraints);

        recent21.setBackground(new java.awt.Color(255, 0, 0));
        recent21.setText(" ");
        recent21.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        recent21.setContentAreaFilled(false);
        recent21.setMaximumSize(new java.awt.Dimension(18, 18));
        recent21.setMinimumSize(new java.awt.Dimension(18, 18));
        recent21.setPreferredSize(new java.awt.Dimension(18, 18));
        recent21.addActionListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(2, 16, 2, 2);
        swatchPanel.add(recent21, gridBagConstraints);

        recent22.setBackground(new java.awt.Color(255, 0, 0));
        recent22.setText(" ");
        recent22.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        recent22.setContentAreaFilled(false);
        recent22.setMaximumSize(new java.awt.Dimension(18, 18));
        recent22.setMinimumSize(new java.awt.Dimension(18, 18));
        recent22.setPreferredSize(new java.awt.Dimension(18, 18));
        recent22.addActionListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        swatchPanel.add(recent22, gridBagConstraints);

        recent23.setBackground(new java.awt.Color(255, 0, 0));
        recent23.setText(" ");
        recent23.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        recent23.setContentAreaFilled(false);
        recent23.setMaximumSize(new java.awt.Dimension(18, 18));
        recent23.setMinimumSize(new java.awt.Dimension(18, 18));
        recent23.setPreferredSize(new java.awt.Dimension(18, 18));
        recent23.addActionListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        swatchPanel.add(recent23, gridBagConstraints);

        recent24.setBackground(new java.awt.Color(255, 0, 0));
        recent24.setText(" ");
        recent24.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        recent24.setContentAreaFilled(false);
        recent24.setMaximumSize(new java.awt.Dimension(18, 18));
        recent24.setMinimumSize(new java.awt.Dimension(18, 18));
        recent24.setPreferredSize(new java.awt.Dimension(18, 18));
        recent24.addActionListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 16);
        swatchPanel.add(recent24, gridBagConstraints);

        recent25.setBackground(new java.awt.Color(255, 0, 0));
        recent25.setText(" ");
        recent25.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        recent25.setContentAreaFilled(false);
        recent25.setMaximumSize(new java.awt.Dimension(18, 18));
        recent25.setMinimumSize(new java.awt.Dimension(18, 18));
        recent25.setPreferredSize(new java.awt.Dimension(18, 18));
        recent25.addActionListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(2, 16, 2, 2);
        swatchPanel.add(recent25, gridBagConstraints);

        recent26.setBackground(new java.awt.Color(255, 0, 0));
        recent26.setText(" ");
        recent26.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        recent26.setContentAreaFilled(false);
        recent26.setMaximumSize(new java.awt.Dimension(18, 18));
        recent26.setMinimumSize(new java.awt.Dimension(18, 18));
        recent26.setPreferredSize(new java.awt.Dimension(18, 18));
        recent26.addActionListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        swatchPanel.add(recent26, gridBagConstraints);

        recent27.setBackground(new java.awt.Color(255, 0, 0));
        recent27.setText(" ");
        recent27.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        recent27.setContentAreaFilled(false);
        recent27.setMaximumSize(new java.awt.Dimension(18, 18));
        recent27.setMinimumSize(new java.awt.Dimension(18, 18));
        recent27.setPreferredSize(new java.awt.Dimension(18, 18));
        recent27.addActionListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        swatchPanel.add(recent27, gridBagConstraints);

        recent28.setBackground(new java.awt.Color(255, 0, 0));
        recent28.setText(" ");
        recent28.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        recent28.setContentAreaFilled(false);
        recent28.setMaximumSize(new java.awt.Dimension(18, 18));
        recent28.setMinimumSize(new java.awt.Dimension(18, 18));
        recent28.setPreferredSize(new java.awt.Dimension(18, 18));
        recent28.addActionListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 16);
        swatchPanel.add(recent28, gridBagConstraints);

        recent29.setBackground(new java.awt.Color(255, 0, 0));
        recent29.setText(" ");
        recent29.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        recent29.setContentAreaFilled(false);
        recent29.setMaximumSize(new java.awt.Dimension(18, 18));
        recent29.setMinimumSize(new java.awt.Dimension(18, 18));
        recent29.setPreferredSize(new java.awt.Dimension(18, 18));
        recent29.addActionListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(2, 16, 2, 2);
        swatchPanel.add(recent29, gridBagConstraints);

        recent30.setBackground(new java.awt.Color(255, 0, 0));
        recent30.setText(" ");
        recent30.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        recent30.setContentAreaFilled(false);
        recent30.setMaximumSize(new java.awt.Dimension(18, 18));
        recent30.setMinimumSize(new java.awt.Dimension(18, 18));
        recent30.setPreferredSize(new java.awt.Dimension(18, 18));
        recent30.addActionListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        swatchPanel.add(recent30, gridBagConstraints);

        recent31.setBackground(new java.awt.Color(255, 0, 0));
        recent31.setText(" ");
        recent31.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        recent31.setContentAreaFilled(false);
        recent31.setMaximumSize(new java.awt.Dimension(18, 18));
        recent31.setMinimumSize(new java.awt.Dimension(18, 18));
        recent31.setPreferredSize(new java.awt.Dimension(18, 18));
        recent31.addActionListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        swatchPanel.add(recent31, gridBagConstraints);

        recent32.setBackground(new java.awt.Color(255, 0, 0));
        recent32.setText(" ");
        recent32.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        recent32.setContentAreaFilled(false);
        recent32.setMaximumSize(new java.awt.Dimension(18, 18));
        recent32.setMinimumSize(new java.awt.Dimension(18, 18));
        recent32.setPreferredSize(new java.awt.Dimension(18, 18));
        recent32.addActionListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 16);
        swatchPanel.add(recent32, gridBagConstraints);

        okBtn.setText(string("cd-b-ok")); // NOI18N

        cancelBtn.setText(string("cancel")); // NOI18N

        opacityPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(string("cd-l-opacity"))); // NOI18N
        opacityPanel.setLayout(new java.awt.GridBagLayout());

        opacityLabel.setText("opacityLabel1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        opacityPanel.add(opacityLabel, gridBagConstraints);

        opacitySlider.setMajorTickSpacing(500);
        opacitySlider.setMaximum(1000);
        opacitySlider.addChangeListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        opacityPanel.add(opacitySlider, gridBagConstraints);

        jLabel1.setText("0%");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 4);
        opacityPanel.add(jLabel1, gridBagConstraints);

        opacityField.setColumns(6);
        opacityField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        opacityField.setText("100.0%");
        opacityField.addActionListener(this);
        opacityField.addFocusListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        opacityPanel.add(opacityField, gridBagConstraints);

        jLabel2.setText("100%");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 8);
        opacityPanel.add(jLabel2, gridBagConstraints);

        opacitySwatch.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        opacitySwatch.setContentAreaFilled(false);
        opacitySwatch.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 43;
        gridBagConstraints.ipady = 43;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        opacityPanel.add(opacitySwatch, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(opacityPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 622, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(hsbPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(swatchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(okBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelBtn)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelBtn, okBtn});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(swatchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(hsbPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(opacityPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelBtn)
                    .addComponent(okBtn))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {hsbPanel, swatchPanel});

        pack();
    }

    // Code for dispatching events from components to event handlers.

    public void actionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getSource() == recent1) {
            ColourDialog.this.recentColourActionPerformed(evt);
        }
        else if (evt.getSource() == recent2) {
            ColourDialog.this.recentColourActionPerformed(evt);
        }
        else if (evt.getSource() == recent3) {
            ColourDialog.this.recentColourActionPerformed(evt);
        }
        else if (evt.getSource() == recent4) {
            ColourDialog.this.recentColourActionPerformed(evt);
        }
        else if (evt.getSource() == recent5) {
            ColourDialog.this.recentColourActionPerformed(evt);
        }
        else if (evt.getSource() == recent6) {
            ColourDialog.this.recentColourActionPerformed(evt);
        }
        else if (evt.getSource() == recent7) {
            ColourDialog.this.recentColourActionPerformed(evt);
        }
        else if (evt.getSource() == recent8) {
            ColourDialog.this.recentColourActionPerformed(evt);
        }
        else if (evt.getSource() == recent9) {
            ColourDialog.this.recentColourActionPerformed(evt);
        }
        else if (evt.getSource() == recent10) {
            ColourDialog.this.recentColourActionPerformed(evt);
        }
        else if (evt.getSource() == recent11) {
            ColourDialog.this.recentColourActionPerformed(evt);
        }
        else if (evt.getSource() == recent12) {
            ColourDialog.this.recentColourActionPerformed(evt);
        }
        else if (evt.getSource() == recent13) {
            ColourDialog.this.recentColourActionPerformed(evt);
        }
        else if (evt.getSource() == recent14) {
            ColourDialog.this.recentColourActionPerformed(evt);
        }
        else if (evt.getSource() == recent15) {
            ColourDialog.this.recentColourActionPerformed(evt);
        }
        else if (evt.getSource() == recent16) {
            ColourDialog.this.recentColourActionPerformed(evt);
        }
        else if (evt.getSource() == recent17) {
            ColourDialog.this.recentColourActionPerformed(evt);
        }
        else if (evt.getSource() == recent18) {
            ColourDialog.this.recentColourActionPerformed(evt);
        }
        else if (evt.getSource() == recent19) {
            ColourDialog.this.recentColourActionPerformed(evt);
        }
        else if (evt.getSource() == recent20) {
            ColourDialog.this.recentColourActionPerformed(evt);
        }
        else if (evt.getSource() == recent21) {
            ColourDialog.this.recentColourActionPerformed(evt);
        }
        else if (evt.getSource() == recent22) {
            ColourDialog.this.recentColourActionPerformed(evt);
        }
        else if (evt.getSource() == recent23) {
            ColourDialog.this.recentColourActionPerformed(evt);
        }
        else if (evt.getSource() == recent24) {
            ColourDialog.this.recentColourActionPerformed(evt);
        }
        else if (evt.getSource() == recent25) {
            ColourDialog.this.recentColourActionPerformed(evt);
        }
        else if (evt.getSource() == recent26) {
            ColourDialog.this.recentColourActionPerformed(evt);
        }
        else if (evt.getSource() == recent27) {
            ColourDialog.this.recentColourActionPerformed(evt);
        }
        else if (evt.getSource() == recent28) {
            ColourDialog.this.recentColourActionPerformed(evt);
        }
        else if (evt.getSource() == recent29) {
            ColourDialog.this.recentColourActionPerformed(evt);
        }
        else if (evt.getSource() == recent30) {
            ColourDialog.this.recentColourActionPerformed(evt);
        }
        else if (evt.getSource() == recent31) {
            ColourDialog.this.recentColourActionPerformed(evt);
        }
        else if (evt.getSource() == recent32) {
            ColourDialog.this.recentColourActionPerformed(evt);
        }
        else if (evt.getSource() == opacityField) {
            ColourDialog.this.opacityFieldActionPerformed(evt);
        }
    }

    public void focusGained(java.awt.event.FocusEvent evt) {
    }

    public void focusLost(java.awt.event.FocusEvent evt) {
        if (evt.getSource() == opacityField) {
            ColourDialog.this.opacityFieldFocusLost(evt);
        }
    }

    public void windowActivated(java.awt.event.WindowEvent evt) {
    }

    public void windowClosed(java.awt.event.WindowEvent evt) {
    }

    public void windowClosing(java.awt.event.WindowEvent evt) {
        if (evt.getSource() == ColourDialog.this) {
            ColourDialog.this.formWindowClosing(evt);
        }
    }

    public void windowDeactivated(java.awt.event.WindowEvent evt) {
    }

    public void windowDeiconified(java.awt.event.WindowEvent evt) {
    }

    public void windowIconified(java.awt.event.WindowEvent evt) {
    }

    public void windowOpened(java.awt.event.WindowEvent evt) {
    }

    public void stateChanged(javax.swing.event.ChangeEvent evt) {
        if (evt.getSource() == opacitySlider) {
            ColourDialog.this.opacitySliderStateChanged(evt);
        }
    }// </editor-fold>//GEN-END:initComponents

private void recentColourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recentColourActionPerformed
    Color c = ((JButton) evt.getSource()).getBackground();
    setSelectedColor(c);
//	float[] hsb = Color.RGBtoHSB( c.getRed(), c.getGreen(), c.getBlue(), null );
//	hsbPanel.setHSB( hsb );
//	opacitySlider.setValue( Math.round( ((float) c.getAlpha()) / 255f * 1000f ) );
}//GEN-LAST:event_recentColourActionPerformed
    private boolean opacityUpdate;

private void opacityFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opacityFieldActionPerformed
    if (!opacityUpdate) {
        opacityUpdate = true;
        float val = opacity;
        try {
            val = formatter.parse(opacityField.getText()).floatValue();
        } catch (ParseException e) {
        }
        int op = Math.round(val * 10f);
        if (op < 0) {
            op = 0;
        }
        if (op > 1_000) {
            op = 1_000;
        }
        opacitySlider.setValue(op);
        opacityUpdate = false;
    }
}//GEN-LAST:event_opacityFieldActionPerformed

private void opacityFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_opacityFieldFocusLost
    opacityFieldActionPerformed(null);
}//GEN-LAST:event_opacityFieldFocusLost

private void opacitySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_opacitySliderStateChanged
    opacity = opacitySlider.getValue() / 1000f;
    opacityField.setText(formatter.format(opacity * 100f) + "%");
    selectedColour = new Color(selectedColour.getRed(), selectedColour.getGreen(), selectedColour.getBlue(), Math.round(opacity * 255f));
    opacitySwatch.setBackground(selectedColour);
}//GEN-LAST:event_opacitySliderStateChanged

private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
    // ensure that selected colour gets nulled when close button is pressed
    // otherwise it will appear that the user closed the dialog with OK
    handleCancelAction(null);
}//GEN-LAST:event_formWindowClosing

    @Override
    public void setOpacity(float opacity) {
        if (!showOpacity) {
            opacity = 1;
        }
        opacity = opacity < 0f ? 0 : opacity > 1f ? 1f : opacity;
        opacitySlider.setValue(Math.round(opacity * 1000f));
    }

    @Override
    public float getOpacity() {
        return opacity;
    }
    private float opacity = 1f;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelBtn;
    private ca.cgjennings.apps.arkham.HSBPanel hsbPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton okBtn;
    private javax.swing.JTextField opacityField;
    private ca.cgjennings.ui.OpacityLabel opacityLabel;
    private javax.swing.JPanel opacityPanel;
    private javax.swing.JSlider opacitySlider;
    private javax.swing.JButton opacitySwatch;
    private javax.swing.JButton recent1;
    private javax.swing.JButton recent10;
    private javax.swing.JButton recent11;
    private javax.swing.JButton recent12;
    private javax.swing.JButton recent13;
    private javax.swing.JButton recent14;
    private javax.swing.JButton recent15;
    private javax.swing.JButton recent16;
    private javax.swing.JButton recent17;
    private javax.swing.JButton recent18;
    private javax.swing.JButton recent19;
    private javax.swing.JButton recent2;
    private javax.swing.JButton recent20;
    private javax.swing.JButton recent21;
    private javax.swing.JButton recent22;
    private javax.swing.JButton recent23;
    private javax.swing.JButton recent24;
    private javax.swing.JButton recent25;
    private javax.swing.JButton recent26;
    private javax.swing.JButton recent27;
    private javax.swing.JButton recent28;
    private javax.swing.JButton recent29;
    private javax.swing.JButton recent3;
    private javax.swing.JButton recent30;
    private javax.swing.JButton recent31;
    private javax.swing.JButton recent32;
    private javax.swing.JButton recent4;
    private javax.swing.JButton recent5;
    private javax.swing.JButton recent6;
    private javax.swing.JButton recent7;
    private javax.swing.JButton recent8;
    private javax.swing.JButton recent9;
    private javax.swing.JPanel swatchPanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void handleOKAction(ActionEvent e) {
        saveRecentColours();
        setVisible(false);
    }

    @Override
    public void handleCancelAction(ActionEvent e) {
        selectedColour = null;
        setVisible(false);
    }

    @Override
    public void setVisible(boolean visible) {
        if (visible) {
            loadRecentColours();
        }
        super.setVisible(visible);
    }

    @Override
    public void setTint(float hueShift, float saturation, float brightness) {
        Color c = new Color(Color.HSBtoRGB(hueShift, saturation, brightness));
        selectedColour = new Color(c.getRed(), c.getGreen(), c.getBlue(), Math.round(opacity * 255f));
        opacityLabel.setForeground(selectedColour);
        opacitySwatch.setBackground(selectedColour);
    }

    @Override
    public float[] getTint() {
        Color c = selectedColour;
        if (c == null) {
            c = Color.BLACK;
        }
        return Color.RGBtoHSB(c.getRed(), c.getGreen(), c.getBlue(), null);
    }
    private Color selectedColour;

    /**
     * Returns the colour selected by the user using the dialog, or
     * {@code null}.
     *
     * @return the selected colour
     */
    public Color getSelectedColor() {
        return selectedColour;
    }

    /**
     * Sets the currently selected colour in the dialog.
     *
     * @param selection the colour to select
     */
    public void setSelectedColor(Color selection) {
        Color c = selection;
        selectedColour = c;
        hsbPanel.setHSB(Color.RGBtoHSB(c.getRed(), c.getGreen(), c.getBlue(), null));
        if (showOpacity) {
            setOpacity(c.getAlpha() / 255f);
        }
        opacitySwatch.setBackground(c);
    }

    /**
     * A button whose background color represents a selected or selectable
     * colour.
     */
    public static class ColourButton extends JButton {

        private static SoftReference<Paint> SHARED_PAINT;
        private Paint backgroundPaint;

        public ColourButton() {
            synchronized (ColourButton.class) {
                if (SHARED_PAINT != null) {
                    backgroundPaint = SHARED_PAINT.get();
                }
                if (backgroundPaint == null) {
                    backgroundPaint = new CheckeredPaint(6);
                    SHARED_PAINT = new SoftReference<>(backgroundPaint);
                }
            }
            setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
            setBorder(BorderFactory.createEtchedBorder(EtchedBorder.LOWERED));
        }

        @Override
        protected void paintComponent(Graphics g1) {
            Graphics2D g = (Graphics2D) g1;
            int w = getWidth(), h = getHeight();
            Color color = getBackground();
            if (color.getAlpha() < 255) {
                g.setPaint(backgroundPaint);
                g.fillRect(0, 0, w, h);
            }
            if (color.getAlpha() > 0) {
                g.setColor(color);
                g.fillRect(0, 0, w, h);
            }
        }
    }
}
