package resources.projects.pluginwizard;

import ca.cgjennings.ui.EditorPane;
import javax.tools.ToolProvider;
import static resources.Language.string;

/**
 * A standard plug-in wizard page that allows the user to choose whether
 * a plug-in will use script code or compiled classes.
 *
 * @author Chris Jennings <https://cgjennings.ca/contact>
 * @since  3.0
 */
@SuppressWarnings("serial")
public final class CodeFormatPage extends javax.swing.JPanel {
	private boolean compilerAvailable;

	/**
	 * Creates new page for selecting the code format for
	 * a plug-in.
	 */
	public CodeFormatPage() {
		initComponents();
		compilerAvailable = ToolProvider.getSystemJavaCompiler() != null;
		scriptBtn.setSelected( true );
		codeTypeChanged( null );
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.ButtonGroup group = new javax.swing.ButtonGroup();
        scriptBtn = new javax.swing.JRadioButton();
        compiledBtn = new javax.swing.JRadioButton();
        label = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        descField = new EditorPane();
        warnLabel = new ca.cgjennings.ui.JWarningLabel();
        javax.swing.JLabel spacer = new javax.swing.JLabel();
        javax.swing.JLabel spacer1 = new javax.swing.JLabel();

        group.add(scriptBtn);
        scriptBtn.setText(string("prj-l-plugin-wiz-code-0")); // NOI18N
        scriptBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codeTypeChanged(evt);
            }
        });

        group.add(compiledBtn);
        compiledBtn.setText(string("prj-l-plugin-wiz-code-1")); // NOI18N
        compiledBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codeTypeChanged(evt);
            }
        });

        label.setText(string("prj-l-plugin-wiz-choose-code-format")); // NOI18N

        descField.setEditable(false);
        descField.setContentType("text/html"); // NOI18N
        jScrollPane1.setViewportView(descField);

        warnLabel.setText(string("prj-l-plugin-wiz-code-jdk-warn")); // NOI18N

        spacer.setText("                    ");

        spacer1.setText("                    ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(warnLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label)
                        .addGap(0, 70, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(compiledBtn)
                            .addComponent(scriptBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spacer)
                            .addComponent(spacer1))
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(scriptBtn)
                            .addComponent(spacer))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(compiledBtn)
                            .addComponent(spacer1)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(warnLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	/**
	 * Returns <code>true</code> if compiler support was detected.
	 *
	 * @return <code>true</code> if Java compilation will be available in projects
	 */
	public boolean isCompilerAvailable() {
		return compilerAvailable;
	}

	/**
	 * Sets whether the compiled plug-in option (if <code>true</code>) or
	 * scripted option (if <code>false</code>, the default).
	 *
	 * @param compiled whether the plug-in will be compiled
	 */
	public void setCompiledFormatSelected( boolean compiled ) {
		if( compiled ) {
			compiledBtn.setSelected( true );
		} else {
			scriptBtn.setSelected( true );
		}
	}

	/**
	 * Returns <code>true</code> if the compiled code option has been selected,
	 * or <code>false</code> if the script code option is selected.
	 *
	 * @return <code>true</code> if the plug-in will be compiled
	 */
	public boolean isCompiledFormatSelected() {
		return compiledBtn.isSelected();
	}

    private void codeTypeChanged(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codeTypeChanged
        if( scriptBtn.isSelected() ) {
			warnLabel.setVisible( false );
			descField.setText( string("prj-l-plugin-wiz-code-desc-0") );
		} else {
			warnLabel.setVisible( !compilerAvailable );
			descField.setText( string("prj-l-plugin-wiz-code-desc-1") );
		}
		descField.select(0,0);
    }//GEN-LAST:event_codeTypeChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton compiledBtn;
    private javax.swing.JEditorPane descField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel label;
    private javax.swing.JRadioButton scriptBtn;
    private ca.cgjennings.ui.JWarningLabel warnLabel;
    // End of variables declaration//GEN-END:variables
}
